
lab_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004174  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08004304  08004304  00005304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004438  08004438  00006060  2**0
                  CONTENTS
  4 .ARM          00000008  08004438  08004438  00005438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004440  08004440  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004440  08004440  00005440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004444  08004444  00005444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08004448  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006060  2**0
                  CONTENTS
 10 .bss          00000348  20000060  20000060  00006060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003a8  200003a8  00006060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011b08  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002632  00000000  00000000  00017b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001168  00000000  00000000  0001a1d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dc2  00000000  00000000  0001b338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021c95  00000000  00000000  0001c0fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014855  00000000  00000000  0003dd8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3af0  00000000  00000000  000525e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001260d4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f24  00000000  00000000  00126118  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  0012b03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080042ec 	.word	0x080042ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	080042ec 	.word	0x080042ec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <lcd_send_cmd>:
int day=1;
int now=0;
char MonitorTset[100];

void lcd_send_cmd(char cmd)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b086      	sub	sp, #24
 8000574:	af02      	add	r7, sp, #8
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]
	char data_h,data_l;
	uint8_t frame_data[4];
	data_h = (cmd&0xf0);
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	f023 030f 	bic.w	r3, r3, #15
 8000580:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd <<4)&0xf0);
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	011b      	lsls	r3, r3, #4
 8000586:	73bb      	strb	r3, [r7, #14]
	frame_data[0] = data_h | 0x0C;
 8000588:	7bfb      	ldrb	r3, [r7, #15]
 800058a:	f043 030c 	orr.w	r3, r3, #12
 800058e:	b2db      	uxtb	r3, r3
 8000590:	723b      	strb	r3, [r7, #8]
	frame_data[1] = data_h | 0x08;
 8000592:	7bfb      	ldrb	r3, [r7, #15]
 8000594:	f043 0308 	orr.w	r3, r3, #8
 8000598:	b2db      	uxtb	r3, r3
 800059a:	727b      	strb	r3, [r7, #9]
	frame_data[2] = data_l | 0x0C;
 800059c:	7bbb      	ldrb	r3, [r7, #14]
 800059e:	f043 030c 	orr.w	r3, r3, #12
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	72bb      	strb	r3, [r7, #10]
	frame_data[3] = data_l | 0x08;
 80005a6:	7bbb      	ldrb	r3, [r7, #14]
 80005a8:	f043 0308 	orr.w	r3, r3, #8
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(&hi2c1,LCD_ADDRESS,(uint8_t *)frame_data,4,0x100);
 80005b0:	f107 0208 	add.w	r2, r7, #8
 80005b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2304      	movs	r3, #4
 80005bc:	214e      	movs	r1, #78	@ 0x4e
 80005be:	4803      	ldr	r0, [pc, #12]	@ (80005cc <lcd_send_cmd+0x5c>)
 80005c0:	f001 f936 	bl	8001830 <HAL_I2C_Master_Transmit>

	//HAL_Delay(1);
}
 80005c4:	bf00      	nop
 80005c6:	3710      	adds	r7, #16
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	2000007c 	.word	0x2000007c

080005d0 <lcd_send_data>:

void lcd_send_data(char data)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af02      	add	r7, sp, #8
 80005d6:	4603      	mov	r3, r0
 80005d8:	71fb      	strb	r3, [r7, #7]
	char data_h,data_l;
	uint8_t frame_data[4];
	data_h = (data&0xf0);
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	f023 030f 	bic.w	r3, r3, #15
 80005e0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data <<4)&0xf0);
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	011b      	lsls	r3, r3, #4
 80005e6:	73bb      	strb	r3, [r7, #14]
	frame_data[0] = data_h | 0x0D;
 80005e8:	7bfb      	ldrb	r3, [r7, #15]
 80005ea:	f043 030d 	orr.w	r3, r3, #13
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	723b      	strb	r3, [r7, #8]
	frame_data[1] = data_h | 0x09;
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	f043 0309 	orr.w	r3, r3, #9
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	727b      	strb	r3, [r7, #9]
	frame_data[2] = data_l | 0x0D;
 80005fc:	7bbb      	ldrb	r3, [r7, #14]
 80005fe:	f043 030d 	orr.w	r3, r3, #13
 8000602:	b2db      	uxtb	r3, r3
 8000604:	72bb      	strb	r3, [r7, #10]
	frame_data[3] = data_l | 0x09;
 8000606:	7bbb      	ldrb	r3, [r7, #14]
 8000608:	f043 0309 	orr.w	r3, r3, #9
 800060c:	b2db      	uxtb	r3, r3
 800060e:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(&hi2c1,LCD_ADDRESS,(uint8_t *)frame_data,4,0x100);
 8000610:	f107 0208 	add.w	r2, r7, #8
 8000614:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000618:	9300      	str	r3, [sp, #0]
 800061a:	2304      	movs	r3, #4
 800061c:	214e      	movs	r1, #78	@ 0x4e
 800061e:	4803      	ldr	r0, [pc, #12]	@ (800062c <lcd_send_data+0x5c>)
 8000620:	f001 f906 	bl	8001830 <HAL_I2C_Master_Transmit>

	//HAL_Delay(1);
}
 8000624:	bf00      	nop
 8000626:	3710      	adds	r7, #16
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	2000007c 	.word	0x2000007c

08000630 <lcd_clear>:

void lcd_clear()
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8000634:	2001      	movs	r0, #1
 8000636:	f7ff ff9b 	bl	8000570 <lcd_send_cmd>
	HAL_Delay(1);
 800063a:	2001      	movs	r0, #1
 800063c:	f000 fcf8 	bl	8001030 <HAL_Delay>
}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}

08000644 <lcd_Init>:


void lcd_Init()
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	HAL_Delay(50);
 8000648:	2032      	movs	r0, #50	@ 0x32
 800064a:	f000 fcf1 	bl	8001030 <HAL_Delay>
	lcd_send_cmd(0x30);
 800064e:	2030      	movs	r0, #48	@ 0x30
 8000650:	f7ff ff8e 	bl	8000570 <lcd_send_cmd>
	HAL_Delay(5);
 8000654:	2005      	movs	r0, #5
 8000656:	f000 fceb 	bl	8001030 <HAL_Delay>
	lcd_send_cmd(0x30);
 800065a:	2030      	movs	r0, #48	@ 0x30
 800065c:	f7ff ff88 	bl	8000570 <lcd_send_cmd>
	HAL_Delay(1);
 8000660:	2001      	movs	r0, #1
 8000662:	f000 fce5 	bl	8001030 <HAL_Delay>
	lcd_send_cmd(0x30);
 8000666:	2030      	movs	r0, #48	@ 0x30
 8000668:	f7ff ff82 	bl	8000570 <lcd_send_cmd>
	HAL_Delay(10);
 800066c:	200a      	movs	r0, #10
 800066e:	f000 fcdf 	bl	8001030 <HAL_Delay>
	lcd_send_cmd(0x20);
 8000672:	2020      	movs	r0, #32
 8000674:	f7ff ff7c 	bl	8000570 <lcd_send_cmd>
	HAL_Delay(10);
 8000678:	200a      	movs	r0, #10
 800067a:	f000 fcd9 	bl	8001030 <HAL_Delay>

	lcd_send_cmd(0x28);		//function set
 800067e:	2028      	movs	r0, #40	@ 0x28
 8000680:	f7ff ff76 	bl	8000570 <lcd_send_cmd>
	HAL_Delay(1);
 8000684:	2001      	movs	r0, #1
 8000686:	f000 fcd3 	bl	8001030 <HAL_Delay>
	lcd_send_cmd(0x08);		//Display on/off
 800068a:	2008      	movs	r0, #8
 800068c:	f7ff ff70 	bl	8000570 <lcd_send_cmd>
	HAL_Delay(1);
 8000690:	2001      	movs	r0, #1
 8000692:	f000 fccd 	bl	8001030 <HAL_Delay>
	lcd_send_cmd(0x01);		//clear display
 8000696:	2001      	movs	r0, #1
 8000698:	f7ff ff6a 	bl	8000570 <lcd_send_cmd>
	HAL_Delay(1);
 800069c:	2001      	movs	r0, #1
 800069e:	f000 fcc7 	bl	8001030 <HAL_Delay>
	lcd_send_cmd(0x06);		//Enter mode
 80006a2:	2006      	movs	r0, #6
 80006a4:	f7ff ff64 	bl	8000570 <lcd_send_cmd>
	HAL_Delay(1);
 80006a8:	2001      	movs	r0, #1
 80006aa:	f000 fcc1 	bl	8001030 <HAL_Delay>
	lcd_send_cmd(0x0C);		//Display on/off
 80006ae:	200c      	movs	r0, #12
 80006b0:	f7ff ff5e 	bl	8000570 <lcd_send_cmd>
	HAL_Delay(1);
 80006b4:	2001      	movs	r0, #1
 80006b6:	f000 fcbb 	bl	8001030 <HAL_Delay>

}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}

080006be <lcd_send_string>:

void lcd_send_string (char *str)
{
 80006be:	b580      	push	{r7, lr}
 80006c0:	b082      	sub	sp, #8
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	6078      	str	r0, [r7, #4]
	while(*str)
 80006c6:	e006      	b.n	80006d6 <lcd_send_string+0x18>
	{
		lcd_send_data(*str++);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	1c5a      	adds	r2, r3, #1
 80006cc:	607a      	str	r2, [r7, #4]
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff ff7d 	bl	80005d0 <lcd_send_data>
	while(*str)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d1f4      	bne.n	80006c8 <lcd_send_string+0xa>
	}
	HAL_Delay(1);
 80006de:	2001      	movs	r0, #1
 80006e0:	f000 fca6 	bl	8001030 <HAL_Delay>
}
 80006e4:	bf00      	nop
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}

080006ec <lcd_put_cur>:

void lcd_put_cur(uint8_t row,uint8_t col) // the address on the lcd screen
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	460a      	mov	r2, r1
 80006f6:	71fb      	strb	r3, [r7, #7]
 80006f8:	4613      	mov	r3, r2
 80006fa:	71bb      	strb	r3, [r7, #6]
	lcd_send_cmd(0x80 | (col + (0x40 * row)));
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	019b      	lsls	r3, r3, #6
 8000700:	b2da      	uxtb	r2, r3
 8000702:	79bb      	ldrb	r3, [r7, #6]
 8000704:	4413      	add	r3, r2
 8000706:	b2db      	uxtb	r3, r3
 8000708:	b25b      	sxtb	r3, r3
 800070a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800070e:	b25b      	sxtb	r3, r3
 8000710:	b2db      	uxtb	r3, r3
 8000712:	4618      	mov	r0, r3
 8000714:	f7ff ff2c 	bl	8000570 <lcd_send_cmd>
}
 8000718:	bf00      	nop
 800071a:	3708      	adds	r7, #8
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}

08000720 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000726:	f000 fc41 	bl	8000fac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800072a:	f000 f84d 	bl	80007c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800072e:	f000 f90d 	bl	800094c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000732:	f000 f8e1 	bl	80008f8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000736:	f000 f8b1 	bl	800089c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(30);
 800073a:	201e      	movs	r0, #30
 800073c:	f000 fc78 	bl	8001030 <HAL_Delay>
  lcd_Init();
 8000740:	f7ff ff80 	bl	8000644 <lcd_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  sprintf(MonitorTset,"The day is %d. Today already saved %d. The total value is %d.\n\r",day, now, total);
 8000744:	4b18      	ldr	r3, [pc, #96]	@ (80007a8 <main+0x88>)
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	4b18      	ldr	r3, [pc, #96]	@ (80007ac <main+0x8c>)
 800074a:	6819      	ldr	r1, [r3, #0]
 800074c:	4b18      	ldr	r3, [pc, #96]	@ (80007b0 <main+0x90>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	9300      	str	r3, [sp, #0]
 8000752:	460b      	mov	r3, r1
 8000754:	4917      	ldr	r1, [pc, #92]	@ (80007b4 <main+0x94>)
 8000756:	4818      	ldr	r0, [pc, #96]	@ (80007b8 <main+0x98>)
 8000758:	f003 f928 	bl	80039ac <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t *)MonitorTset,strlen(MonitorTset),0xffff);
 800075c:	4816      	ldr	r0, [pc, #88]	@ (80007b8 <main+0x98>)
 800075e:	f7ff fd37 	bl	80001d0 <strlen>
 8000762:	4603      	mov	r3, r0
 8000764:	b29a      	uxth	r2, r3
 8000766:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800076a:	4913      	ldr	r1, [pc, #76]	@ (80007b8 <main+0x98>)
 800076c:	4813      	ldr	r0, [pc, #76]	@ (80007bc <main+0x9c>)
 800076e:	f002 fb6f 	bl	8002e50 <HAL_UART_Transmit>


  while (1)
  {
    /* USER CODE END WHILE */
	  lcd_put_cur(0,0);
 8000772:	2100      	movs	r1, #0
 8000774:	2000      	movs	r0, #0
 8000776:	f7ff ffb9 	bl	80006ec <lcd_put_cur>
	  lcd_send_string("Coin task test");
 800077a:	4811      	ldr	r0, [pc, #68]	@ (80007c0 <main+0xa0>)
 800077c:	f7ff ff9f 	bl	80006be <lcd_send_string>
	  lcd_put_cur(1,0);
 8000780:	2100      	movs	r1, #0
 8000782:	2001      	movs	r0, #1
 8000784:	f7ff ffb2 	bl	80006ec <lcd_put_cur>
	  lcd_send_string("Total value is 100");
 8000788:	480e      	ldr	r0, [pc, #56]	@ (80007c4 <main+0xa4>)
 800078a:	f7ff ff98 	bl	80006be <lcd_send_string>
	  HAL_Delay(1000);
 800078e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000792:	f000 fc4d 	bl	8001030 <HAL_Delay>
	  lcd_clear();
 8000796:	f7ff ff4b 	bl	8000630 <lcd_clear>
	  HAL_Delay(1000);
 800079a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800079e:	f000 fc47 	bl	8001030 <HAL_Delay>
	  lcd_put_cur(0,0);
 80007a2:	bf00      	nop
 80007a4:	e7e5      	b.n	8000772 <main+0x52>
 80007a6:	bf00      	nop
 80007a8:	20000000 	.word	0x20000000
 80007ac:	2000011c 	.word	0x2000011c
 80007b0:	20000118 	.word	0x20000118
 80007b4:	08004320 	.word	0x08004320
 80007b8:	20000120 	.word	0x20000120
 80007bc:	200000d0 	.word	0x200000d0
 80007c0:	080043c8 	.word	0x080043c8
 80007c4:	080043d8 	.word	0x080043d8

080007c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b094      	sub	sp, #80	@ 0x50
 80007cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ce:	f107 0320 	add.w	r3, r7, #32
 80007d2:	2230      	movs	r2, #48	@ 0x30
 80007d4:	2100      	movs	r1, #0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f003 f908 	bl	80039ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007dc:	f107 030c 	add.w	r3, r7, #12
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]
 80007ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ec:	2300      	movs	r3, #0
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	4b28      	ldr	r3, [pc, #160]	@ (8000894 <SystemClock_Config+0xcc>)
 80007f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f4:	4a27      	ldr	r2, [pc, #156]	@ (8000894 <SystemClock_Config+0xcc>)
 80007f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80007fc:	4b25      	ldr	r3, [pc, #148]	@ (8000894 <SystemClock_Config+0xcc>)
 80007fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000800:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000804:	60bb      	str	r3, [r7, #8]
 8000806:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000808:	2300      	movs	r3, #0
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	4b22      	ldr	r3, [pc, #136]	@ (8000898 <SystemClock_Config+0xd0>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a21      	ldr	r2, [pc, #132]	@ (8000898 <SystemClock_Config+0xd0>)
 8000812:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000816:	6013      	str	r3, [r2, #0]
 8000818:	4b1f      	ldr	r3, [pc, #124]	@ (8000898 <SystemClock_Config+0xd0>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000820:	607b      	str	r3, [r7, #4]
 8000822:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000824:	2302      	movs	r3, #2
 8000826:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000828:	2301      	movs	r3, #1
 800082a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800082c:	2310      	movs	r3, #16
 800082e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000830:	2302      	movs	r3, #2
 8000832:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000834:	2300      	movs	r3, #0
 8000836:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000838:	2308      	movs	r3, #8
 800083a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800083c:	2332      	movs	r3, #50	@ 0x32
 800083e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000840:	2304      	movs	r3, #4
 8000842:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000844:	2307      	movs	r3, #7
 8000846:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000848:	f107 0320 	add.w	r3, r7, #32
 800084c:	4618      	mov	r0, r3
 800084e:	f001 fb49 	bl	8001ee4 <HAL_RCC_OscConfig>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000858:	f000 f9d6 	bl	8000c08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085c:	230f      	movs	r3, #15
 800085e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000860:	2302      	movs	r3, #2
 8000862:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000868:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800086c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800086e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000872:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000874:	f107 030c 	add.w	r3, r7, #12
 8000878:	2100      	movs	r1, #0
 800087a:	4618      	mov	r0, r3
 800087c:	f001 fdaa 	bl	80023d4 <HAL_RCC_ClockConfig>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000886:	f000 f9bf 	bl	8000c08 <Error_Handler>
  }
}
 800088a:	bf00      	nop
 800088c:	3750      	adds	r7, #80	@ 0x50
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40023800 	.word	0x40023800
 8000898:	40007000 	.word	0x40007000

0800089c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008a0:	4b12      	ldr	r3, [pc, #72]	@ (80008ec <MX_I2C1_Init+0x50>)
 80008a2:	4a13      	ldr	r2, [pc, #76]	@ (80008f0 <MX_I2C1_Init+0x54>)
 80008a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008a6:	4b11      	ldr	r3, [pc, #68]	@ (80008ec <MX_I2C1_Init+0x50>)
 80008a8:	4a12      	ldr	r2, [pc, #72]	@ (80008f4 <MX_I2C1_Init+0x58>)
 80008aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008ac:	4b0f      	ldr	r3, [pc, #60]	@ (80008ec <MX_I2C1_Init+0x50>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008b2:	4b0e      	ldr	r3, [pc, #56]	@ (80008ec <MX_I2C1_Init+0x50>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008b8:	4b0c      	ldr	r3, [pc, #48]	@ (80008ec <MX_I2C1_Init+0x50>)
 80008ba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008c0:	4b0a      	ldr	r3, [pc, #40]	@ (80008ec <MX_I2C1_Init+0x50>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008c6:	4b09      	ldr	r3, [pc, #36]	@ (80008ec <MX_I2C1_Init+0x50>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008cc:	4b07      	ldr	r3, [pc, #28]	@ (80008ec <MX_I2C1_Init+0x50>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008d2:	4b06      	ldr	r3, [pc, #24]	@ (80008ec <MX_I2C1_Init+0x50>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008d8:	4804      	ldr	r0, [pc, #16]	@ (80008ec <MX_I2C1_Init+0x50>)
 80008da:	f000 fe65 	bl	80015a8 <HAL_I2C_Init>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008e4:	f000 f990 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	2000007c 	.word	0x2000007c
 80008f0:	40005400 	.word	0x40005400
 80008f4:	000186a0 	.word	0x000186a0

080008f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008fc:	4b11      	ldr	r3, [pc, #68]	@ (8000944 <MX_USART2_UART_Init+0x4c>)
 80008fe:	4a12      	ldr	r2, [pc, #72]	@ (8000948 <MX_USART2_UART_Init+0x50>)
 8000900:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000902:	4b10      	ldr	r3, [pc, #64]	@ (8000944 <MX_USART2_UART_Init+0x4c>)
 8000904:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000908:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800090a:	4b0e      	ldr	r3, [pc, #56]	@ (8000944 <MX_USART2_UART_Init+0x4c>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000910:	4b0c      	ldr	r3, [pc, #48]	@ (8000944 <MX_USART2_UART_Init+0x4c>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000916:	4b0b      	ldr	r3, [pc, #44]	@ (8000944 <MX_USART2_UART_Init+0x4c>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800091c:	4b09      	ldr	r3, [pc, #36]	@ (8000944 <MX_USART2_UART_Init+0x4c>)
 800091e:	220c      	movs	r2, #12
 8000920:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000922:	4b08      	ldr	r3, [pc, #32]	@ (8000944 <MX_USART2_UART_Init+0x4c>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000928:	4b06      	ldr	r3, [pc, #24]	@ (8000944 <MX_USART2_UART_Init+0x4c>)
 800092a:	2200      	movs	r2, #0
 800092c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800092e:	4805      	ldr	r0, [pc, #20]	@ (8000944 <MX_USART2_UART_Init+0x4c>)
 8000930:	f002 fa3e 	bl	8002db0 <HAL_UART_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800093a:	f000 f965 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	200000d0 	.word	0x200000d0
 8000948:	40004400 	.word	0x40004400

0800094c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08c      	sub	sp, #48	@ 0x30
 8000950:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	60da      	str	r2, [r3, #12]
 8000960:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	61bb      	str	r3, [r7, #24]
 8000966:	4b99      	ldr	r3, [pc, #612]	@ (8000bcc <MX_GPIO_Init+0x280>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	4a98      	ldr	r2, [pc, #608]	@ (8000bcc <MX_GPIO_Init+0x280>)
 800096c:	f043 0310 	orr.w	r3, r3, #16
 8000970:	6313      	str	r3, [r2, #48]	@ 0x30
 8000972:	4b96      	ldr	r3, [pc, #600]	@ (8000bcc <MX_GPIO_Init+0x280>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	f003 0310 	and.w	r3, r3, #16
 800097a:	61bb      	str	r3, [r7, #24]
 800097c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	617b      	str	r3, [r7, #20]
 8000982:	4b92      	ldr	r3, [pc, #584]	@ (8000bcc <MX_GPIO_Init+0x280>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	4a91      	ldr	r2, [pc, #580]	@ (8000bcc <MX_GPIO_Init+0x280>)
 8000988:	f043 0304 	orr.w	r3, r3, #4
 800098c:	6313      	str	r3, [r2, #48]	@ 0x30
 800098e:	4b8f      	ldr	r3, [pc, #572]	@ (8000bcc <MX_GPIO_Init+0x280>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	f003 0304 	and.w	r3, r3, #4
 8000996:	617b      	str	r3, [r7, #20]
 8000998:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	4b8b      	ldr	r3, [pc, #556]	@ (8000bcc <MX_GPIO_Init+0x280>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	4a8a      	ldr	r2, [pc, #552]	@ (8000bcc <MX_GPIO_Init+0x280>)
 80009a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009aa:	4b88      	ldr	r3, [pc, #544]	@ (8000bcc <MX_GPIO_Init+0x280>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	4b84      	ldr	r3, [pc, #528]	@ (8000bcc <MX_GPIO_Init+0x280>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	4a83      	ldr	r2, [pc, #524]	@ (8000bcc <MX_GPIO_Init+0x280>)
 80009c0:	f043 0301 	orr.w	r3, r3, #1
 80009c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c6:	4b81      	ldr	r3, [pc, #516]	@ (8000bcc <MX_GPIO_Init+0x280>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	60bb      	str	r3, [r7, #8]
 80009d6:	4b7d      	ldr	r3, [pc, #500]	@ (8000bcc <MX_GPIO_Init+0x280>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	4a7c      	ldr	r2, [pc, #496]	@ (8000bcc <MX_GPIO_Init+0x280>)
 80009dc:	f043 0302 	orr.w	r3, r3, #2
 80009e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e2:	4b7a      	ldr	r3, [pc, #488]	@ (8000bcc <MX_GPIO_Init+0x280>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	f003 0302 	and.w	r3, r3, #2
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	4b76      	ldr	r3, [pc, #472]	@ (8000bcc <MX_GPIO_Init+0x280>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f6:	4a75      	ldr	r2, [pc, #468]	@ (8000bcc <MX_GPIO_Init+0x280>)
 80009f8:	f043 0308 	orr.w	r3, r3, #8
 80009fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009fe:	4b73      	ldr	r3, [pc, #460]	@ (8000bcc <MX_GPIO_Init+0x280>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a02:	f003 0308 	and.w	r3, r3, #8
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2108      	movs	r1, #8
 8000a0e:	4870      	ldr	r0, [pc, #448]	@ (8000bd0 <MX_GPIO_Init+0x284>)
 8000a10:	f000 fdb0 	bl	8001574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a14:	2201      	movs	r2, #1
 8000a16:	2101      	movs	r1, #1
 8000a18:	486e      	ldr	r0, [pc, #440]	@ (8000bd4 <MX_GPIO_Init+0x288>)
 8000a1a:	f000 fdab 	bl	8001574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000a24:	486c      	ldr	r0, [pc, #432]	@ (8000bd8 <MX_GPIO_Init+0x28c>)
 8000a26:	f000 fda5 	bl	8001574 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a2a:	2308      	movs	r3, #8
 8000a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a36:	2300      	movs	r3, #0
 8000a38:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a3a:	f107 031c 	add.w	r3, r7, #28
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4863      	ldr	r0, [pc, #396]	@ (8000bd0 <MX_GPIO_Init+0x284>)
 8000a42:	f000 fbfb 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a46:	2301      	movs	r3, #1
 8000a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a52:	2300      	movs	r3, #0
 8000a54:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a56:	f107 031c 	add.w	r3, r7, #28
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	485d      	ldr	r0, [pc, #372]	@ (8000bd4 <MX_GPIO_Init+0x288>)
 8000a5e:	f000 fbed 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000a62:	2308      	movs	r3, #8
 8000a64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a66:	2302      	movs	r3, #2
 8000a68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a72:	2305      	movs	r3, #5
 8000a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a76:	f107 031c 	add.w	r3, r7, #28
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4855      	ldr	r0, [pc, #340]	@ (8000bd4 <MX_GPIO_Init+0x288>)
 8000a7e:	f000 fbdd 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a82:	2301      	movs	r3, #1
 8000a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a86:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a90:	f107 031c 	add.w	r3, r7, #28
 8000a94:	4619      	mov	r1, r3
 8000a96:	4851      	ldr	r0, [pc, #324]	@ (8000bdc <MX_GPIO_Init+0x290>)
 8000a98:	f000 fbd0 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000a9c:	2310      	movs	r3, #16
 8000a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000aac:	2306      	movs	r3, #6
 8000aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000ab0:	f107 031c 	add.w	r3, r7, #28
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4849      	ldr	r0, [pc, #292]	@ (8000bdc <MX_GPIO_Init+0x290>)
 8000ab8:	f000 fbc0 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000abc:	23e0      	movs	r3, #224	@ 0xe0
 8000abe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000acc:	2305      	movs	r3, #5
 8000ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad0:	f107 031c 	add.w	r3, r7, #28
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4841      	ldr	r0, [pc, #260]	@ (8000bdc <MX_GPIO_Init+0x290>)
 8000ad8:	f000 fbb0 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000adc:	2304      	movs	r3, #4
 8000ade:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000ae8:	f107 031c 	add.w	r3, r7, #28
 8000aec:	4619      	mov	r1, r3
 8000aee:	483c      	ldr	r0, [pc, #240]	@ (8000be0 <MX_GPIO_Init+0x294>)
 8000af0:	f000 fba4 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000af4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000af8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afa:	2302      	movs	r3, #2
 8000afc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b02:	2300      	movs	r3, #0
 8000b04:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b06:	2305      	movs	r3, #5
 8000b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000b0a:	f107 031c 	add.w	r3, r7, #28
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4833      	ldr	r0, [pc, #204]	@ (8000be0 <MX_GPIO_Init+0x294>)
 8000b12:	f000 fb93 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b16:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000b1a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	2300      	movs	r3, #0
 8000b26:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b28:	f107 031c 	add.w	r3, r7, #28
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	482a      	ldr	r0, [pc, #168]	@ (8000bd8 <MX_GPIO_Init+0x28c>)
 8000b30:	f000 fb84 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b34:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000b38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b42:	2300      	movs	r3, #0
 8000b44:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b46:	2306      	movs	r3, #6
 8000b48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b4a:	f107 031c 	add.w	r3, r7, #28
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4820      	ldr	r0, [pc, #128]	@ (8000bd4 <MX_GPIO_Init+0x288>)
 8000b52:	f000 fb73 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000b56:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000b64:	f107 031c 	add.w	r3, r7, #28
 8000b68:	4619      	mov	r1, r3
 8000b6a:	481c      	ldr	r0, [pc, #112]	@ (8000bdc <MX_GPIO_Init+0x290>)
 8000b6c:	f000 fb66 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000b70:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000b74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b76:	2302      	movs	r3, #2
 8000b78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b82:	230a      	movs	r3, #10
 8000b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b86:	f107 031c 	add.w	r3, r7, #28
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4813      	ldr	r0, [pc, #76]	@ (8000bdc <MX_GPIO_Init+0x290>)
 8000b8e:	f000 fb55 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b92:	2320      	movs	r3, #32
 8000b94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b96:	2300      	movs	r3, #0
 8000b98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b9e:	f107 031c 	add.w	r3, r7, #28
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	480c      	ldr	r0, [pc, #48]	@ (8000bd8 <MX_GPIO_Init+0x28c>)
 8000ba6:	f000 fb49 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000baa:	2302      	movs	r3, #2
 8000bac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bae:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000bb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000bb8:	f107 031c 	add.w	r3, r7, #28
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4804      	ldr	r0, [pc, #16]	@ (8000bd0 <MX_GPIO_Init+0x284>)
 8000bc0:	f000 fb3c 	bl	800123c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bc4:	bf00      	nop
 8000bc6:	3730      	adds	r7, #48	@ 0x30
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	40021000 	.word	0x40021000
 8000bd4:	40020800 	.word	0x40020800
 8000bd8:	40020c00 	.word	0x40020c00
 8000bdc:	40020000 	.word	0x40020000
 8000be0:	40020400 	.word	0x40020400

08000be4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a04      	ldr	r2, [pc, #16]	@ (8000c04 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d101      	bne.n	8000bfa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bf6:	f000 f9fb 	bl	8000ff0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40001400 	.word	0x40001400

08000c08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c0c:	b672      	cpsid	i
}
 8000c0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c10:	bf00      	nop
 8000c12:	e7fd      	b.n	8000c10 <Error_Handler+0x8>

08000c14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	607b      	str	r3, [r7, #4]
 8000c1e:	4b10      	ldr	r3, [pc, #64]	@ (8000c60 <HAL_MspInit+0x4c>)
 8000c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c22:	4a0f      	ldr	r2, [pc, #60]	@ (8000c60 <HAL_MspInit+0x4c>)
 8000c24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c28:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c60 <HAL_MspInit+0x4c>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c32:	607b      	str	r3, [r7, #4]
 8000c34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	603b      	str	r3, [r7, #0]
 8000c3a:	4b09      	ldr	r3, [pc, #36]	@ (8000c60 <HAL_MspInit+0x4c>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c3e:	4a08      	ldr	r2, [pc, #32]	@ (8000c60 <HAL_MspInit+0x4c>)
 8000c40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c44:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c46:	4b06      	ldr	r3, [pc, #24]	@ (8000c60 <HAL_MspInit+0x4c>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c4e:	603b      	str	r3, [r7, #0]
 8000c50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	40023800 	.word	0x40023800

08000c64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08a      	sub	sp, #40	@ 0x28
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a19      	ldr	r2, [pc, #100]	@ (8000ce8 <HAL_I2C_MspInit+0x84>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d12c      	bne.n	8000ce0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	613b      	str	r3, [r7, #16]
 8000c8a:	4b18      	ldr	r3, [pc, #96]	@ (8000cec <HAL_I2C_MspInit+0x88>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8e:	4a17      	ldr	r2, [pc, #92]	@ (8000cec <HAL_I2C_MspInit+0x88>)
 8000c90:	f043 0302 	orr.w	r3, r3, #2
 8000c94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c96:	4b15      	ldr	r3, [pc, #84]	@ (8000cec <HAL_I2C_MspInit+0x88>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9a:	f003 0302 	and.w	r3, r3, #2
 8000c9e:	613b      	str	r3, [r7, #16]
 8000ca0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = lcd_scl_Pin|lcd_sda_Pin;
 8000ca2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000ca6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ca8:	2312      	movs	r3, #18
 8000caa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cb4:	2304      	movs	r3, #4
 8000cb6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	480c      	ldr	r0, [pc, #48]	@ (8000cf0 <HAL_I2C_MspInit+0x8c>)
 8000cc0:	f000 fabc 	bl	800123c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	4b08      	ldr	r3, [pc, #32]	@ (8000cec <HAL_I2C_MspInit+0x88>)
 8000cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ccc:	4a07      	ldr	r2, [pc, #28]	@ (8000cec <HAL_I2C_MspInit+0x88>)
 8000cce:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000cd2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cd4:	4b05      	ldr	r3, [pc, #20]	@ (8000cec <HAL_I2C_MspInit+0x88>)
 8000cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000ce0:	bf00      	nop
 8000ce2:	3728      	adds	r7, #40	@ 0x28
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40005400 	.word	0x40005400
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	40020400 	.word	0x40020400

08000cf4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	@ 0x28
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a19      	ldr	r2, [pc, #100]	@ (8000d78 <HAL_UART_MspInit+0x84>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d12b      	bne.n	8000d6e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
 8000d1a:	4b18      	ldr	r3, [pc, #96]	@ (8000d7c <HAL_UART_MspInit+0x88>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d1e:	4a17      	ldr	r2, [pc, #92]	@ (8000d7c <HAL_UART_MspInit+0x88>)
 8000d20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d24:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d26:	4b15      	ldr	r3, [pc, #84]	@ (8000d7c <HAL_UART_MspInit+0x88>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	4b11      	ldr	r3, [pc, #68]	@ (8000d7c <HAL_UART_MspInit+0x88>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3a:	4a10      	ldr	r2, [pc, #64]	@ (8000d7c <HAL_UART_MspInit+0x88>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d42:	4b0e      	ldr	r3, [pc, #56]	@ (8000d7c <HAL_UART_MspInit+0x88>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d4e:	230c      	movs	r3, #12
 8000d50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d52:	2302      	movs	r3, #2
 8000d54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d5e:	2307      	movs	r3, #7
 8000d60:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d62:	f107 0314 	add.w	r3, r7, #20
 8000d66:	4619      	mov	r1, r3
 8000d68:	4805      	ldr	r0, [pc, #20]	@ (8000d80 <HAL_UART_MspInit+0x8c>)
 8000d6a:	f000 fa67 	bl	800123c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d6e:	bf00      	nop
 8000d70:	3728      	adds	r7, #40	@ 0x28
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40004400 	.word	0x40004400
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	40020000 	.word	0x40020000

08000d84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08e      	sub	sp, #56	@ 0x38
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000d90:	2300      	movs	r3, #0
 8000d92:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000d94:	2300      	movs	r3, #0
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	4b33      	ldr	r3, [pc, #204]	@ (8000e68 <HAL_InitTick+0xe4>)
 8000d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d9c:	4a32      	ldr	r2, [pc, #200]	@ (8000e68 <HAL_InitTick+0xe4>)
 8000d9e:	f043 0320 	orr.w	r3, r3, #32
 8000da2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000da4:	4b30      	ldr	r3, [pc, #192]	@ (8000e68 <HAL_InitTick+0xe4>)
 8000da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da8:	f003 0320 	and.w	r3, r3, #32
 8000dac:	60fb      	str	r3, [r7, #12]
 8000dae:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000db0:	f107 0210 	add.w	r2, r7, #16
 8000db4:	f107 0314 	add.w	r3, r7, #20
 8000db8:	4611      	mov	r1, r2
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f001 fd2a 	bl	8002814 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000dc0:	6a3b      	ldr	r3, [r7, #32]
 8000dc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d103      	bne.n	8000dd2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000dca:	f001 fcfb 	bl	80027c4 <HAL_RCC_GetPCLK1Freq>
 8000dce:	6378      	str	r0, [r7, #52]	@ 0x34
 8000dd0:	e004      	b.n	8000ddc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000dd2:	f001 fcf7 	bl	80027c4 <HAL_RCC_GetPCLK1Freq>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ddc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000dde:	4a23      	ldr	r2, [pc, #140]	@ (8000e6c <HAL_InitTick+0xe8>)
 8000de0:	fba2 2303 	umull	r2, r3, r2, r3
 8000de4:	0c9b      	lsrs	r3, r3, #18
 8000de6:	3b01      	subs	r3, #1
 8000de8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000dea:	4b21      	ldr	r3, [pc, #132]	@ (8000e70 <HAL_InitTick+0xec>)
 8000dec:	4a21      	ldr	r2, [pc, #132]	@ (8000e74 <HAL_InitTick+0xf0>)
 8000dee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000df0:	4b1f      	ldr	r3, [pc, #124]	@ (8000e70 <HAL_InitTick+0xec>)
 8000df2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000df6:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000df8:	4a1d      	ldr	r2, [pc, #116]	@ (8000e70 <HAL_InitTick+0xec>)
 8000dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dfc:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000dfe:	4b1c      	ldr	r3, [pc, #112]	@ (8000e70 <HAL_InitTick+0xec>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e04:	4b1a      	ldr	r3, [pc, #104]	@ (8000e70 <HAL_InitTick+0xec>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e0a:	4b19      	ldr	r3, [pc, #100]	@ (8000e70 <HAL_InitTick+0xec>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8000e10:	4817      	ldr	r0, [pc, #92]	@ (8000e70 <HAL_InitTick+0xec>)
 8000e12:	f001 fd31 	bl	8002878 <HAL_TIM_Base_Init>
 8000e16:	4603      	mov	r3, r0
 8000e18:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000e1c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d11b      	bne.n	8000e5c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8000e24:	4812      	ldr	r0, [pc, #72]	@ (8000e70 <HAL_InitTick+0xec>)
 8000e26:	f001 fd81 	bl	800292c <HAL_TIM_Base_Start_IT>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000e30:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d111      	bne.n	8000e5c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000e38:	2037      	movs	r0, #55	@ 0x37
 8000e3a:	f000 f9f1 	bl	8001220 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2b0f      	cmp	r3, #15
 8000e42:	d808      	bhi.n	8000e56 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8000e44:	2200      	movs	r2, #0
 8000e46:	6879      	ldr	r1, [r7, #4]
 8000e48:	2037      	movs	r0, #55	@ 0x37
 8000e4a:	f000 f9cd 	bl	80011e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e78 <HAL_InitTick+0xf4>)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6013      	str	r3, [r2, #0]
 8000e54:	e002      	b.n	8000e5c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000e5c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3738      	adds	r7, #56	@ 0x38
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40023800 	.word	0x40023800
 8000e6c:	431bde83 	.word	0x431bde83
 8000e70:	20000184 	.word	0x20000184
 8000e74:	40001400 	.word	0x40001400
 8000e78:	20000008 	.word	0x20000008

08000e7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e80:	bf00      	nop
 8000e82:	e7fd      	b.n	8000e80 <NMI_Handler+0x4>

08000e84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e88:	bf00      	nop
 8000e8a:	e7fd      	b.n	8000e88 <HardFault_Handler+0x4>

08000e8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e90:	bf00      	nop
 8000e92:	e7fd      	b.n	8000e90 <MemManage_Handler+0x4>

08000e94 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e98:	bf00      	nop
 8000e9a:	e7fd      	b.n	8000e98 <BusFault_Handler+0x4>

08000e9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea0:	bf00      	nop
 8000ea2:	e7fd      	b.n	8000ea0 <UsageFault_Handler+0x4>

08000ea4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
	...

08000eb4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000eb8:	4802      	ldr	r0, [pc, #8]	@ (8000ec4 <TIM7_IRQHandler+0x10>)
 8000eba:	f001 fda7 	bl	8002a0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000184 	.word	0x20000184

08000ec8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ed0:	4a14      	ldr	r2, [pc, #80]	@ (8000f24 <_sbrk+0x5c>)
 8000ed2:	4b15      	ldr	r3, [pc, #84]	@ (8000f28 <_sbrk+0x60>)
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000edc:	4b13      	ldr	r3, [pc, #76]	@ (8000f2c <_sbrk+0x64>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d102      	bne.n	8000eea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ee4:	4b11      	ldr	r3, [pc, #68]	@ (8000f2c <_sbrk+0x64>)
 8000ee6:	4a12      	ldr	r2, [pc, #72]	@ (8000f30 <_sbrk+0x68>)
 8000ee8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eea:	4b10      	ldr	r3, [pc, #64]	@ (8000f2c <_sbrk+0x64>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d207      	bcs.n	8000f08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ef8:	f002 fd80 	bl	80039fc <__errno>
 8000efc:	4603      	mov	r3, r0
 8000efe:	220c      	movs	r2, #12
 8000f00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f02:	f04f 33ff 	mov.w	r3, #4294967295
 8000f06:	e009      	b.n	8000f1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f08:	4b08      	ldr	r3, [pc, #32]	@ (8000f2c <_sbrk+0x64>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f0e:	4b07      	ldr	r3, [pc, #28]	@ (8000f2c <_sbrk+0x64>)
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4413      	add	r3, r2
 8000f16:	4a05      	ldr	r2, [pc, #20]	@ (8000f2c <_sbrk+0x64>)
 8000f18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3718      	adds	r7, #24
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20020000 	.word	0x20020000
 8000f28:	00000400 	.word	0x00000400
 8000f2c:	200001cc 	.word	0x200001cc
 8000f30:	200003a8 	.word	0x200003a8

08000f34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f38:	4b06      	ldr	r3, [pc, #24]	@ (8000f54 <SystemInit+0x20>)
 8000f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f3e:	4a05      	ldr	r2, [pc, #20]	@ (8000f54 <SystemInit+0x20>)
 8000f40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f5c:	480d      	ldr	r0, [pc, #52]	@ (8000f94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f5e:	490e      	ldr	r1, [pc, #56]	@ (8000f98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f60:	4a0e      	ldr	r2, [pc, #56]	@ (8000f9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f64:	e002      	b.n	8000f6c <LoopCopyDataInit>

08000f66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f6a:	3304      	adds	r3, #4

08000f6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f70:	d3f9      	bcc.n	8000f66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f72:	4a0b      	ldr	r2, [pc, #44]	@ (8000fa0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f74:	4c0b      	ldr	r4, [pc, #44]	@ (8000fa4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f78:	e001      	b.n	8000f7e <LoopFillZerobss>

08000f7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f7c:	3204      	adds	r2, #4

08000f7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f80:	d3fb      	bcc.n	8000f7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f82:	f7ff ffd7 	bl	8000f34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f86:	f002 fd3f 	bl	8003a08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f8a:	f7ff fbc9 	bl	8000720 <main>
  bx  lr    
 8000f8e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f98:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000f9c:	08004448 	.word	0x08004448
  ldr r2, =_sbss
 8000fa0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000fa4:	200003a8 	.word	0x200003a8

08000fa8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fa8:	e7fe      	b.n	8000fa8 <ADC_IRQHandler>
	...

08000fac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fb0:	4b0e      	ldr	r3, [pc, #56]	@ (8000fec <HAL_Init+0x40>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a0d      	ldr	r2, [pc, #52]	@ (8000fec <HAL_Init+0x40>)
 8000fb6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8000fec <HAL_Init+0x40>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a0a      	ldr	r2, [pc, #40]	@ (8000fec <HAL_Init+0x40>)
 8000fc2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc8:	4b08      	ldr	r3, [pc, #32]	@ (8000fec <HAL_Init+0x40>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a07      	ldr	r2, [pc, #28]	@ (8000fec <HAL_Init+0x40>)
 8000fce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd4:	2003      	movs	r0, #3
 8000fd6:	f000 f8fc 	bl	80011d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fda:	2000      	movs	r0, #0
 8000fdc:	f7ff fed2 	bl	8000d84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fe0:	f7ff fe18 	bl	8000c14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40023c00 	.word	0x40023c00

08000ff0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ff4:	4b06      	ldr	r3, [pc, #24]	@ (8001010 <HAL_IncTick+0x20>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4b06      	ldr	r3, [pc, #24]	@ (8001014 <HAL_IncTick+0x24>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4413      	add	r3, r2
 8001000:	4a04      	ldr	r2, [pc, #16]	@ (8001014 <HAL_IncTick+0x24>)
 8001002:	6013      	str	r3, [r2, #0]
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	2000000c 	.word	0x2000000c
 8001014:	200001d0 	.word	0x200001d0

08001018 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  return uwTick;
 800101c:	4b03      	ldr	r3, [pc, #12]	@ (800102c <HAL_GetTick+0x14>)
 800101e:	681b      	ldr	r3, [r3, #0]
}
 8001020:	4618      	mov	r0, r3
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	200001d0 	.word	0x200001d0

08001030 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001038:	f7ff ffee 	bl	8001018 <HAL_GetTick>
 800103c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001048:	d005      	beq.n	8001056 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800104a:	4b0a      	ldr	r3, [pc, #40]	@ (8001074 <HAL_Delay+0x44>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	461a      	mov	r2, r3
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	4413      	add	r3, r2
 8001054:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001056:	bf00      	nop
 8001058:	f7ff ffde 	bl	8001018 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	68fa      	ldr	r2, [r7, #12]
 8001064:	429a      	cmp	r2, r3
 8001066:	d8f7      	bhi.n	8001058 <HAL_Delay+0x28>
  {
  }
}
 8001068:	bf00      	nop
 800106a:	bf00      	nop
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	2000000c 	.word	0x2000000c

08001078 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f003 0307 	and.w	r3, r3, #7
 8001086:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001088:	4b0c      	ldr	r3, [pc, #48]	@ (80010bc <__NVIC_SetPriorityGrouping+0x44>)
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800108e:	68ba      	ldr	r2, [r7, #8]
 8001090:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001094:	4013      	ands	r3, r2
 8001096:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010aa:	4a04      	ldr	r2, [pc, #16]	@ (80010bc <__NVIC_SetPriorityGrouping+0x44>)
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	60d3      	str	r3, [r2, #12]
}
 80010b0:	bf00      	nop
 80010b2:	3714      	adds	r7, #20
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c4:	4b04      	ldr	r3, [pc, #16]	@ (80010d8 <__NVIC_GetPriorityGrouping+0x18>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	0a1b      	lsrs	r3, r3, #8
 80010ca:	f003 0307 	and.w	r3, r3, #7
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	db0b      	blt.n	8001106 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	f003 021f 	and.w	r2, r3, #31
 80010f4:	4907      	ldr	r1, [pc, #28]	@ (8001114 <__NVIC_EnableIRQ+0x38>)
 80010f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fa:	095b      	lsrs	r3, r3, #5
 80010fc:	2001      	movs	r0, #1
 80010fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	e000e100 	.word	0xe000e100

08001118 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	6039      	str	r1, [r7, #0]
 8001122:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001128:	2b00      	cmp	r3, #0
 800112a:	db0a      	blt.n	8001142 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	b2da      	uxtb	r2, r3
 8001130:	490c      	ldr	r1, [pc, #48]	@ (8001164 <__NVIC_SetPriority+0x4c>)
 8001132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001136:	0112      	lsls	r2, r2, #4
 8001138:	b2d2      	uxtb	r2, r2
 800113a:	440b      	add	r3, r1
 800113c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001140:	e00a      	b.n	8001158 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	b2da      	uxtb	r2, r3
 8001146:	4908      	ldr	r1, [pc, #32]	@ (8001168 <__NVIC_SetPriority+0x50>)
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	f003 030f 	and.w	r3, r3, #15
 800114e:	3b04      	subs	r3, #4
 8001150:	0112      	lsls	r2, r2, #4
 8001152:	b2d2      	uxtb	r2, r2
 8001154:	440b      	add	r3, r1
 8001156:	761a      	strb	r2, [r3, #24]
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	e000e100 	.word	0xe000e100
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800116c:	b480      	push	{r7}
 800116e:	b089      	sub	sp, #36	@ 0x24
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	f1c3 0307 	rsb	r3, r3, #7
 8001186:	2b04      	cmp	r3, #4
 8001188:	bf28      	it	cs
 800118a:	2304      	movcs	r3, #4
 800118c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	3304      	adds	r3, #4
 8001192:	2b06      	cmp	r3, #6
 8001194:	d902      	bls.n	800119c <NVIC_EncodePriority+0x30>
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	3b03      	subs	r3, #3
 800119a:	e000      	b.n	800119e <NVIC_EncodePriority+0x32>
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a0:	f04f 32ff 	mov.w	r2, #4294967295
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43da      	mvns	r2, r3
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	401a      	ands	r2, r3
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b4:	f04f 31ff 	mov.w	r1, #4294967295
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	fa01 f303 	lsl.w	r3, r1, r3
 80011be:	43d9      	mvns	r1, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c4:	4313      	orrs	r3, r2
         );
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3724      	adds	r7, #36	@ 0x24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b082      	sub	sp, #8
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f7ff ff4c 	bl	8001078 <__NVIC_SetPriorityGrouping>
}
 80011e0:	bf00      	nop
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
 80011f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011f6:	2300      	movs	r3, #0
 80011f8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011fa:	f7ff ff61 	bl	80010c0 <__NVIC_GetPriorityGrouping>
 80011fe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	68b9      	ldr	r1, [r7, #8]
 8001204:	6978      	ldr	r0, [r7, #20]
 8001206:	f7ff ffb1 	bl	800116c <NVIC_EncodePriority>
 800120a:	4602      	mov	r2, r0
 800120c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001210:	4611      	mov	r1, r2
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff ff80 	bl	8001118 <__NVIC_SetPriority>
}
 8001218:	bf00      	nop
 800121a:	3718      	adds	r7, #24
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800122a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff ff54 	bl	80010dc <__NVIC_EnableIRQ>
}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800123c:	b480      	push	{r7}
 800123e:	b089      	sub	sp, #36	@ 0x24
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001246:	2300      	movs	r3, #0
 8001248:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800124a:	2300      	movs	r3, #0
 800124c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800124e:	2300      	movs	r3, #0
 8001250:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001252:	2300      	movs	r3, #0
 8001254:	61fb      	str	r3, [r7, #28]
 8001256:	e16b      	b.n	8001530 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001258:	2201      	movs	r2, #1
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	697a      	ldr	r2, [r7, #20]
 8001268:	4013      	ands	r3, r2
 800126a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	429a      	cmp	r2, r3
 8001272:	f040 815a 	bne.w	800152a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f003 0303 	and.w	r3, r3, #3
 800127e:	2b01      	cmp	r3, #1
 8001280:	d005      	beq.n	800128e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800128a:	2b02      	cmp	r3, #2
 800128c:	d130      	bne.n	80012f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	2203      	movs	r2, #3
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	43db      	mvns	r3, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4013      	ands	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	68da      	ldr	r2, [r3, #12]
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012c4:	2201      	movs	r2, #1
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	43db      	mvns	r3, r3
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	4013      	ands	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	091b      	lsrs	r3, r3, #4
 80012da:	f003 0201 	and.w	r2, r3, #1
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f003 0303 	and.w	r3, r3, #3
 80012f8:	2b03      	cmp	r3, #3
 80012fa:	d017      	beq.n	800132c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	2203      	movs	r2, #3
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	43db      	mvns	r3, r3
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4013      	ands	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	689a      	ldr	r2, [r3, #8]
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4313      	orrs	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f003 0303 	and.w	r3, r3, #3
 8001334:	2b02      	cmp	r3, #2
 8001336:	d123      	bne.n	8001380 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	08da      	lsrs	r2, r3, #3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	3208      	adds	r2, #8
 8001340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001344:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	f003 0307 	and.w	r3, r3, #7
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	220f      	movs	r2, #15
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	43db      	mvns	r3, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4013      	ands	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	691a      	ldr	r2, [r3, #16]
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	f003 0307 	and.w	r3, r3, #7
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4313      	orrs	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	08da      	lsrs	r2, r3, #3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	3208      	adds	r2, #8
 800137a:	69b9      	ldr	r1, [r7, #24]
 800137c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	2203      	movs	r2, #3
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	43db      	mvns	r3, r3
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4013      	ands	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f003 0203 	and.w	r2, r3, #3
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	f000 80b4 	beq.w	800152a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	4b60      	ldr	r3, [pc, #384]	@ (8001548 <HAL_GPIO_Init+0x30c>)
 80013c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ca:	4a5f      	ldr	r2, [pc, #380]	@ (8001548 <HAL_GPIO_Init+0x30c>)
 80013cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80013d2:	4b5d      	ldr	r3, [pc, #372]	@ (8001548 <HAL_GPIO_Init+0x30c>)
 80013d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013de:	4a5b      	ldr	r2, [pc, #364]	@ (800154c <HAL_GPIO_Init+0x310>)
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	089b      	lsrs	r3, r3, #2
 80013e4:	3302      	adds	r3, #2
 80013e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	f003 0303 	and.w	r3, r3, #3
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	220f      	movs	r2, #15
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43db      	mvns	r3, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4013      	ands	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a52      	ldr	r2, [pc, #328]	@ (8001550 <HAL_GPIO_Init+0x314>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d02b      	beq.n	8001462 <HAL_GPIO_Init+0x226>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a51      	ldr	r2, [pc, #324]	@ (8001554 <HAL_GPIO_Init+0x318>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d025      	beq.n	800145e <HAL_GPIO_Init+0x222>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a50      	ldr	r2, [pc, #320]	@ (8001558 <HAL_GPIO_Init+0x31c>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d01f      	beq.n	800145a <HAL_GPIO_Init+0x21e>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a4f      	ldr	r2, [pc, #316]	@ (800155c <HAL_GPIO_Init+0x320>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d019      	beq.n	8001456 <HAL_GPIO_Init+0x21a>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a4e      	ldr	r2, [pc, #312]	@ (8001560 <HAL_GPIO_Init+0x324>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d013      	beq.n	8001452 <HAL_GPIO_Init+0x216>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a4d      	ldr	r2, [pc, #308]	@ (8001564 <HAL_GPIO_Init+0x328>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d00d      	beq.n	800144e <HAL_GPIO_Init+0x212>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a4c      	ldr	r2, [pc, #304]	@ (8001568 <HAL_GPIO_Init+0x32c>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d007      	beq.n	800144a <HAL_GPIO_Init+0x20e>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a4b      	ldr	r2, [pc, #300]	@ (800156c <HAL_GPIO_Init+0x330>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d101      	bne.n	8001446 <HAL_GPIO_Init+0x20a>
 8001442:	2307      	movs	r3, #7
 8001444:	e00e      	b.n	8001464 <HAL_GPIO_Init+0x228>
 8001446:	2308      	movs	r3, #8
 8001448:	e00c      	b.n	8001464 <HAL_GPIO_Init+0x228>
 800144a:	2306      	movs	r3, #6
 800144c:	e00a      	b.n	8001464 <HAL_GPIO_Init+0x228>
 800144e:	2305      	movs	r3, #5
 8001450:	e008      	b.n	8001464 <HAL_GPIO_Init+0x228>
 8001452:	2304      	movs	r3, #4
 8001454:	e006      	b.n	8001464 <HAL_GPIO_Init+0x228>
 8001456:	2303      	movs	r3, #3
 8001458:	e004      	b.n	8001464 <HAL_GPIO_Init+0x228>
 800145a:	2302      	movs	r3, #2
 800145c:	e002      	b.n	8001464 <HAL_GPIO_Init+0x228>
 800145e:	2301      	movs	r3, #1
 8001460:	e000      	b.n	8001464 <HAL_GPIO_Init+0x228>
 8001462:	2300      	movs	r3, #0
 8001464:	69fa      	ldr	r2, [r7, #28]
 8001466:	f002 0203 	and.w	r2, r2, #3
 800146a:	0092      	lsls	r2, r2, #2
 800146c:	4093      	lsls	r3, r2
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	4313      	orrs	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001474:	4935      	ldr	r1, [pc, #212]	@ (800154c <HAL_GPIO_Init+0x310>)
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	089b      	lsrs	r3, r3, #2
 800147a:	3302      	adds	r3, #2
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001482:	4b3b      	ldr	r3, [pc, #236]	@ (8001570 <HAL_GPIO_Init+0x334>)
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	43db      	mvns	r3, r3
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	4013      	ands	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d003      	beq.n	80014a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014a6:	4a32      	ldr	r2, [pc, #200]	@ (8001570 <HAL_GPIO_Init+0x334>)
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014ac:	4b30      	ldr	r3, [pc, #192]	@ (8001570 <HAL_GPIO_Init+0x334>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	43db      	mvns	r3, r3
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	4013      	ands	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d003      	beq.n	80014d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014d0:	4a27      	ldr	r2, [pc, #156]	@ (8001570 <HAL_GPIO_Init+0x334>)
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014d6:	4b26      	ldr	r3, [pc, #152]	@ (8001570 <HAL_GPIO_Init+0x334>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	43db      	mvns	r3, r3
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	4013      	ands	r3, r2
 80014e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d003      	beq.n	80014fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014fa:	4a1d      	ldr	r2, [pc, #116]	@ (8001570 <HAL_GPIO_Init+0x334>)
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001500:	4b1b      	ldr	r3, [pc, #108]	@ (8001570 <HAL_GPIO_Init+0x334>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	43db      	mvns	r3, r3
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	4013      	ands	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d003      	beq.n	8001524 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	4313      	orrs	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001524:	4a12      	ldr	r2, [pc, #72]	@ (8001570 <HAL_GPIO_Init+0x334>)
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	3301      	adds	r3, #1
 800152e:	61fb      	str	r3, [r7, #28]
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	2b0f      	cmp	r3, #15
 8001534:	f67f ae90 	bls.w	8001258 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001538:	bf00      	nop
 800153a:	bf00      	nop
 800153c:	3724      	adds	r7, #36	@ 0x24
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	40023800 	.word	0x40023800
 800154c:	40013800 	.word	0x40013800
 8001550:	40020000 	.word	0x40020000
 8001554:	40020400 	.word	0x40020400
 8001558:	40020800 	.word	0x40020800
 800155c:	40020c00 	.word	0x40020c00
 8001560:	40021000 	.word	0x40021000
 8001564:	40021400 	.word	0x40021400
 8001568:	40021800 	.word	0x40021800
 800156c:	40021c00 	.word	0x40021c00
 8001570:	40013c00 	.word	0x40013c00

08001574 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	460b      	mov	r3, r1
 800157e:	807b      	strh	r3, [r7, #2]
 8001580:	4613      	mov	r3, r2
 8001582:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001584:	787b      	ldrb	r3, [r7, #1]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d003      	beq.n	8001592 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800158a:	887a      	ldrh	r2, [r7, #2]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001590:	e003      	b.n	800159a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001592:	887b      	ldrh	r3, [r7, #2]
 8001594:	041a      	lsls	r2, r3, #16
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	619a      	str	r2, [r3, #24]
}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
	...

080015a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d101      	bne.n	80015ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e12b      	b.n	8001812 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d106      	bne.n	80015d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7ff fb48 	bl	8000c64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2224      	movs	r2, #36	@ 0x24
 80015d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f022 0201 	bic.w	r2, r2, #1
 80015ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80015fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800160a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800160c:	f001 f8da 	bl	80027c4 <HAL_RCC_GetPCLK1Freq>
 8001610:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	4a81      	ldr	r2, [pc, #516]	@ (800181c <HAL_I2C_Init+0x274>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d807      	bhi.n	800162c <HAL_I2C_Init+0x84>
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	4a80      	ldr	r2, [pc, #512]	@ (8001820 <HAL_I2C_Init+0x278>)
 8001620:	4293      	cmp	r3, r2
 8001622:	bf94      	ite	ls
 8001624:	2301      	movls	r3, #1
 8001626:	2300      	movhi	r3, #0
 8001628:	b2db      	uxtb	r3, r3
 800162a:	e006      	b.n	800163a <HAL_I2C_Init+0x92>
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	4a7d      	ldr	r2, [pc, #500]	@ (8001824 <HAL_I2C_Init+0x27c>)
 8001630:	4293      	cmp	r3, r2
 8001632:	bf94      	ite	ls
 8001634:	2301      	movls	r3, #1
 8001636:	2300      	movhi	r3, #0
 8001638:	b2db      	uxtb	r3, r3
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e0e7      	b.n	8001812 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	4a78      	ldr	r2, [pc, #480]	@ (8001828 <HAL_I2C_Init+0x280>)
 8001646:	fba2 2303 	umull	r2, r3, r2, r3
 800164a:	0c9b      	lsrs	r3, r3, #18
 800164c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	68ba      	ldr	r2, [r7, #8]
 800165e:	430a      	orrs	r2, r1
 8001660:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	6a1b      	ldr	r3, [r3, #32]
 8001668:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	4a6a      	ldr	r2, [pc, #424]	@ (800181c <HAL_I2C_Init+0x274>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d802      	bhi.n	800167c <HAL_I2C_Init+0xd4>
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	3301      	adds	r3, #1
 800167a:	e009      	b.n	8001690 <HAL_I2C_Init+0xe8>
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001682:	fb02 f303 	mul.w	r3, r2, r3
 8001686:	4a69      	ldr	r2, [pc, #420]	@ (800182c <HAL_I2C_Init+0x284>)
 8001688:	fba2 2303 	umull	r2, r3, r2, r3
 800168c:	099b      	lsrs	r3, r3, #6
 800168e:	3301      	adds	r3, #1
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	6812      	ldr	r2, [r2, #0]
 8001694:	430b      	orrs	r3, r1
 8001696:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	69db      	ldr	r3, [r3, #28]
 800169e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80016a2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	495c      	ldr	r1, [pc, #368]	@ (800181c <HAL_I2C_Init+0x274>)
 80016ac:	428b      	cmp	r3, r1
 80016ae:	d819      	bhi.n	80016e4 <HAL_I2C_Init+0x13c>
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	1e59      	subs	r1, r3, #1
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80016be:	1c59      	adds	r1, r3, #1
 80016c0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80016c4:	400b      	ands	r3, r1
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d00a      	beq.n	80016e0 <HAL_I2C_Init+0x138>
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	1e59      	subs	r1, r3, #1
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80016d8:	3301      	adds	r3, #1
 80016da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016de:	e051      	b.n	8001784 <HAL_I2C_Init+0x1dc>
 80016e0:	2304      	movs	r3, #4
 80016e2:	e04f      	b.n	8001784 <HAL_I2C_Init+0x1dc>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d111      	bne.n	8001710 <HAL_I2C_Init+0x168>
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	1e58      	subs	r0, r3, #1
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6859      	ldr	r1, [r3, #4]
 80016f4:	460b      	mov	r3, r1
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	440b      	add	r3, r1
 80016fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80016fe:	3301      	adds	r3, #1
 8001700:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001704:	2b00      	cmp	r3, #0
 8001706:	bf0c      	ite	eq
 8001708:	2301      	moveq	r3, #1
 800170a:	2300      	movne	r3, #0
 800170c:	b2db      	uxtb	r3, r3
 800170e:	e012      	b.n	8001736 <HAL_I2C_Init+0x18e>
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	1e58      	subs	r0, r3, #1
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6859      	ldr	r1, [r3, #4]
 8001718:	460b      	mov	r3, r1
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	440b      	add	r3, r1
 800171e:	0099      	lsls	r1, r3, #2
 8001720:	440b      	add	r3, r1
 8001722:	fbb0 f3f3 	udiv	r3, r0, r3
 8001726:	3301      	adds	r3, #1
 8001728:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800172c:	2b00      	cmp	r3, #0
 800172e:	bf0c      	ite	eq
 8001730:	2301      	moveq	r3, #1
 8001732:	2300      	movne	r3, #0
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <HAL_I2C_Init+0x196>
 800173a:	2301      	movs	r3, #1
 800173c:	e022      	b.n	8001784 <HAL_I2C_Init+0x1dc>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d10e      	bne.n	8001764 <HAL_I2C_Init+0x1bc>
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	1e58      	subs	r0, r3, #1
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6859      	ldr	r1, [r3, #4]
 800174e:	460b      	mov	r3, r1
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	440b      	add	r3, r1
 8001754:	fbb0 f3f3 	udiv	r3, r0, r3
 8001758:	3301      	adds	r3, #1
 800175a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800175e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001762:	e00f      	b.n	8001784 <HAL_I2C_Init+0x1dc>
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	1e58      	subs	r0, r3, #1
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6859      	ldr	r1, [r3, #4]
 800176c:	460b      	mov	r3, r1
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	440b      	add	r3, r1
 8001772:	0099      	lsls	r1, r3, #2
 8001774:	440b      	add	r3, r1
 8001776:	fbb0 f3f3 	udiv	r3, r0, r3
 800177a:	3301      	adds	r3, #1
 800177c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001780:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001784:	6879      	ldr	r1, [r7, #4]
 8001786:	6809      	ldr	r1, [r1, #0]
 8001788:	4313      	orrs	r3, r2
 800178a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	69da      	ldr	r2, [r3, #28]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a1b      	ldr	r3, [r3, #32]
 800179e:	431a      	orrs	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	430a      	orrs	r2, r1
 80017a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80017b2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	6911      	ldr	r1, [r2, #16]
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	68d2      	ldr	r2, [r2, #12]
 80017be:	4311      	orrs	r1, r2
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	6812      	ldr	r2, [r2, #0]
 80017c4:	430b      	orrs	r3, r1
 80017c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	695a      	ldr	r2, [r3, #20]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	431a      	orrs	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	430a      	orrs	r2, r1
 80017e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f042 0201 	orr.w	r2, r2, #1
 80017f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2220      	movs	r2, #32
 80017fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	000186a0 	.word	0x000186a0
 8001820:	001e847f 	.word	0x001e847f
 8001824:	003d08ff 	.word	0x003d08ff
 8001828:	431bde83 	.word	0x431bde83
 800182c:	10624dd3 	.word	0x10624dd3

08001830 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b088      	sub	sp, #32
 8001834:	af02      	add	r7, sp, #8
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	607a      	str	r2, [r7, #4]
 800183a:	461a      	mov	r2, r3
 800183c:	460b      	mov	r3, r1
 800183e:	817b      	strh	r3, [r7, #10]
 8001840:	4613      	mov	r3, r2
 8001842:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001844:	f7ff fbe8 	bl	8001018 <HAL_GetTick>
 8001848:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001850:	b2db      	uxtb	r3, r3
 8001852:	2b20      	cmp	r3, #32
 8001854:	f040 80e0 	bne.w	8001a18 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	9300      	str	r3, [sp, #0]
 800185c:	2319      	movs	r3, #25
 800185e:	2201      	movs	r2, #1
 8001860:	4970      	ldr	r1, [pc, #448]	@ (8001a24 <HAL_I2C_Master_Transmit+0x1f4>)
 8001862:	68f8      	ldr	r0, [r7, #12]
 8001864:	f000 f964 	bl	8001b30 <I2C_WaitOnFlagUntilTimeout>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800186e:	2302      	movs	r3, #2
 8001870:	e0d3      	b.n	8001a1a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001878:	2b01      	cmp	r3, #1
 800187a:	d101      	bne.n	8001880 <HAL_I2C_Master_Transmit+0x50>
 800187c:	2302      	movs	r3, #2
 800187e:	e0cc      	b.n	8001a1a <HAL_I2C_Master_Transmit+0x1ea>
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2201      	movs	r2, #1
 8001884:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	2b01      	cmp	r3, #1
 8001894:	d007      	beq.n	80018a6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f042 0201 	orr.w	r2, r2, #1
 80018a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80018b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2221      	movs	r2, #33	@ 0x21
 80018ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2210      	movs	r2, #16
 80018c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2200      	movs	r2, #0
 80018ca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	893a      	ldrh	r2, [r7, #8]
 80018d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018dc:	b29a      	uxth	r2, r3
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	4a50      	ldr	r2, [pc, #320]	@ (8001a28 <HAL_I2C_Master_Transmit+0x1f8>)
 80018e6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80018e8:	8979      	ldrh	r1, [r7, #10]
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	6a3a      	ldr	r2, [r7, #32]
 80018ee:	68f8      	ldr	r0, [r7, #12]
 80018f0:	f000 f89c 	bl	8001a2c <I2C_MasterRequestWrite>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e08d      	b.n	8001a1a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018fe:	2300      	movs	r3, #0
 8001900:	613b      	str	r3, [r7, #16]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	695b      	ldr	r3, [r3, #20]
 8001908:	613b      	str	r3, [r7, #16]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	613b      	str	r3, [r7, #16]
 8001912:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001914:	e066      	b.n	80019e4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001916:	697a      	ldr	r2, [r7, #20]
 8001918:	6a39      	ldr	r1, [r7, #32]
 800191a:	68f8      	ldr	r0, [r7, #12]
 800191c:	f000 fa22 	bl	8001d64 <I2C_WaitOnTXEFlagUntilTimeout>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d00d      	beq.n	8001942 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192a:	2b04      	cmp	r3, #4
 800192c:	d107      	bne.n	800193e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800193c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e06b      	b.n	8001a1a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001946:	781a      	ldrb	r2, [r3, #0]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001952:	1c5a      	adds	r2, r3, #1
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800195c:	b29b      	uxth	r3, r3
 800195e:	3b01      	subs	r3, #1
 8001960:	b29a      	uxth	r2, r3
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800196a:	3b01      	subs	r3, #1
 800196c:	b29a      	uxth	r2, r3
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	695b      	ldr	r3, [r3, #20]
 8001978:	f003 0304 	and.w	r3, r3, #4
 800197c:	2b04      	cmp	r3, #4
 800197e:	d11b      	bne.n	80019b8 <HAL_I2C_Master_Transmit+0x188>
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001984:	2b00      	cmp	r3, #0
 8001986:	d017      	beq.n	80019b8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800198c:	781a      	ldrb	r2, [r3, #0]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001998:	1c5a      	adds	r2, r3, #1
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	3b01      	subs	r3, #1
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019b0:	3b01      	subs	r3, #1
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019b8:	697a      	ldr	r2, [r7, #20]
 80019ba:	6a39      	ldr	r1, [r7, #32]
 80019bc:	68f8      	ldr	r0, [r7, #12]
 80019be:	f000 fa19 	bl	8001df4 <I2C_WaitOnBTFFlagUntilTimeout>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d00d      	beq.n	80019e4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019cc:	2b04      	cmp	r3, #4
 80019ce:	d107      	bne.n	80019e0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019de:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e01a      	b.n	8001a1a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d194      	bne.n	8001916 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2220      	movs	r2, #32
 8001a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2200      	movs	r2, #0
 8001a08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001a14:	2300      	movs	r3, #0
 8001a16:	e000      	b.n	8001a1a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001a18:	2302      	movs	r3, #2
  }
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3718      	adds	r7, #24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	00100002 	.word	0x00100002
 8001a28:	ffff0000 	.word	0xffff0000

08001a2c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b088      	sub	sp, #32
 8001a30:	af02      	add	r7, sp, #8
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	607a      	str	r2, [r7, #4]
 8001a36:	603b      	str	r3, [r7, #0]
 8001a38:	460b      	mov	r3, r1
 8001a3a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a40:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	2b08      	cmp	r3, #8
 8001a46:	d006      	beq.n	8001a56 <I2C_MasterRequestWrite+0x2a>
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d003      	beq.n	8001a56 <I2C_MasterRequestWrite+0x2a>
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001a54:	d108      	bne.n	8001a68 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	e00b      	b.n	8001a80 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6c:	2b12      	cmp	r3, #18
 8001a6e:	d107      	bne.n	8001a80 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a7e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001a8c:	68f8      	ldr	r0, [r7, #12]
 8001a8e:	f000 f84f 	bl	8001b30 <I2C_WaitOnFlagUntilTimeout>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d00d      	beq.n	8001ab4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aa2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001aa6:	d103      	bne.n	8001ab0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001aae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e035      	b.n	8001b20 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	691b      	ldr	r3, [r3, #16]
 8001ab8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001abc:	d108      	bne.n	8001ad0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001abe:	897b      	ldrh	r3, [r7, #10]
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001acc:	611a      	str	r2, [r3, #16]
 8001ace:	e01b      	b.n	8001b08 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001ad0:	897b      	ldrh	r3, [r7, #10]
 8001ad2:	11db      	asrs	r3, r3, #7
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	f003 0306 	and.w	r3, r3, #6
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	f063 030f 	orn	r3, r3, #15
 8001ae0:	b2da      	uxtb	r2, r3
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	490e      	ldr	r1, [pc, #56]	@ (8001b28 <I2C_MasterRequestWrite+0xfc>)
 8001aee:	68f8      	ldr	r0, [r7, #12]
 8001af0:	f000 f898 	bl	8001c24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e010      	b.n	8001b20 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001afe:	897b      	ldrh	r3, [r7, #10]
 8001b00:	b2da      	uxtb	r2, r3
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	4907      	ldr	r1, [pc, #28]	@ (8001b2c <I2C_MasterRequestWrite+0x100>)
 8001b0e:	68f8      	ldr	r0, [r7, #12]
 8001b10:	f000 f888 	bl	8001c24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e000      	b.n	8001b20 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3718      	adds	r7, #24
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	00010008 	.word	0x00010008
 8001b2c:	00010002 	.word	0x00010002

08001b30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	603b      	str	r3, [r7, #0]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b40:	e048      	b.n	8001bd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b48:	d044      	beq.n	8001bd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b4a:	f7ff fa65 	bl	8001018 <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	683a      	ldr	r2, [r7, #0]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d302      	bcc.n	8001b60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d139      	bne.n	8001bd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	0c1b      	lsrs	r3, r3, #16
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d10d      	bne.n	8001b86 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	695b      	ldr	r3, [r3, #20]
 8001b70:	43da      	mvns	r2, r3
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	4013      	ands	r3, r2
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	bf0c      	ite	eq
 8001b7c:	2301      	moveq	r3, #1
 8001b7e:	2300      	movne	r3, #0
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	461a      	mov	r2, r3
 8001b84:	e00c      	b.n	8001ba0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	43da      	mvns	r2, r3
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	4013      	ands	r3, r2
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	bf0c      	ite	eq
 8001b98:	2301      	moveq	r3, #1
 8001b9a:	2300      	movne	r3, #0
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	79fb      	ldrb	r3, [r7, #7]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d116      	bne.n	8001bd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2220      	movs	r2, #32
 8001bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc0:	f043 0220 	orr.w	r2, r3, #32
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e023      	b.n	8001c1c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	0c1b      	lsrs	r3, r3, #16
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d10d      	bne.n	8001bfa <I2C_WaitOnFlagUntilTimeout+0xca>
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	695b      	ldr	r3, [r3, #20]
 8001be4:	43da      	mvns	r2, r3
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	4013      	ands	r3, r2
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	bf0c      	ite	eq
 8001bf0:	2301      	moveq	r3, #1
 8001bf2:	2300      	movne	r3, #0
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	e00c      	b.n	8001c14 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	43da      	mvns	r2, r3
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	4013      	ands	r3, r2
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	bf0c      	ite	eq
 8001c0c:	2301      	moveq	r3, #1
 8001c0e:	2300      	movne	r3, #0
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	461a      	mov	r2, r3
 8001c14:	79fb      	ldrb	r3, [r7, #7]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d093      	beq.n	8001b42 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3710      	adds	r7, #16
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
 8001c30:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c32:	e071      	b.n	8001d18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	695b      	ldr	r3, [r3, #20]
 8001c3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c42:	d123      	bne.n	8001c8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c52:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001c5c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2200      	movs	r2, #0
 8001c62:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2220      	movs	r2, #32
 8001c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c78:	f043 0204 	orr.w	r2, r3, #4
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e067      	b.n	8001d5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c92:	d041      	beq.n	8001d18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c94:	f7ff f9c0 	bl	8001018 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d302      	bcc.n	8001caa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d136      	bne.n	8001d18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	0c1b      	lsrs	r3, r3, #16
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d10c      	bne.n	8001cce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	695b      	ldr	r3, [r3, #20]
 8001cba:	43da      	mvns	r2, r3
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	bf14      	ite	ne
 8001cc6:	2301      	movne	r3, #1
 8001cc8:	2300      	moveq	r3, #0
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	e00b      	b.n	8001ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	43da      	mvns	r2, r3
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	bf14      	ite	ne
 8001ce0:	2301      	movne	r3, #1
 8001ce2:	2300      	moveq	r3, #0
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d016      	beq.n	8001d18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2200      	movs	r2, #0
 8001cee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2220      	movs	r2, #32
 8001cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d04:	f043 0220 	orr.w	r2, r3, #32
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e021      	b.n	8001d5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	0c1b      	lsrs	r3, r3, #16
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d10c      	bne.n	8001d3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	695b      	ldr	r3, [r3, #20]
 8001d28:	43da      	mvns	r2, r3
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	bf14      	ite	ne
 8001d34:	2301      	movne	r3, #1
 8001d36:	2300      	moveq	r3, #0
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	e00b      	b.n	8001d54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	43da      	mvns	r2, r3
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	4013      	ands	r3, r2
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	bf14      	ite	ne
 8001d4e:	2301      	movne	r3, #1
 8001d50:	2300      	moveq	r3, #0
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f47f af6d 	bne.w	8001c34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3710      	adds	r7, #16
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d70:	e034      	b.n	8001ddc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d72:	68f8      	ldr	r0, [r7, #12]
 8001d74:	f000 f886 	bl	8001e84 <I2C_IsAcknowledgeFailed>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e034      	b.n	8001dec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d88:	d028      	beq.n	8001ddc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d8a:	f7ff f945 	bl	8001018 <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	68ba      	ldr	r2, [r7, #8]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d302      	bcc.n	8001da0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d11d      	bne.n	8001ddc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	695b      	ldr	r3, [r3, #20]
 8001da6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001daa:	2b80      	cmp	r3, #128	@ 0x80
 8001dac:	d016      	beq.n	8001ddc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2200      	movs	r2, #0
 8001db2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2220      	movs	r2, #32
 8001db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc8:	f043 0220 	orr.w	r2, r3, #32
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e007      	b.n	8001dec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	695b      	ldr	r3, [r3, #20]
 8001de2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001de6:	2b80      	cmp	r3, #128	@ 0x80
 8001de8:	d1c3      	bne.n	8001d72 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3710      	adds	r7, #16
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e00:	e034      	b.n	8001e6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e02:	68f8      	ldr	r0, [r7, #12]
 8001e04:	f000 f83e 	bl	8001e84 <I2C_IsAcknowledgeFailed>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e034      	b.n	8001e7c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e18:	d028      	beq.n	8001e6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e1a:	f7ff f8fd 	bl	8001018 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	68ba      	ldr	r2, [r7, #8]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d302      	bcc.n	8001e30 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d11d      	bne.n	8001e6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	f003 0304 	and.w	r3, r3, #4
 8001e3a:	2b04      	cmp	r3, #4
 8001e3c:	d016      	beq.n	8001e6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2200      	movs	r2, #0
 8001e42:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2220      	movs	r2, #32
 8001e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e58:	f043 0220 	orr.w	r2, r3, #32
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e007      	b.n	8001e7c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	f003 0304 	and.w	r3, r3, #4
 8001e76:	2b04      	cmp	r3, #4
 8001e78:	d1c3      	bne.n	8001e02 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3710      	adds	r7, #16
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	695b      	ldr	r3, [r3, #20]
 8001e92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e9a:	d11b      	bne.n	8001ed4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001ea4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2220      	movs	r2, #32
 8001eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec0:	f043 0204 	orr.w	r2, r3, #4
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e000      	b.n	8001ed6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
	...

08001ee4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e267      	b.n	80023c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d075      	beq.n	8001fee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001f02:	4b88      	ldr	r3, [pc, #544]	@ (8002124 <HAL_RCC_OscConfig+0x240>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f003 030c 	and.w	r3, r3, #12
 8001f0a:	2b04      	cmp	r3, #4
 8001f0c:	d00c      	beq.n	8001f28 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f0e:	4b85      	ldr	r3, [pc, #532]	@ (8002124 <HAL_RCC_OscConfig+0x240>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001f16:	2b08      	cmp	r3, #8
 8001f18:	d112      	bne.n	8001f40 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f1a:	4b82      	ldr	r3, [pc, #520]	@ (8002124 <HAL_RCC_OscConfig+0x240>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f26:	d10b      	bne.n	8001f40 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f28:	4b7e      	ldr	r3, [pc, #504]	@ (8002124 <HAL_RCC_OscConfig+0x240>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d05b      	beq.n	8001fec <HAL_RCC_OscConfig+0x108>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d157      	bne.n	8001fec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e242      	b.n	80023c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f48:	d106      	bne.n	8001f58 <HAL_RCC_OscConfig+0x74>
 8001f4a:	4b76      	ldr	r3, [pc, #472]	@ (8002124 <HAL_RCC_OscConfig+0x240>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a75      	ldr	r2, [pc, #468]	@ (8002124 <HAL_RCC_OscConfig+0x240>)
 8001f50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f54:	6013      	str	r3, [r2, #0]
 8001f56:	e01d      	b.n	8001f94 <HAL_RCC_OscConfig+0xb0>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f60:	d10c      	bne.n	8001f7c <HAL_RCC_OscConfig+0x98>
 8001f62:	4b70      	ldr	r3, [pc, #448]	@ (8002124 <HAL_RCC_OscConfig+0x240>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a6f      	ldr	r2, [pc, #444]	@ (8002124 <HAL_RCC_OscConfig+0x240>)
 8001f68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f6c:	6013      	str	r3, [r2, #0]
 8001f6e:	4b6d      	ldr	r3, [pc, #436]	@ (8002124 <HAL_RCC_OscConfig+0x240>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a6c      	ldr	r2, [pc, #432]	@ (8002124 <HAL_RCC_OscConfig+0x240>)
 8001f74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f78:	6013      	str	r3, [r2, #0]
 8001f7a:	e00b      	b.n	8001f94 <HAL_RCC_OscConfig+0xb0>
 8001f7c:	4b69      	ldr	r3, [pc, #420]	@ (8002124 <HAL_RCC_OscConfig+0x240>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a68      	ldr	r2, [pc, #416]	@ (8002124 <HAL_RCC_OscConfig+0x240>)
 8001f82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f86:	6013      	str	r3, [r2, #0]
 8001f88:	4b66      	ldr	r3, [pc, #408]	@ (8002124 <HAL_RCC_OscConfig+0x240>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a65      	ldr	r2, [pc, #404]	@ (8002124 <HAL_RCC_OscConfig+0x240>)
 8001f8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d013      	beq.n	8001fc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9c:	f7ff f83c 	bl	8001018 <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fa4:	f7ff f838 	bl	8001018 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b64      	cmp	r3, #100	@ 0x64
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e207      	b.n	80023c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fb6:	4b5b      	ldr	r3, [pc, #364]	@ (8002124 <HAL_RCC_OscConfig+0x240>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d0f0      	beq.n	8001fa4 <HAL_RCC_OscConfig+0xc0>
 8001fc2:	e014      	b.n	8001fee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc4:	f7ff f828 	bl	8001018 <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fcc:	f7ff f824 	bl	8001018 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b64      	cmp	r3, #100	@ 0x64
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e1f3      	b.n	80023c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fde:	4b51      	ldr	r3, [pc, #324]	@ (8002124 <HAL_RCC_OscConfig+0x240>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1f0      	bne.n	8001fcc <HAL_RCC_OscConfig+0xe8>
 8001fea:	e000      	b.n	8001fee <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d063      	beq.n	80020c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001ffa:	4b4a      	ldr	r3, [pc, #296]	@ (8002124 <HAL_RCC_OscConfig+0x240>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f003 030c 	and.w	r3, r3, #12
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00b      	beq.n	800201e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002006:	4b47      	ldr	r3, [pc, #284]	@ (8002124 <HAL_RCC_OscConfig+0x240>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800200e:	2b08      	cmp	r3, #8
 8002010:	d11c      	bne.n	800204c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002012:	4b44      	ldr	r3, [pc, #272]	@ (8002124 <HAL_RCC_OscConfig+0x240>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d116      	bne.n	800204c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800201e:	4b41      	ldr	r3, [pc, #260]	@ (8002124 <HAL_RCC_OscConfig+0x240>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d005      	beq.n	8002036 <HAL_RCC_OscConfig+0x152>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d001      	beq.n	8002036 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e1c7      	b.n	80023c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002036:	4b3b      	ldr	r3, [pc, #236]	@ (8002124 <HAL_RCC_OscConfig+0x240>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	4937      	ldr	r1, [pc, #220]	@ (8002124 <HAL_RCC_OscConfig+0x240>)
 8002046:	4313      	orrs	r3, r2
 8002048:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800204a:	e03a      	b.n	80020c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d020      	beq.n	8002096 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002054:	4b34      	ldr	r3, [pc, #208]	@ (8002128 <HAL_RCC_OscConfig+0x244>)
 8002056:	2201      	movs	r2, #1
 8002058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800205a:	f7fe ffdd 	bl	8001018 <HAL_GetTick>
 800205e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002060:	e008      	b.n	8002074 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002062:	f7fe ffd9 	bl	8001018 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d901      	bls.n	8002074 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e1a8      	b.n	80023c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002074:	4b2b      	ldr	r3, [pc, #172]	@ (8002124 <HAL_RCC_OscConfig+0x240>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d0f0      	beq.n	8002062 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002080:	4b28      	ldr	r3, [pc, #160]	@ (8002124 <HAL_RCC_OscConfig+0x240>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	4925      	ldr	r1, [pc, #148]	@ (8002124 <HAL_RCC_OscConfig+0x240>)
 8002090:	4313      	orrs	r3, r2
 8002092:	600b      	str	r3, [r1, #0]
 8002094:	e015      	b.n	80020c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002096:	4b24      	ldr	r3, [pc, #144]	@ (8002128 <HAL_RCC_OscConfig+0x244>)
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800209c:	f7fe ffbc 	bl	8001018 <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020a4:	f7fe ffb8 	bl	8001018 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e187      	b.n	80023c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002124 <HAL_RCC_OscConfig+0x240>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1f0      	bne.n	80020a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0308 	and.w	r3, r3, #8
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d036      	beq.n	800213c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d016      	beq.n	8002104 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020d6:	4b15      	ldr	r3, [pc, #84]	@ (800212c <HAL_RCC_OscConfig+0x248>)
 80020d8:	2201      	movs	r2, #1
 80020da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020dc:	f7fe ff9c 	bl	8001018 <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020e4:	f7fe ff98 	bl	8001018 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e167      	b.n	80023c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002124 <HAL_RCC_OscConfig+0x240>)
 80020f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d0f0      	beq.n	80020e4 <HAL_RCC_OscConfig+0x200>
 8002102:	e01b      	b.n	800213c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002104:	4b09      	ldr	r3, [pc, #36]	@ (800212c <HAL_RCC_OscConfig+0x248>)
 8002106:	2200      	movs	r2, #0
 8002108:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800210a:	f7fe ff85 	bl	8001018 <HAL_GetTick>
 800210e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002110:	e00e      	b.n	8002130 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002112:	f7fe ff81 	bl	8001018 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d907      	bls.n	8002130 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e150      	b.n	80023c6 <HAL_RCC_OscConfig+0x4e2>
 8002124:	40023800 	.word	0x40023800
 8002128:	42470000 	.word	0x42470000
 800212c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002130:	4b88      	ldr	r3, [pc, #544]	@ (8002354 <HAL_RCC_OscConfig+0x470>)
 8002132:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1ea      	bne.n	8002112 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	2b00      	cmp	r3, #0
 8002146:	f000 8097 	beq.w	8002278 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800214a:	2300      	movs	r3, #0
 800214c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800214e:	4b81      	ldr	r3, [pc, #516]	@ (8002354 <HAL_RCC_OscConfig+0x470>)
 8002150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002152:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10f      	bne.n	800217a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	60bb      	str	r3, [r7, #8]
 800215e:	4b7d      	ldr	r3, [pc, #500]	@ (8002354 <HAL_RCC_OscConfig+0x470>)
 8002160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002162:	4a7c      	ldr	r2, [pc, #496]	@ (8002354 <HAL_RCC_OscConfig+0x470>)
 8002164:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002168:	6413      	str	r3, [r2, #64]	@ 0x40
 800216a:	4b7a      	ldr	r3, [pc, #488]	@ (8002354 <HAL_RCC_OscConfig+0x470>)
 800216c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002172:	60bb      	str	r3, [r7, #8]
 8002174:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002176:	2301      	movs	r3, #1
 8002178:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800217a:	4b77      	ldr	r3, [pc, #476]	@ (8002358 <HAL_RCC_OscConfig+0x474>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002182:	2b00      	cmp	r3, #0
 8002184:	d118      	bne.n	80021b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002186:	4b74      	ldr	r3, [pc, #464]	@ (8002358 <HAL_RCC_OscConfig+0x474>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a73      	ldr	r2, [pc, #460]	@ (8002358 <HAL_RCC_OscConfig+0x474>)
 800218c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002190:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002192:	f7fe ff41 	bl	8001018 <HAL_GetTick>
 8002196:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002198:	e008      	b.n	80021ac <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800219a:	f7fe ff3d 	bl	8001018 <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d901      	bls.n	80021ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e10c      	b.n	80023c6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ac:	4b6a      	ldr	r3, [pc, #424]	@ (8002358 <HAL_RCC_OscConfig+0x474>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d0f0      	beq.n	800219a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d106      	bne.n	80021ce <HAL_RCC_OscConfig+0x2ea>
 80021c0:	4b64      	ldr	r3, [pc, #400]	@ (8002354 <HAL_RCC_OscConfig+0x470>)
 80021c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021c4:	4a63      	ldr	r2, [pc, #396]	@ (8002354 <HAL_RCC_OscConfig+0x470>)
 80021c6:	f043 0301 	orr.w	r3, r3, #1
 80021ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80021cc:	e01c      	b.n	8002208 <HAL_RCC_OscConfig+0x324>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	2b05      	cmp	r3, #5
 80021d4:	d10c      	bne.n	80021f0 <HAL_RCC_OscConfig+0x30c>
 80021d6:	4b5f      	ldr	r3, [pc, #380]	@ (8002354 <HAL_RCC_OscConfig+0x470>)
 80021d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021da:	4a5e      	ldr	r2, [pc, #376]	@ (8002354 <HAL_RCC_OscConfig+0x470>)
 80021dc:	f043 0304 	orr.w	r3, r3, #4
 80021e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80021e2:	4b5c      	ldr	r3, [pc, #368]	@ (8002354 <HAL_RCC_OscConfig+0x470>)
 80021e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021e6:	4a5b      	ldr	r2, [pc, #364]	@ (8002354 <HAL_RCC_OscConfig+0x470>)
 80021e8:	f043 0301 	orr.w	r3, r3, #1
 80021ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80021ee:	e00b      	b.n	8002208 <HAL_RCC_OscConfig+0x324>
 80021f0:	4b58      	ldr	r3, [pc, #352]	@ (8002354 <HAL_RCC_OscConfig+0x470>)
 80021f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021f4:	4a57      	ldr	r2, [pc, #348]	@ (8002354 <HAL_RCC_OscConfig+0x470>)
 80021f6:	f023 0301 	bic.w	r3, r3, #1
 80021fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80021fc:	4b55      	ldr	r3, [pc, #340]	@ (8002354 <HAL_RCC_OscConfig+0x470>)
 80021fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002200:	4a54      	ldr	r2, [pc, #336]	@ (8002354 <HAL_RCC_OscConfig+0x470>)
 8002202:	f023 0304 	bic.w	r3, r3, #4
 8002206:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d015      	beq.n	800223c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002210:	f7fe ff02 	bl	8001018 <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002216:	e00a      	b.n	800222e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002218:	f7fe fefe 	bl	8001018 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002226:	4293      	cmp	r3, r2
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e0cb      	b.n	80023c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800222e:	4b49      	ldr	r3, [pc, #292]	@ (8002354 <HAL_RCC_OscConfig+0x470>)
 8002230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d0ee      	beq.n	8002218 <HAL_RCC_OscConfig+0x334>
 800223a:	e014      	b.n	8002266 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800223c:	f7fe feec 	bl	8001018 <HAL_GetTick>
 8002240:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002242:	e00a      	b.n	800225a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002244:	f7fe fee8 	bl	8001018 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002252:	4293      	cmp	r3, r2
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e0b5      	b.n	80023c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800225a:	4b3e      	ldr	r3, [pc, #248]	@ (8002354 <HAL_RCC_OscConfig+0x470>)
 800225c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1ee      	bne.n	8002244 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002266:	7dfb      	ldrb	r3, [r7, #23]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d105      	bne.n	8002278 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800226c:	4b39      	ldr	r3, [pc, #228]	@ (8002354 <HAL_RCC_OscConfig+0x470>)
 800226e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002270:	4a38      	ldr	r2, [pc, #224]	@ (8002354 <HAL_RCC_OscConfig+0x470>)
 8002272:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002276:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	2b00      	cmp	r3, #0
 800227e:	f000 80a1 	beq.w	80023c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002282:	4b34      	ldr	r3, [pc, #208]	@ (8002354 <HAL_RCC_OscConfig+0x470>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 030c 	and.w	r3, r3, #12
 800228a:	2b08      	cmp	r3, #8
 800228c:	d05c      	beq.n	8002348 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	2b02      	cmp	r3, #2
 8002294:	d141      	bne.n	800231a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002296:	4b31      	ldr	r3, [pc, #196]	@ (800235c <HAL_RCC_OscConfig+0x478>)
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800229c:	f7fe febc 	bl	8001018 <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a4:	f7fe feb8 	bl	8001018 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e087      	b.n	80023c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022b6:	4b27      	ldr	r3, [pc, #156]	@ (8002354 <HAL_RCC_OscConfig+0x470>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1f0      	bne.n	80022a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	69da      	ldr	r2, [r3, #28]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	431a      	orrs	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d0:	019b      	lsls	r3, r3, #6
 80022d2:	431a      	orrs	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022d8:	085b      	lsrs	r3, r3, #1
 80022da:	3b01      	subs	r3, #1
 80022dc:	041b      	lsls	r3, r3, #16
 80022de:	431a      	orrs	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022e4:	061b      	lsls	r3, r3, #24
 80022e6:	491b      	ldr	r1, [pc, #108]	@ (8002354 <HAL_RCC_OscConfig+0x470>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022ec:	4b1b      	ldr	r3, [pc, #108]	@ (800235c <HAL_RCC_OscConfig+0x478>)
 80022ee:	2201      	movs	r2, #1
 80022f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f2:	f7fe fe91 	bl	8001018 <HAL_GetTick>
 80022f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022f8:	e008      	b.n	800230c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022fa:	f7fe fe8d 	bl	8001018 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	2b02      	cmp	r3, #2
 8002306:	d901      	bls.n	800230c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e05c      	b.n	80023c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800230c:	4b11      	ldr	r3, [pc, #68]	@ (8002354 <HAL_RCC_OscConfig+0x470>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d0f0      	beq.n	80022fa <HAL_RCC_OscConfig+0x416>
 8002318:	e054      	b.n	80023c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800231a:	4b10      	ldr	r3, [pc, #64]	@ (800235c <HAL_RCC_OscConfig+0x478>)
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002320:	f7fe fe7a 	bl	8001018 <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002328:	f7fe fe76 	bl	8001018 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e045      	b.n	80023c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800233a:	4b06      	ldr	r3, [pc, #24]	@ (8002354 <HAL_RCC_OscConfig+0x470>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1f0      	bne.n	8002328 <HAL_RCC_OscConfig+0x444>
 8002346:	e03d      	b.n	80023c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d107      	bne.n	8002360 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e038      	b.n	80023c6 <HAL_RCC_OscConfig+0x4e2>
 8002354:	40023800 	.word	0x40023800
 8002358:	40007000 	.word	0x40007000
 800235c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002360:	4b1b      	ldr	r3, [pc, #108]	@ (80023d0 <HAL_RCC_OscConfig+0x4ec>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d028      	beq.n	80023c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002378:	429a      	cmp	r2, r3
 800237a:	d121      	bne.n	80023c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002386:	429a      	cmp	r2, r3
 8002388:	d11a      	bne.n	80023c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002390:	4013      	ands	r3, r2
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002396:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002398:	4293      	cmp	r3, r2
 800239a:	d111      	bne.n	80023c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023a6:	085b      	lsrs	r3, r3, #1
 80023a8:	3b01      	subs	r3, #1
 80023aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d107      	bne.n	80023c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023bc:	429a      	cmp	r2, r3
 80023be:	d001      	beq.n	80023c4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e000      	b.n	80023c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3718      	adds	r7, #24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	40023800 	.word	0x40023800

080023d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d101      	bne.n	80023e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e0cc      	b.n	8002582 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023e8:	4b68      	ldr	r3, [pc, #416]	@ (800258c <HAL_RCC_ClockConfig+0x1b8>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0307 	and.w	r3, r3, #7
 80023f0:	683a      	ldr	r2, [r7, #0]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d90c      	bls.n	8002410 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023f6:	4b65      	ldr	r3, [pc, #404]	@ (800258c <HAL_RCC_ClockConfig+0x1b8>)
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	b2d2      	uxtb	r2, r2
 80023fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023fe:	4b63      	ldr	r3, [pc, #396]	@ (800258c <HAL_RCC_ClockConfig+0x1b8>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0307 	and.w	r3, r3, #7
 8002406:	683a      	ldr	r2, [r7, #0]
 8002408:	429a      	cmp	r2, r3
 800240a:	d001      	beq.n	8002410 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e0b8      	b.n	8002582 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d020      	beq.n	800245e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0304 	and.w	r3, r3, #4
 8002424:	2b00      	cmp	r3, #0
 8002426:	d005      	beq.n	8002434 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002428:	4b59      	ldr	r3, [pc, #356]	@ (8002590 <HAL_RCC_ClockConfig+0x1bc>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	4a58      	ldr	r2, [pc, #352]	@ (8002590 <HAL_RCC_ClockConfig+0x1bc>)
 800242e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002432:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0308 	and.w	r3, r3, #8
 800243c:	2b00      	cmp	r3, #0
 800243e:	d005      	beq.n	800244c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002440:	4b53      	ldr	r3, [pc, #332]	@ (8002590 <HAL_RCC_ClockConfig+0x1bc>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	4a52      	ldr	r2, [pc, #328]	@ (8002590 <HAL_RCC_ClockConfig+0x1bc>)
 8002446:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800244a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800244c:	4b50      	ldr	r3, [pc, #320]	@ (8002590 <HAL_RCC_ClockConfig+0x1bc>)
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	494d      	ldr	r1, [pc, #308]	@ (8002590 <HAL_RCC_ClockConfig+0x1bc>)
 800245a:	4313      	orrs	r3, r2
 800245c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	2b00      	cmp	r3, #0
 8002468:	d044      	beq.n	80024f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d107      	bne.n	8002482 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002472:	4b47      	ldr	r3, [pc, #284]	@ (8002590 <HAL_RCC_ClockConfig+0x1bc>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d119      	bne.n	80024b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e07f      	b.n	8002582 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	2b02      	cmp	r3, #2
 8002488:	d003      	beq.n	8002492 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800248e:	2b03      	cmp	r3, #3
 8002490:	d107      	bne.n	80024a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002492:	4b3f      	ldr	r3, [pc, #252]	@ (8002590 <HAL_RCC_ClockConfig+0x1bc>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d109      	bne.n	80024b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e06f      	b.n	8002582 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a2:	4b3b      	ldr	r3, [pc, #236]	@ (8002590 <HAL_RCC_ClockConfig+0x1bc>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e067      	b.n	8002582 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024b2:	4b37      	ldr	r3, [pc, #220]	@ (8002590 <HAL_RCC_ClockConfig+0x1bc>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f023 0203 	bic.w	r2, r3, #3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	4934      	ldr	r1, [pc, #208]	@ (8002590 <HAL_RCC_ClockConfig+0x1bc>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024c4:	f7fe fda8 	bl	8001018 <HAL_GetTick>
 80024c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ca:	e00a      	b.n	80024e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024cc:	f7fe fda4 	bl	8001018 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024da:	4293      	cmp	r3, r2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e04f      	b.n	8002582 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024e2:	4b2b      	ldr	r3, [pc, #172]	@ (8002590 <HAL_RCC_ClockConfig+0x1bc>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f003 020c 	and.w	r2, r3, #12
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d1eb      	bne.n	80024cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024f4:	4b25      	ldr	r3, [pc, #148]	@ (800258c <HAL_RCC_ClockConfig+0x1b8>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d20c      	bcs.n	800251c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002502:	4b22      	ldr	r3, [pc, #136]	@ (800258c <HAL_RCC_ClockConfig+0x1b8>)
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	b2d2      	uxtb	r2, r2
 8002508:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800250a:	4b20      	ldr	r3, [pc, #128]	@ (800258c <HAL_RCC_ClockConfig+0x1b8>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0307 	and.w	r3, r3, #7
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	429a      	cmp	r2, r3
 8002516:	d001      	beq.n	800251c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e032      	b.n	8002582 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0304 	and.w	r3, r3, #4
 8002524:	2b00      	cmp	r3, #0
 8002526:	d008      	beq.n	800253a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002528:	4b19      	ldr	r3, [pc, #100]	@ (8002590 <HAL_RCC_ClockConfig+0x1bc>)
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	4916      	ldr	r1, [pc, #88]	@ (8002590 <HAL_RCC_ClockConfig+0x1bc>)
 8002536:	4313      	orrs	r3, r2
 8002538:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0308 	and.w	r3, r3, #8
 8002542:	2b00      	cmp	r3, #0
 8002544:	d009      	beq.n	800255a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002546:	4b12      	ldr	r3, [pc, #72]	@ (8002590 <HAL_RCC_ClockConfig+0x1bc>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	490e      	ldr	r1, [pc, #56]	@ (8002590 <HAL_RCC_ClockConfig+0x1bc>)
 8002556:	4313      	orrs	r3, r2
 8002558:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800255a:	f000 f821 	bl	80025a0 <HAL_RCC_GetSysClockFreq>
 800255e:	4602      	mov	r2, r0
 8002560:	4b0b      	ldr	r3, [pc, #44]	@ (8002590 <HAL_RCC_ClockConfig+0x1bc>)
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	091b      	lsrs	r3, r3, #4
 8002566:	f003 030f 	and.w	r3, r3, #15
 800256a:	490a      	ldr	r1, [pc, #40]	@ (8002594 <HAL_RCC_ClockConfig+0x1c0>)
 800256c:	5ccb      	ldrb	r3, [r1, r3]
 800256e:	fa22 f303 	lsr.w	r3, r2, r3
 8002572:	4a09      	ldr	r2, [pc, #36]	@ (8002598 <HAL_RCC_ClockConfig+0x1c4>)
 8002574:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002576:	4b09      	ldr	r3, [pc, #36]	@ (800259c <HAL_RCC_ClockConfig+0x1c8>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4618      	mov	r0, r3
 800257c:	f7fe fc02 	bl	8000d84 <HAL_InitTick>

  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	40023c00 	.word	0x40023c00
 8002590:	40023800 	.word	0x40023800
 8002594:	080043ec 	.word	0x080043ec
 8002598:	20000004 	.word	0x20000004
 800259c:	20000008 	.word	0x20000008

080025a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025a4:	b094      	sub	sp, #80	@ 0x50
 80025a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80025a8:	2300      	movs	r3, #0
 80025aa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80025ac:	2300      	movs	r3, #0
 80025ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80025b0:	2300      	movs	r3, #0
 80025b2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80025b4:	2300      	movs	r3, #0
 80025b6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025b8:	4b79      	ldr	r3, [pc, #484]	@ (80027a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f003 030c 	and.w	r3, r3, #12
 80025c0:	2b08      	cmp	r3, #8
 80025c2:	d00d      	beq.n	80025e0 <HAL_RCC_GetSysClockFreq+0x40>
 80025c4:	2b08      	cmp	r3, #8
 80025c6:	f200 80e1 	bhi.w	800278c <HAL_RCC_GetSysClockFreq+0x1ec>
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d002      	beq.n	80025d4 <HAL_RCC_GetSysClockFreq+0x34>
 80025ce:	2b04      	cmp	r3, #4
 80025d0:	d003      	beq.n	80025da <HAL_RCC_GetSysClockFreq+0x3a>
 80025d2:	e0db      	b.n	800278c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025d4:	4b73      	ldr	r3, [pc, #460]	@ (80027a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80025d6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80025d8:	e0db      	b.n	8002792 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025da:	4b73      	ldr	r3, [pc, #460]	@ (80027a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80025dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80025de:	e0d8      	b.n	8002792 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025e0:	4b6f      	ldr	r3, [pc, #444]	@ (80027a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025e8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025ea:	4b6d      	ldr	r3, [pc, #436]	@ (80027a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d063      	beq.n	80026be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025f6:	4b6a      	ldr	r3, [pc, #424]	@ (80027a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	099b      	lsrs	r3, r3, #6
 80025fc:	2200      	movs	r2, #0
 80025fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002600:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002604:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002608:	633b      	str	r3, [r7, #48]	@ 0x30
 800260a:	2300      	movs	r3, #0
 800260c:	637b      	str	r3, [r7, #52]	@ 0x34
 800260e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002612:	4622      	mov	r2, r4
 8002614:	462b      	mov	r3, r5
 8002616:	f04f 0000 	mov.w	r0, #0
 800261a:	f04f 0100 	mov.w	r1, #0
 800261e:	0159      	lsls	r1, r3, #5
 8002620:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002624:	0150      	lsls	r0, r2, #5
 8002626:	4602      	mov	r2, r0
 8002628:	460b      	mov	r3, r1
 800262a:	4621      	mov	r1, r4
 800262c:	1a51      	subs	r1, r2, r1
 800262e:	6139      	str	r1, [r7, #16]
 8002630:	4629      	mov	r1, r5
 8002632:	eb63 0301 	sbc.w	r3, r3, r1
 8002636:	617b      	str	r3, [r7, #20]
 8002638:	f04f 0200 	mov.w	r2, #0
 800263c:	f04f 0300 	mov.w	r3, #0
 8002640:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002644:	4659      	mov	r1, fp
 8002646:	018b      	lsls	r3, r1, #6
 8002648:	4651      	mov	r1, sl
 800264a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800264e:	4651      	mov	r1, sl
 8002650:	018a      	lsls	r2, r1, #6
 8002652:	4651      	mov	r1, sl
 8002654:	ebb2 0801 	subs.w	r8, r2, r1
 8002658:	4659      	mov	r1, fp
 800265a:	eb63 0901 	sbc.w	r9, r3, r1
 800265e:	f04f 0200 	mov.w	r2, #0
 8002662:	f04f 0300 	mov.w	r3, #0
 8002666:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800266a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800266e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002672:	4690      	mov	r8, r2
 8002674:	4699      	mov	r9, r3
 8002676:	4623      	mov	r3, r4
 8002678:	eb18 0303 	adds.w	r3, r8, r3
 800267c:	60bb      	str	r3, [r7, #8]
 800267e:	462b      	mov	r3, r5
 8002680:	eb49 0303 	adc.w	r3, r9, r3
 8002684:	60fb      	str	r3, [r7, #12]
 8002686:	f04f 0200 	mov.w	r2, #0
 800268a:	f04f 0300 	mov.w	r3, #0
 800268e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002692:	4629      	mov	r1, r5
 8002694:	024b      	lsls	r3, r1, #9
 8002696:	4621      	mov	r1, r4
 8002698:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800269c:	4621      	mov	r1, r4
 800269e:	024a      	lsls	r2, r1, #9
 80026a0:	4610      	mov	r0, r2
 80026a2:	4619      	mov	r1, r3
 80026a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026a6:	2200      	movs	r2, #0
 80026a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80026aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80026ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80026b0:	f7fd fde6 	bl	8000280 <__aeabi_uldivmod>
 80026b4:	4602      	mov	r2, r0
 80026b6:	460b      	mov	r3, r1
 80026b8:	4613      	mov	r3, r2
 80026ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80026bc:	e058      	b.n	8002770 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026be:	4b38      	ldr	r3, [pc, #224]	@ (80027a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	099b      	lsrs	r3, r3, #6
 80026c4:	2200      	movs	r2, #0
 80026c6:	4618      	mov	r0, r3
 80026c8:	4611      	mov	r1, r2
 80026ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80026ce:	623b      	str	r3, [r7, #32]
 80026d0:	2300      	movs	r3, #0
 80026d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80026d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80026d8:	4642      	mov	r2, r8
 80026da:	464b      	mov	r3, r9
 80026dc:	f04f 0000 	mov.w	r0, #0
 80026e0:	f04f 0100 	mov.w	r1, #0
 80026e4:	0159      	lsls	r1, r3, #5
 80026e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026ea:	0150      	lsls	r0, r2, #5
 80026ec:	4602      	mov	r2, r0
 80026ee:	460b      	mov	r3, r1
 80026f0:	4641      	mov	r1, r8
 80026f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80026f6:	4649      	mov	r1, r9
 80026f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80026fc:	f04f 0200 	mov.w	r2, #0
 8002700:	f04f 0300 	mov.w	r3, #0
 8002704:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002708:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800270c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002710:	ebb2 040a 	subs.w	r4, r2, sl
 8002714:	eb63 050b 	sbc.w	r5, r3, fp
 8002718:	f04f 0200 	mov.w	r2, #0
 800271c:	f04f 0300 	mov.w	r3, #0
 8002720:	00eb      	lsls	r3, r5, #3
 8002722:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002726:	00e2      	lsls	r2, r4, #3
 8002728:	4614      	mov	r4, r2
 800272a:	461d      	mov	r5, r3
 800272c:	4643      	mov	r3, r8
 800272e:	18e3      	adds	r3, r4, r3
 8002730:	603b      	str	r3, [r7, #0]
 8002732:	464b      	mov	r3, r9
 8002734:	eb45 0303 	adc.w	r3, r5, r3
 8002738:	607b      	str	r3, [r7, #4]
 800273a:	f04f 0200 	mov.w	r2, #0
 800273e:	f04f 0300 	mov.w	r3, #0
 8002742:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002746:	4629      	mov	r1, r5
 8002748:	028b      	lsls	r3, r1, #10
 800274a:	4621      	mov	r1, r4
 800274c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002750:	4621      	mov	r1, r4
 8002752:	028a      	lsls	r2, r1, #10
 8002754:	4610      	mov	r0, r2
 8002756:	4619      	mov	r1, r3
 8002758:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800275a:	2200      	movs	r2, #0
 800275c:	61bb      	str	r3, [r7, #24]
 800275e:	61fa      	str	r2, [r7, #28]
 8002760:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002764:	f7fd fd8c 	bl	8000280 <__aeabi_uldivmod>
 8002768:	4602      	mov	r2, r0
 800276a:	460b      	mov	r3, r1
 800276c:	4613      	mov	r3, r2
 800276e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002770:	4b0b      	ldr	r3, [pc, #44]	@ (80027a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	0c1b      	lsrs	r3, r3, #16
 8002776:	f003 0303 	and.w	r3, r3, #3
 800277a:	3301      	adds	r3, #1
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002780:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002782:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002784:	fbb2 f3f3 	udiv	r3, r2, r3
 8002788:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800278a:	e002      	b.n	8002792 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800278c:	4b05      	ldr	r3, [pc, #20]	@ (80027a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800278e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002790:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002792:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002794:	4618      	mov	r0, r3
 8002796:	3750      	adds	r7, #80	@ 0x50
 8002798:	46bd      	mov	sp, r7
 800279a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800279e:	bf00      	nop
 80027a0:	40023800 	.word	0x40023800
 80027a4:	00f42400 	.word	0x00f42400
 80027a8:	007a1200 	.word	0x007a1200

080027ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027b0:	4b03      	ldr	r3, [pc, #12]	@ (80027c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80027b2:	681b      	ldr	r3, [r3, #0]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	20000004 	.word	0x20000004

080027c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027c8:	f7ff fff0 	bl	80027ac <HAL_RCC_GetHCLKFreq>
 80027cc:	4602      	mov	r2, r0
 80027ce:	4b05      	ldr	r3, [pc, #20]	@ (80027e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	0a9b      	lsrs	r3, r3, #10
 80027d4:	f003 0307 	and.w	r3, r3, #7
 80027d8:	4903      	ldr	r1, [pc, #12]	@ (80027e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027da:	5ccb      	ldrb	r3, [r1, r3]
 80027dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	40023800 	.word	0x40023800
 80027e8:	080043fc 	.word	0x080043fc

080027ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027f0:	f7ff ffdc 	bl	80027ac <HAL_RCC_GetHCLKFreq>
 80027f4:	4602      	mov	r2, r0
 80027f6:	4b05      	ldr	r3, [pc, #20]	@ (800280c <HAL_RCC_GetPCLK2Freq+0x20>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	0b5b      	lsrs	r3, r3, #13
 80027fc:	f003 0307 	and.w	r3, r3, #7
 8002800:	4903      	ldr	r1, [pc, #12]	@ (8002810 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002802:	5ccb      	ldrb	r3, [r1, r3]
 8002804:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002808:	4618      	mov	r0, r3
 800280a:	bd80      	pop	{r7, pc}
 800280c:	40023800 	.word	0x40023800
 8002810:	080043fc 	.word	0x080043fc

08002814 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	220f      	movs	r2, #15
 8002822:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002824:	4b12      	ldr	r3, [pc, #72]	@ (8002870 <HAL_RCC_GetClockConfig+0x5c>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f003 0203 	and.w	r2, r3, #3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002830:	4b0f      	ldr	r3, [pc, #60]	@ (8002870 <HAL_RCC_GetClockConfig+0x5c>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800283c:	4b0c      	ldr	r3, [pc, #48]	@ (8002870 <HAL_RCC_GetClockConfig+0x5c>)
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002848:	4b09      	ldr	r3, [pc, #36]	@ (8002870 <HAL_RCC_GetClockConfig+0x5c>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	08db      	lsrs	r3, r3, #3
 800284e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002856:	4b07      	ldr	r3, [pc, #28]	@ (8002874 <HAL_RCC_GetClockConfig+0x60>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0207 	and.w	r2, r3, #7
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	601a      	str	r2, [r3, #0]
}
 8002862:	bf00      	nop
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	40023800 	.word	0x40023800
 8002874:	40023c00 	.word	0x40023c00

08002878 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d101      	bne.n	800288a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e041      	b.n	800290e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d106      	bne.n	80028a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 f839 	bl	8002916 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2202      	movs	r2, #2
 80028a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	3304      	adds	r3, #4
 80028b4:	4619      	mov	r1, r3
 80028b6:	4610      	mov	r0, r2
 80028b8:	f000 f9c0 	bl	8002c3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002916:	b480      	push	{r7}
 8002918:	b083      	sub	sp, #12
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800291e:	bf00      	nop
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
	...

0800292c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800293a:	b2db      	uxtb	r3, r3
 800293c:	2b01      	cmp	r3, #1
 800293e:	d001      	beq.n	8002944 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e04e      	b.n	80029e2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2202      	movs	r2, #2
 8002948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	68da      	ldr	r2, [r3, #12]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f042 0201 	orr.w	r2, r2, #1
 800295a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a23      	ldr	r2, [pc, #140]	@ (80029f0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d022      	beq.n	80029ac <HAL_TIM_Base_Start_IT+0x80>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800296e:	d01d      	beq.n	80029ac <HAL_TIM_Base_Start_IT+0x80>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a1f      	ldr	r2, [pc, #124]	@ (80029f4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d018      	beq.n	80029ac <HAL_TIM_Base_Start_IT+0x80>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a1e      	ldr	r2, [pc, #120]	@ (80029f8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d013      	beq.n	80029ac <HAL_TIM_Base_Start_IT+0x80>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a1c      	ldr	r2, [pc, #112]	@ (80029fc <HAL_TIM_Base_Start_IT+0xd0>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d00e      	beq.n	80029ac <HAL_TIM_Base_Start_IT+0x80>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a1b      	ldr	r2, [pc, #108]	@ (8002a00 <HAL_TIM_Base_Start_IT+0xd4>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d009      	beq.n	80029ac <HAL_TIM_Base_Start_IT+0x80>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a19      	ldr	r2, [pc, #100]	@ (8002a04 <HAL_TIM_Base_Start_IT+0xd8>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d004      	beq.n	80029ac <HAL_TIM_Base_Start_IT+0x80>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a18      	ldr	r2, [pc, #96]	@ (8002a08 <HAL_TIM_Base_Start_IT+0xdc>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d111      	bne.n	80029d0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 0307 	and.w	r3, r3, #7
 80029b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2b06      	cmp	r3, #6
 80029bc:	d010      	beq.n	80029e0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f042 0201 	orr.w	r2, r2, #1
 80029cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029ce:	e007      	b.n	80029e0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f042 0201 	orr.w	r2, r2, #1
 80029de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3714      	adds	r7, #20
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	40010000 	.word	0x40010000
 80029f4:	40000400 	.word	0x40000400
 80029f8:	40000800 	.word	0x40000800
 80029fc:	40000c00 	.word	0x40000c00
 8002a00:	40010400 	.word	0x40010400
 8002a04:	40014000 	.word	0x40014000
 8002a08:	40001800 	.word	0x40001800

08002a0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d020      	beq.n	8002a70 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d01b      	beq.n	8002a70 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f06f 0202 	mvn.w	r2, #2
 8002a40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2201      	movs	r2, #1
 8002a46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	f003 0303 	and.w	r3, r3, #3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 f8d2 	bl	8002c00 <HAL_TIM_IC_CaptureCallback>
 8002a5c:	e005      	b.n	8002a6a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 f8c4 	bl	8002bec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f000 f8d5 	bl	8002c14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	f003 0304 	and.w	r3, r3, #4
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d020      	beq.n	8002abc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f003 0304 	and.w	r3, r3, #4
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d01b      	beq.n	8002abc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f06f 0204 	mvn.w	r2, #4
 8002a8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2202      	movs	r2, #2
 8002a92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d003      	beq.n	8002aaa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 f8ac 	bl	8002c00 <HAL_TIM_IC_CaptureCallback>
 8002aa8:	e005      	b.n	8002ab6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 f89e 	bl	8002bec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 f8af 	bl	8002c14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	f003 0308 	and.w	r3, r3, #8
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d020      	beq.n	8002b08 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f003 0308 	and.w	r3, r3, #8
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d01b      	beq.n	8002b08 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f06f 0208 	mvn.w	r2, #8
 8002ad8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2204      	movs	r2, #4
 8002ade:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	69db      	ldr	r3, [r3, #28]
 8002ae6:	f003 0303 	and.w	r3, r3, #3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 f886 	bl	8002c00 <HAL_TIM_IC_CaptureCallback>
 8002af4:	e005      	b.n	8002b02 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f878 	bl	8002bec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 f889 	bl	8002c14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	f003 0310 	and.w	r3, r3, #16
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d020      	beq.n	8002b54 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f003 0310 	and.w	r3, r3, #16
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d01b      	beq.n	8002b54 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f06f 0210 	mvn.w	r2, #16
 8002b24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2208      	movs	r2, #8
 8002b2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	69db      	ldr	r3, [r3, #28]
 8002b32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 f860 	bl	8002c00 <HAL_TIM_IC_CaptureCallback>
 8002b40:	e005      	b.n	8002b4e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 f852 	bl	8002bec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f000 f863 	bl	8002c14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00c      	beq.n	8002b78 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f003 0301 	and.w	r3, r3, #1
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d007      	beq.n	8002b78 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f06f 0201 	mvn.w	r2, #1
 8002b70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f7fe f836 	bl	8000be4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00c      	beq.n	8002b9c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d007      	beq.n	8002b9c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002b94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 f900 	bl	8002d9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00c      	beq.n	8002bc0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d007      	beq.n	8002bc0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 f834 	bl	8002c28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	f003 0320 	and.w	r3, r3, #32
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00c      	beq.n	8002be4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f003 0320 	and.w	r3, r3, #32
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d007      	beq.n	8002be4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f06f 0220 	mvn.w	r2, #32
 8002bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 f8d2 	bl	8002d88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002be4:	bf00      	nop
 8002be6:	3710      	adds	r7, #16
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4a43      	ldr	r2, [pc, #268]	@ (8002d5c <TIM_Base_SetConfig+0x120>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d013      	beq.n	8002c7c <TIM_Base_SetConfig+0x40>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c5a:	d00f      	beq.n	8002c7c <TIM_Base_SetConfig+0x40>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a40      	ldr	r2, [pc, #256]	@ (8002d60 <TIM_Base_SetConfig+0x124>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d00b      	beq.n	8002c7c <TIM_Base_SetConfig+0x40>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a3f      	ldr	r2, [pc, #252]	@ (8002d64 <TIM_Base_SetConfig+0x128>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d007      	beq.n	8002c7c <TIM_Base_SetConfig+0x40>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4a3e      	ldr	r2, [pc, #248]	@ (8002d68 <TIM_Base_SetConfig+0x12c>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d003      	beq.n	8002c7c <TIM_Base_SetConfig+0x40>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4a3d      	ldr	r2, [pc, #244]	@ (8002d6c <TIM_Base_SetConfig+0x130>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d108      	bne.n	8002c8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a32      	ldr	r2, [pc, #200]	@ (8002d5c <TIM_Base_SetConfig+0x120>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d02b      	beq.n	8002cee <TIM_Base_SetConfig+0xb2>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c9c:	d027      	beq.n	8002cee <TIM_Base_SetConfig+0xb2>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a2f      	ldr	r2, [pc, #188]	@ (8002d60 <TIM_Base_SetConfig+0x124>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d023      	beq.n	8002cee <TIM_Base_SetConfig+0xb2>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a2e      	ldr	r2, [pc, #184]	@ (8002d64 <TIM_Base_SetConfig+0x128>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d01f      	beq.n	8002cee <TIM_Base_SetConfig+0xb2>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a2d      	ldr	r2, [pc, #180]	@ (8002d68 <TIM_Base_SetConfig+0x12c>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d01b      	beq.n	8002cee <TIM_Base_SetConfig+0xb2>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a2c      	ldr	r2, [pc, #176]	@ (8002d6c <TIM_Base_SetConfig+0x130>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d017      	beq.n	8002cee <TIM_Base_SetConfig+0xb2>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a2b      	ldr	r2, [pc, #172]	@ (8002d70 <TIM_Base_SetConfig+0x134>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d013      	beq.n	8002cee <TIM_Base_SetConfig+0xb2>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a2a      	ldr	r2, [pc, #168]	@ (8002d74 <TIM_Base_SetConfig+0x138>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d00f      	beq.n	8002cee <TIM_Base_SetConfig+0xb2>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a29      	ldr	r2, [pc, #164]	@ (8002d78 <TIM_Base_SetConfig+0x13c>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d00b      	beq.n	8002cee <TIM_Base_SetConfig+0xb2>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a28      	ldr	r2, [pc, #160]	@ (8002d7c <TIM_Base_SetConfig+0x140>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d007      	beq.n	8002cee <TIM_Base_SetConfig+0xb2>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a27      	ldr	r2, [pc, #156]	@ (8002d80 <TIM_Base_SetConfig+0x144>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d003      	beq.n	8002cee <TIM_Base_SetConfig+0xb2>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a26      	ldr	r2, [pc, #152]	@ (8002d84 <TIM_Base_SetConfig+0x148>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d108      	bne.n	8002d00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	689a      	ldr	r2, [r3, #8]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a0e      	ldr	r2, [pc, #56]	@ (8002d5c <TIM_Base_SetConfig+0x120>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d003      	beq.n	8002d2e <TIM_Base_SetConfig+0xf2>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a10      	ldr	r2, [pc, #64]	@ (8002d6c <TIM_Base_SetConfig+0x130>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d103      	bne.n	8002d36 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	691a      	ldr	r2, [r3, #16]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f043 0204 	orr.w	r2, r3, #4
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	601a      	str	r2, [r3, #0]
}
 8002d4e:	bf00      	nop
 8002d50:	3714      	adds	r7, #20
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	40010000 	.word	0x40010000
 8002d60:	40000400 	.word	0x40000400
 8002d64:	40000800 	.word	0x40000800
 8002d68:	40000c00 	.word	0x40000c00
 8002d6c:	40010400 	.word	0x40010400
 8002d70:	40014000 	.word	0x40014000
 8002d74:	40014400 	.word	0x40014400
 8002d78:	40014800 	.word	0x40014800
 8002d7c:	40001800 	.word	0x40001800
 8002d80:	40001c00 	.word	0x40001c00
 8002d84:	40002000 	.word	0x40002000

08002d88 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e042      	b.n	8002e48 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d106      	bne.n	8002ddc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f7fd ff8c 	bl	8000cf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2224      	movs	r2, #36	@ 0x24
 8002de0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68da      	ldr	r2, [r3, #12]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002df2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 f973 	bl	80030e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	691a      	ldr	r2, [r3, #16]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	695a      	ldr	r2, [r3, #20]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68da      	ldr	r2, [r3, #12]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2220      	movs	r2, #32
 8002e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2220      	movs	r2, #32
 8002e3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3708      	adds	r7, #8
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b08a      	sub	sp, #40	@ 0x28
 8002e54:	af02      	add	r7, sp, #8
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	603b      	str	r3, [r7, #0]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e60:	2300      	movs	r3, #0
 8002e62:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	2b20      	cmp	r3, #32
 8002e6e:	d175      	bne.n	8002f5c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d002      	beq.n	8002e7c <HAL_UART_Transmit+0x2c>
 8002e76:	88fb      	ldrh	r3, [r7, #6]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d101      	bne.n	8002e80 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e06e      	b.n	8002f5e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2221      	movs	r2, #33	@ 0x21
 8002e8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e8e:	f7fe f8c3 	bl	8001018 <HAL_GetTick>
 8002e92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	88fa      	ldrh	r2, [r7, #6]
 8002e98:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	88fa      	ldrh	r2, [r7, #6]
 8002e9e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ea8:	d108      	bne.n	8002ebc <HAL_UART_Transmit+0x6c>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d104      	bne.n	8002ebc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	61bb      	str	r3, [r7, #24]
 8002eba:	e003      	b.n	8002ec4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ec4:	e02e      	b.n	8002f24 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	9300      	str	r3, [sp, #0]
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	2180      	movs	r1, #128	@ 0x80
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f000 f848 	bl	8002f66 <UART_WaitOnFlagUntilTimeout>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d005      	beq.n	8002ee8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2220      	movs	r2, #32
 8002ee0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e03a      	b.n	8002f5e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10b      	bne.n	8002f06 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	881b      	ldrh	r3, [r3, #0]
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002efc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	3302      	adds	r3, #2
 8002f02:	61bb      	str	r3, [r7, #24]
 8002f04:	e007      	b.n	8002f16 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	781a      	ldrb	r2, [r3, #0]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	3301      	adds	r3, #1
 8002f14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1cb      	bne.n	8002ec6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	9300      	str	r3, [sp, #0]
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	2200      	movs	r2, #0
 8002f36:	2140      	movs	r1, #64	@ 0x40
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f000 f814 	bl	8002f66 <UART_WaitOnFlagUntilTimeout>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d005      	beq.n	8002f50 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2220      	movs	r2, #32
 8002f48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e006      	b.n	8002f5e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2220      	movs	r2, #32
 8002f54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	e000      	b.n	8002f5e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002f5c:	2302      	movs	r3, #2
  }
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3720      	adds	r7, #32
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b086      	sub	sp, #24
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	60f8      	str	r0, [r7, #12]
 8002f6e:	60b9      	str	r1, [r7, #8]
 8002f70:	603b      	str	r3, [r7, #0]
 8002f72:	4613      	mov	r3, r2
 8002f74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f76:	e03b      	b.n	8002ff0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f78:	6a3b      	ldr	r3, [r7, #32]
 8002f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f7e:	d037      	beq.n	8002ff0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f80:	f7fe f84a 	bl	8001018 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	6a3a      	ldr	r2, [r7, #32]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d302      	bcc.n	8002f96 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f90:	6a3b      	ldr	r3, [r7, #32]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e03a      	b.n	8003010 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	f003 0304 	and.w	r3, r3, #4
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d023      	beq.n	8002ff0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	2b80      	cmp	r3, #128	@ 0x80
 8002fac:	d020      	beq.n	8002ff0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	2b40      	cmp	r3, #64	@ 0x40
 8002fb2:	d01d      	beq.n	8002ff0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0308 	and.w	r3, r3, #8
 8002fbe:	2b08      	cmp	r3, #8
 8002fc0:	d116      	bne.n	8002ff0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	617b      	str	r3, [r7, #20]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	617b      	str	r3, [r7, #20]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	617b      	str	r3, [r7, #20]
 8002fd6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f000 f81d 	bl	8003018 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2208      	movs	r2, #8
 8002fe2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e00f      	b.n	8003010 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	68ba      	ldr	r2, [r7, #8]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	bf0c      	ite	eq
 8003000:	2301      	moveq	r3, #1
 8003002:	2300      	movne	r3, #0
 8003004:	b2db      	uxtb	r3, r3
 8003006:	461a      	mov	r2, r3
 8003008:	79fb      	ldrb	r3, [r7, #7]
 800300a:	429a      	cmp	r2, r3
 800300c:	d0b4      	beq.n	8002f78 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	3718      	adds	r7, #24
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003018:	b480      	push	{r7}
 800301a:	b095      	sub	sp, #84	@ 0x54
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	330c      	adds	r3, #12
 8003026:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003028:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800302a:	e853 3f00 	ldrex	r3, [r3]
 800302e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003032:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003036:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	330c      	adds	r3, #12
 800303e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003040:	643a      	str	r2, [r7, #64]	@ 0x40
 8003042:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003044:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003046:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003048:	e841 2300 	strex	r3, r2, [r1]
 800304c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800304e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003050:	2b00      	cmp	r3, #0
 8003052:	d1e5      	bne.n	8003020 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	3314      	adds	r3, #20
 800305a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800305c:	6a3b      	ldr	r3, [r7, #32]
 800305e:	e853 3f00 	ldrex	r3, [r3]
 8003062:	61fb      	str	r3, [r7, #28]
   return(result);
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	f023 0301 	bic.w	r3, r3, #1
 800306a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	3314      	adds	r3, #20
 8003072:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003074:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003076:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003078:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800307a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800307c:	e841 2300 	strex	r3, r2, [r1]
 8003080:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1e5      	bne.n	8003054 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800308c:	2b01      	cmp	r3, #1
 800308e:	d119      	bne.n	80030c4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	330c      	adds	r3, #12
 8003096:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	e853 3f00 	ldrex	r3, [r3]
 800309e:	60bb      	str	r3, [r7, #8]
   return(result);
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	f023 0310 	bic.w	r3, r3, #16
 80030a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	330c      	adds	r3, #12
 80030ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80030b0:	61ba      	str	r2, [r7, #24]
 80030b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b4:	6979      	ldr	r1, [r7, #20]
 80030b6:	69ba      	ldr	r2, [r7, #24]
 80030b8:	e841 2300 	strex	r3, r2, [r1]
 80030bc:	613b      	str	r3, [r7, #16]
   return(result);
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1e5      	bne.n	8003090 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2220      	movs	r2, #32
 80030c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80030d2:	bf00      	nop
 80030d4:	3754      	adds	r7, #84	@ 0x54
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
	...

080030e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030e4:	b0c0      	sub	sp, #256	@ 0x100
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80030f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030fc:	68d9      	ldr	r1, [r3, #12]
 80030fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	ea40 0301 	orr.w	r3, r0, r1
 8003108:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800310a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800310e:	689a      	ldr	r2, [r3, #8]
 8003110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	431a      	orrs	r2, r3
 8003118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	431a      	orrs	r2, r3
 8003120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	4313      	orrs	r3, r2
 8003128:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800312c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003138:	f021 010c 	bic.w	r1, r1, #12
 800313c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003146:	430b      	orrs	r3, r1
 8003148:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800314a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800315a:	6999      	ldr	r1, [r3, #24]
 800315c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	ea40 0301 	orr.w	r3, r0, r1
 8003166:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	4b8f      	ldr	r3, [pc, #572]	@ (80033ac <UART_SetConfig+0x2cc>)
 8003170:	429a      	cmp	r2, r3
 8003172:	d005      	beq.n	8003180 <UART_SetConfig+0xa0>
 8003174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	4b8d      	ldr	r3, [pc, #564]	@ (80033b0 <UART_SetConfig+0x2d0>)
 800317c:	429a      	cmp	r2, r3
 800317e:	d104      	bne.n	800318a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003180:	f7ff fb34 	bl	80027ec <HAL_RCC_GetPCLK2Freq>
 8003184:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003188:	e003      	b.n	8003192 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800318a:	f7ff fb1b 	bl	80027c4 <HAL_RCC_GetPCLK1Freq>
 800318e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003196:	69db      	ldr	r3, [r3, #28]
 8003198:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800319c:	f040 810c 	bne.w	80033b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80031a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031a4:	2200      	movs	r2, #0
 80031a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80031aa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80031ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80031b2:	4622      	mov	r2, r4
 80031b4:	462b      	mov	r3, r5
 80031b6:	1891      	adds	r1, r2, r2
 80031b8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80031ba:	415b      	adcs	r3, r3
 80031bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80031be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80031c2:	4621      	mov	r1, r4
 80031c4:	eb12 0801 	adds.w	r8, r2, r1
 80031c8:	4629      	mov	r1, r5
 80031ca:	eb43 0901 	adc.w	r9, r3, r1
 80031ce:	f04f 0200 	mov.w	r2, #0
 80031d2:	f04f 0300 	mov.w	r3, #0
 80031d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031e2:	4690      	mov	r8, r2
 80031e4:	4699      	mov	r9, r3
 80031e6:	4623      	mov	r3, r4
 80031e8:	eb18 0303 	adds.w	r3, r8, r3
 80031ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80031f0:	462b      	mov	r3, r5
 80031f2:	eb49 0303 	adc.w	r3, r9, r3
 80031f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80031fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003206:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800320a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800320e:	460b      	mov	r3, r1
 8003210:	18db      	adds	r3, r3, r3
 8003212:	653b      	str	r3, [r7, #80]	@ 0x50
 8003214:	4613      	mov	r3, r2
 8003216:	eb42 0303 	adc.w	r3, r2, r3
 800321a:	657b      	str	r3, [r7, #84]	@ 0x54
 800321c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003220:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003224:	f7fd f82c 	bl	8000280 <__aeabi_uldivmod>
 8003228:	4602      	mov	r2, r0
 800322a:	460b      	mov	r3, r1
 800322c:	4b61      	ldr	r3, [pc, #388]	@ (80033b4 <UART_SetConfig+0x2d4>)
 800322e:	fba3 2302 	umull	r2, r3, r3, r2
 8003232:	095b      	lsrs	r3, r3, #5
 8003234:	011c      	lsls	r4, r3, #4
 8003236:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800323a:	2200      	movs	r2, #0
 800323c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003240:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003244:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003248:	4642      	mov	r2, r8
 800324a:	464b      	mov	r3, r9
 800324c:	1891      	adds	r1, r2, r2
 800324e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003250:	415b      	adcs	r3, r3
 8003252:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003254:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003258:	4641      	mov	r1, r8
 800325a:	eb12 0a01 	adds.w	sl, r2, r1
 800325e:	4649      	mov	r1, r9
 8003260:	eb43 0b01 	adc.w	fp, r3, r1
 8003264:	f04f 0200 	mov.w	r2, #0
 8003268:	f04f 0300 	mov.w	r3, #0
 800326c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003270:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003274:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003278:	4692      	mov	sl, r2
 800327a:	469b      	mov	fp, r3
 800327c:	4643      	mov	r3, r8
 800327e:	eb1a 0303 	adds.w	r3, sl, r3
 8003282:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003286:	464b      	mov	r3, r9
 8003288:	eb4b 0303 	adc.w	r3, fp, r3
 800328c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800329c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80032a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80032a4:	460b      	mov	r3, r1
 80032a6:	18db      	adds	r3, r3, r3
 80032a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80032aa:	4613      	mov	r3, r2
 80032ac:	eb42 0303 	adc.w	r3, r2, r3
 80032b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80032b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80032b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80032ba:	f7fc ffe1 	bl	8000280 <__aeabi_uldivmod>
 80032be:	4602      	mov	r2, r0
 80032c0:	460b      	mov	r3, r1
 80032c2:	4611      	mov	r1, r2
 80032c4:	4b3b      	ldr	r3, [pc, #236]	@ (80033b4 <UART_SetConfig+0x2d4>)
 80032c6:	fba3 2301 	umull	r2, r3, r3, r1
 80032ca:	095b      	lsrs	r3, r3, #5
 80032cc:	2264      	movs	r2, #100	@ 0x64
 80032ce:	fb02 f303 	mul.w	r3, r2, r3
 80032d2:	1acb      	subs	r3, r1, r3
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80032da:	4b36      	ldr	r3, [pc, #216]	@ (80033b4 <UART_SetConfig+0x2d4>)
 80032dc:	fba3 2302 	umull	r2, r3, r3, r2
 80032e0:	095b      	lsrs	r3, r3, #5
 80032e2:	005b      	lsls	r3, r3, #1
 80032e4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80032e8:	441c      	add	r4, r3
 80032ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032ee:	2200      	movs	r2, #0
 80032f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80032f4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80032f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80032fc:	4642      	mov	r2, r8
 80032fe:	464b      	mov	r3, r9
 8003300:	1891      	adds	r1, r2, r2
 8003302:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003304:	415b      	adcs	r3, r3
 8003306:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003308:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800330c:	4641      	mov	r1, r8
 800330e:	1851      	adds	r1, r2, r1
 8003310:	6339      	str	r1, [r7, #48]	@ 0x30
 8003312:	4649      	mov	r1, r9
 8003314:	414b      	adcs	r3, r1
 8003316:	637b      	str	r3, [r7, #52]	@ 0x34
 8003318:	f04f 0200 	mov.w	r2, #0
 800331c:	f04f 0300 	mov.w	r3, #0
 8003320:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003324:	4659      	mov	r1, fp
 8003326:	00cb      	lsls	r3, r1, #3
 8003328:	4651      	mov	r1, sl
 800332a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800332e:	4651      	mov	r1, sl
 8003330:	00ca      	lsls	r2, r1, #3
 8003332:	4610      	mov	r0, r2
 8003334:	4619      	mov	r1, r3
 8003336:	4603      	mov	r3, r0
 8003338:	4642      	mov	r2, r8
 800333a:	189b      	adds	r3, r3, r2
 800333c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003340:	464b      	mov	r3, r9
 8003342:	460a      	mov	r2, r1
 8003344:	eb42 0303 	adc.w	r3, r2, r3
 8003348:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800334c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003358:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800335c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003360:	460b      	mov	r3, r1
 8003362:	18db      	adds	r3, r3, r3
 8003364:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003366:	4613      	mov	r3, r2
 8003368:	eb42 0303 	adc.w	r3, r2, r3
 800336c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800336e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003372:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003376:	f7fc ff83 	bl	8000280 <__aeabi_uldivmod>
 800337a:	4602      	mov	r2, r0
 800337c:	460b      	mov	r3, r1
 800337e:	4b0d      	ldr	r3, [pc, #52]	@ (80033b4 <UART_SetConfig+0x2d4>)
 8003380:	fba3 1302 	umull	r1, r3, r3, r2
 8003384:	095b      	lsrs	r3, r3, #5
 8003386:	2164      	movs	r1, #100	@ 0x64
 8003388:	fb01 f303 	mul.w	r3, r1, r3
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	00db      	lsls	r3, r3, #3
 8003390:	3332      	adds	r3, #50	@ 0x32
 8003392:	4a08      	ldr	r2, [pc, #32]	@ (80033b4 <UART_SetConfig+0x2d4>)
 8003394:	fba2 2303 	umull	r2, r3, r2, r3
 8003398:	095b      	lsrs	r3, r3, #5
 800339a:	f003 0207 	and.w	r2, r3, #7
 800339e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4422      	add	r2, r4
 80033a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80033a8:	e106      	b.n	80035b8 <UART_SetConfig+0x4d8>
 80033aa:	bf00      	nop
 80033ac:	40011000 	.word	0x40011000
 80033b0:	40011400 	.word	0x40011400
 80033b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033bc:	2200      	movs	r2, #0
 80033be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80033c2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80033c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80033ca:	4642      	mov	r2, r8
 80033cc:	464b      	mov	r3, r9
 80033ce:	1891      	adds	r1, r2, r2
 80033d0:	6239      	str	r1, [r7, #32]
 80033d2:	415b      	adcs	r3, r3
 80033d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80033d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80033da:	4641      	mov	r1, r8
 80033dc:	1854      	adds	r4, r2, r1
 80033de:	4649      	mov	r1, r9
 80033e0:	eb43 0501 	adc.w	r5, r3, r1
 80033e4:	f04f 0200 	mov.w	r2, #0
 80033e8:	f04f 0300 	mov.w	r3, #0
 80033ec:	00eb      	lsls	r3, r5, #3
 80033ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033f2:	00e2      	lsls	r2, r4, #3
 80033f4:	4614      	mov	r4, r2
 80033f6:	461d      	mov	r5, r3
 80033f8:	4643      	mov	r3, r8
 80033fa:	18e3      	adds	r3, r4, r3
 80033fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003400:	464b      	mov	r3, r9
 8003402:	eb45 0303 	adc.w	r3, r5, r3
 8003406:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800340a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003416:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800341a:	f04f 0200 	mov.w	r2, #0
 800341e:	f04f 0300 	mov.w	r3, #0
 8003422:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003426:	4629      	mov	r1, r5
 8003428:	008b      	lsls	r3, r1, #2
 800342a:	4621      	mov	r1, r4
 800342c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003430:	4621      	mov	r1, r4
 8003432:	008a      	lsls	r2, r1, #2
 8003434:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003438:	f7fc ff22 	bl	8000280 <__aeabi_uldivmod>
 800343c:	4602      	mov	r2, r0
 800343e:	460b      	mov	r3, r1
 8003440:	4b60      	ldr	r3, [pc, #384]	@ (80035c4 <UART_SetConfig+0x4e4>)
 8003442:	fba3 2302 	umull	r2, r3, r3, r2
 8003446:	095b      	lsrs	r3, r3, #5
 8003448:	011c      	lsls	r4, r3, #4
 800344a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800344e:	2200      	movs	r2, #0
 8003450:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003454:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003458:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800345c:	4642      	mov	r2, r8
 800345e:	464b      	mov	r3, r9
 8003460:	1891      	adds	r1, r2, r2
 8003462:	61b9      	str	r1, [r7, #24]
 8003464:	415b      	adcs	r3, r3
 8003466:	61fb      	str	r3, [r7, #28]
 8003468:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800346c:	4641      	mov	r1, r8
 800346e:	1851      	adds	r1, r2, r1
 8003470:	6139      	str	r1, [r7, #16]
 8003472:	4649      	mov	r1, r9
 8003474:	414b      	adcs	r3, r1
 8003476:	617b      	str	r3, [r7, #20]
 8003478:	f04f 0200 	mov.w	r2, #0
 800347c:	f04f 0300 	mov.w	r3, #0
 8003480:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003484:	4659      	mov	r1, fp
 8003486:	00cb      	lsls	r3, r1, #3
 8003488:	4651      	mov	r1, sl
 800348a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800348e:	4651      	mov	r1, sl
 8003490:	00ca      	lsls	r2, r1, #3
 8003492:	4610      	mov	r0, r2
 8003494:	4619      	mov	r1, r3
 8003496:	4603      	mov	r3, r0
 8003498:	4642      	mov	r2, r8
 800349a:	189b      	adds	r3, r3, r2
 800349c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80034a0:	464b      	mov	r3, r9
 80034a2:	460a      	mov	r2, r1
 80034a4:	eb42 0303 	adc.w	r3, r2, r3
 80034a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80034ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80034b6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80034b8:	f04f 0200 	mov.w	r2, #0
 80034bc:	f04f 0300 	mov.w	r3, #0
 80034c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80034c4:	4649      	mov	r1, r9
 80034c6:	008b      	lsls	r3, r1, #2
 80034c8:	4641      	mov	r1, r8
 80034ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034ce:	4641      	mov	r1, r8
 80034d0:	008a      	lsls	r2, r1, #2
 80034d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80034d6:	f7fc fed3 	bl	8000280 <__aeabi_uldivmod>
 80034da:	4602      	mov	r2, r0
 80034dc:	460b      	mov	r3, r1
 80034de:	4611      	mov	r1, r2
 80034e0:	4b38      	ldr	r3, [pc, #224]	@ (80035c4 <UART_SetConfig+0x4e4>)
 80034e2:	fba3 2301 	umull	r2, r3, r3, r1
 80034e6:	095b      	lsrs	r3, r3, #5
 80034e8:	2264      	movs	r2, #100	@ 0x64
 80034ea:	fb02 f303 	mul.w	r3, r2, r3
 80034ee:	1acb      	subs	r3, r1, r3
 80034f0:	011b      	lsls	r3, r3, #4
 80034f2:	3332      	adds	r3, #50	@ 0x32
 80034f4:	4a33      	ldr	r2, [pc, #204]	@ (80035c4 <UART_SetConfig+0x4e4>)
 80034f6:	fba2 2303 	umull	r2, r3, r2, r3
 80034fa:	095b      	lsrs	r3, r3, #5
 80034fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003500:	441c      	add	r4, r3
 8003502:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003506:	2200      	movs	r2, #0
 8003508:	673b      	str	r3, [r7, #112]	@ 0x70
 800350a:	677a      	str	r2, [r7, #116]	@ 0x74
 800350c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003510:	4642      	mov	r2, r8
 8003512:	464b      	mov	r3, r9
 8003514:	1891      	adds	r1, r2, r2
 8003516:	60b9      	str	r1, [r7, #8]
 8003518:	415b      	adcs	r3, r3
 800351a:	60fb      	str	r3, [r7, #12]
 800351c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003520:	4641      	mov	r1, r8
 8003522:	1851      	adds	r1, r2, r1
 8003524:	6039      	str	r1, [r7, #0]
 8003526:	4649      	mov	r1, r9
 8003528:	414b      	adcs	r3, r1
 800352a:	607b      	str	r3, [r7, #4]
 800352c:	f04f 0200 	mov.w	r2, #0
 8003530:	f04f 0300 	mov.w	r3, #0
 8003534:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003538:	4659      	mov	r1, fp
 800353a:	00cb      	lsls	r3, r1, #3
 800353c:	4651      	mov	r1, sl
 800353e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003542:	4651      	mov	r1, sl
 8003544:	00ca      	lsls	r2, r1, #3
 8003546:	4610      	mov	r0, r2
 8003548:	4619      	mov	r1, r3
 800354a:	4603      	mov	r3, r0
 800354c:	4642      	mov	r2, r8
 800354e:	189b      	adds	r3, r3, r2
 8003550:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003552:	464b      	mov	r3, r9
 8003554:	460a      	mov	r2, r1
 8003556:	eb42 0303 	adc.w	r3, r2, r3
 800355a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800355c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	663b      	str	r3, [r7, #96]	@ 0x60
 8003566:	667a      	str	r2, [r7, #100]	@ 0x64
 8003568:	f04f 0200 	mov.w	r2, #0
 800356c:	f04f 0300 	mov.w	r3, #0
 8003570:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003574:	4649      	mov	r1, r9
 8003576:	008b      	lsls	r3, r1, #2
 8003578:	4641      	mov	r1, r8
 800357a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800357e:	4641      	mov	r1, r8
 8003580:	008a      	lsls	r2, r1, #2
 8003582:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003586:	f7fc fe7b 	bl	8000280 <__aeabi_uldivmod>
 800358a:	4602      	mov	r2, r0
 800358c:	460b      	mov	r3, r1
 800358e:	4b0d      	ldr	r3, [pc, #52]	@ (80035c4 <UART_SetConfig+0x4e4>)
 8003590:	fba3 1302 	umull	r1, r3, r3, r2
 8003594:	095b      	lsrs	r3, r3, #5
 8003596:	2164      	movs	r1, #100	@ 0x64
 8003598:	fb01 f303 	mul.w	r3, r1, r3
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	011b      	lsls	r3, r3, #4
 80035a0:	3332      	adds	r3, #50	@ 0x32
 80035a2:	4a08      	ldr	r2, [pc, #32]	@ (80035c4 <UART_SetConfig+0x4e4>)
 80035a4:	fba2 2303 	umull	r2, r3, r2, r3
 80035a8:	095b      	lsrs	r3, r3, #5
 80035aa:	f003 020f 	and.w	r2, r3, #15
 80035ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4422      	add	r2, r4
 80035b6:	609a      	str	r2, [r3, #8]
}
 80035b8:	bf00      	nop
 80035ba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80035be:	46bd      	mov	sp, r7
 80035c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035c4:	51eb851f 	.word	0x51eb851f

080035c8 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80035c8:	b480      	push	{r7}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	689a      	ldr	r2, [r3, #8]
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	683a      	ldr	r2, [r7, #0]
 80035ec:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	683a      	ldr	r2, [r7, #0]
 80035f2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	1c5a      	adds	r2, r3, #1
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	601a      	str	r2, [r3, #0]
}
 8003604:	bf00      	nop
 8003606:	3714      	adds	r7, #20
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	6892      	ldr	r2, [r2, #8]
 8003626:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	6852      	ldr	r2, [r2, #4]
 8003630:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	429a      	cmp	r2, r3
 800363a:	d103      	bne.n	8003644 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689a      	ldr	r2, [r3, #8]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	1e5a      	subs	r2, r3, #1
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
}
 8003658:	4618      	mov	r0, r3
 800365a:	3714      	adds	r7, #20
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b086      	sub	sp, #24
 8003668:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800366a:	2300      	movs	r3, #0
 800366c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800366e:	4b4f      	ldr	r3, [pc, #316]	@ (80037ac <xTaskIncrementTick+0x148>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2b00      	cmp	r3, #0
 8003674:	f040 8089 	bne.w	800378a <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003678:	4b4d      	ldr	r3, [pc, #308]	@ (80037b0 <xTaskIncrementTick+0x14c>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	3301      	adds	r3, #1
 800367e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003680:	4a4b      	ldr	r2, [pc, #300]	@ (80037b0 <xTaskIncrementTick+0x14c>)
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d121      	bne.n	80036d0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800368c:	4b49      	ldr	r3, [pc, #292]	@ (80037b4 <xTaskIncrementTick+0x150>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00b      	beq.n	80036ae <xTaskIncrementTick+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800369a:	f383 8811 	msr	BASEPRI, r3
 800369e:	f3bf 8f6f 	isb	sy
 80036a2:	f3bf 8f4f 	dsb	sy
 80036a6:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80036a8:	bf00      	nop
 80036aa:	bf00      	nop
 80036ac:	e7fd      	b.n	80036aa <xTaskIncrementTick+0x46>
 80036ae:	4b41      	ldr	r3, [pc, #260]	@ (80037b4 <xTaskIncrementTick+0x150>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	60fb      	str	r3, [r7, #12]
 80036b4:	4b40      	ldr	r3, [pc, #256]	@ (80037b8 <xTaskIncrementTick+0x154>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a3e      	ldr	r2, [pc, #248]	@ (80037b4 <xTaskIncrementTick+0x150>)
 80036ba:	6013      	str	r3, [r2, #0]
 80036bc:	4a3e      	ldr	r2, [pc, #248]	@ (80037b8 <xTaskIncrementTick+0x154>)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6013      	str	r3, [r2, #0]
 80036c2:	4b3e      	ldr	r3, [pc, #248]	@ (80037bc <xTaskIncrementTick+0x158>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	3301      	adds	r3, #1
 80036c8:	4a3c      	ldr	r2, [pc, #240]	@ (80037bc <xTaskIncrementTick+0x158>)
 80036ca:	6013      	str	r3, [r2, #0]
 80036cc:	f000 f8e0 	bl	8003890 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80036d0:	4b3b      	ldr	r3, [pc, #236]	@ (80037c0 <xTaskIncrementTick+0x15c>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d348      	bcc.n	800376c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036da:	4b36      	ldr	r3, [pc, #216]	@ (80037b4 <xTaskIncrementTick+0x150>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d104      	bne.n	80036ee <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036e4:	4b36      	ldr	r3, [pc, #216]	@ (80037c0 <xTaskIncrementTick+0x15c>)
 80036e6:	f04f 32ff 	mov.w	r2, #4294967295
 80036ea:	601a      	str	r2, [r3, #0]
					break;
 80036ec:	e03e      	b.n	800376c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036ee:	4b31      	ldr	r3, [pc, #196]	@ (80037b4 <xTaskIncrementTick+0x150>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	429a      	cmp	r2, r3
 8003704:	d203      	bcs.n	800370e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003706:	4a2e      	ldr	r2, [pc, #184]	@ (80037c0 <xTaskIncrementTick+0x15c>)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800370c:	e02e      	b.n	800376c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	3304      	adds	r3, #4
 8003712:	4618      	mov	r0, r3
 8003714:	f7ff ff7c 	bl	8003610 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800371c:	2b00      	cmp	r3, #0
 800371e:	d004      	beq.n	800372a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	3318      	adds	r3, #24
 8003724:	4618      	mov	r0, r3
 8003726:	f7ff ff73 	bl	8003610 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800372e:	2201      	movs	r2, #1
 8003730:	409a      	lsls	r2, r3
 8003732:	4b24      	ldr	r3, [pc, #144]	@ (80037c4 <xTaskIncrementTick+0x160>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4313      	orrs	r3, r2
 8003738:	4a22      	ldr	r2, [pc, #136]	@ (80037c4 <xTaskIncrementTick+0x160>)
 800373a:	6013      	str	r3, [r2, #0]
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003740:	4613      	mov	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4413      	add	r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	4a1f      	ldr	r2, [pc, #124]	@ (80037c8 <xTaskIncrementTick+0x164>)
 800374a:	441a      	add	r2, r3
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	3304      	adds	r3, #4
 8003750:	4619      	mov	r1, r3
 8003752:	4610      	mov	r0, r2
 8003754:	f7ff ff38 	bl	80035c8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800375c:	4b1b      	ldr	r3, [pc, #108]	@ (80037cc <xTaskIncrementTick+0x168>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003762:	429a      	cmp	r2, r3
 8003764:	d3b9      	bcc.n	80036da <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003766:	2301      	movs	r3, #1
 8003768:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800376a:	e7b6      	b.n	80036da <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800376c:	4b17      	ldr	r3, [pc, #92]	@ (80037cc <xTaskIncrementTick+0x168>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003772:	4915      	ldr	r1, [pc, #84]	@ (80037c8 <xTaskIncrementTick+0x164>)
 8003774:	4613      	mov	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	4413      	add	r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	440b      	add	r3, r1
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d907      	bls.n	8003794 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8003784:	2301      	movs	r3, #1
 8003786:	617b      	str	r3, [r7, #20]
 8003788:	e004      	b.n	8003794 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800378a:	4b11      	ldr	r3, [pc, #68]	@ (80037d0 <xTaskIncrementTick+0x16c>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	3301      	adds	r3, #1
 8003790:	4a0f      	ldr	r2, [pc, #60]	@ (80037d0 <xTaskIncrementTick+0x16c>)
 8003792:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003794:	4b0f      	ldr	r3, [pc, #60]	@ (80037d4 <xTaskIncrementTick+0x170>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d001      	beq.n	80037a0 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800379c:	2301      	movs	r3, #1
 800379e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80037a0:	697b      	ldr	r3, [r7, #20]
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3718      	adds	r7, #24
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	2000025c 	.word	0x2000025c
 80037b0:	20000244 	.word	0x20000244
 80037b4:	2000023c 	.word	0x2000023c
 80037b8:	20000240 	.word	0x20000240
 80037bc:	20000254 	.word	0x20000254
 80037c0:	20000258 	.word	0x20000258
 80037c4:	20000248 	.word	0x20000248
 80037c8:	200001d8 	.word	0x200001d8
 80037cc:	200001d4 	.word	0x200001d4
 80037d0:	2000024c 	.word	0x2000024c
 80037d4:	20000250 	.word	0x20000250

080037d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80037d8:	b480      	push	{r7}
 80037da:	b087      	sub	sp, #28
 80037dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80037de:	4b27      	ldr	r3, [pc, #156]	@ (800387c <vTaskSwitchContext+0xa4>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d003      	beq.n	80037ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80037e6:	4b26      	ldr	r3, [pc, #152]	@ (8003880 <vTaskSwitchContext+0xa8>)
 80037e8:	2201      	movs	r2, #1
 80037ea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80037ec:	e040      	b.n	8003870 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80037ee:	4b24      	ldr	r3, [pc, #144]	@ (8003880 <vTaskSwitchContext+0xa8>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037f4:	4b23      	ldr	r3, [pc, #140]	@ (8003884 <vTaskSwitchContext+0xac>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	fab3 f383 	clz	r3, r3
 8003800:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003802:	7afb      	ldrb	r3, [r7, #11]
 8003804:	f1c3 031f 	rsb	r3, r3, #31
 8003808:	617b      	str	r3, [r7, #20]
 800380a:	491f      	ldr	r1, [pc, #124]	@ (8003888 <vTaskSwitchContext+0xb0>)
 800380c:	697a      	ldr	r2, [r7, #20]
 800380e:	4613      	mov	r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	4413      	add	r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	440b      	add	r3, r1
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d10b      	bne.n	8003836 <vTaskSwitchContext+0x5e>
	__asm volatile
 800381e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003822:	f383 8811 	msr	BASEPRI, r3
 8003826:	f3bf 8f6f 	isb	sy
 800382a:	f3bf 8f4f 	dsb	sy
 800382e:	607b      	str	r3, [r7, #4]
}
 8003830:	bf00      	nop
 8003832:	bf00      	nop
 8003834:	e7fd      	b.n	8003832 <vTaskSwitchContext+0x5a>
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	4613      	mov	r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	4413      	add	r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	4a11      	ldr	r2, [pc, #68]	@ (8003888 <vTaskSwitchContext+0xb0>)
 8003842:	4413      	add	r3, r2
 8003844:	613b      	str	r3, [r7, #16]
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	685a      	ldr	r2, [r3, #4]
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	605a      	str	r2, [r3, #4]
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	685a      	ldr	r2, [r3, #4]
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	3308      	adds	r3, #8
 8003858:	429a      	cmp	r2, r3
 800385a:	d104      	bne.n	8003866 <vTaskSwitchContext+0x8e>
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	685a      	ldr	r2, [r3, #4]
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	605a      	str	r2, [r3, #4]
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	4a07      	ldr	r2, [pc, #28]	@ (800388c <vTaskSwitchContext+0xb4>)
 800386e:	6013      	str	r3, [r2, #0]
}
 8003870:	bf00      	nop
 8003872:	371c      	adds	r7, #28
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr
 800387c:	2000025c 	.word	0x2000025c
 8003880:	20000250 	.word	0x20000250
 8003884:	20000248 	.word	0x20000248
 8003888:	200001d8 	.word	0x200001d8
 800388c:	200001d4 	.word	0x200001d4

08003890 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003896:	4b0c      	ldr	r3, [pc, #48]	@ (80038c8 <prvResetNextTaskUnblockTime+0x38>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d104      	bne.n	80038aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80038a0:	4b0a      	ldr	r3, [pc, #40]	@ (80038cc <prvResetNextTaskUnblockTime+0x3c>)
 80038a2:	f04f 32ff 	mov.w	r2, #4294967295
 80038a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80038a8:	e008      	b.n	80038bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038aa:	4b07      	ldr	r3, [pc, #28]	@ (80038c8 <prvResetNextTaskUnblockTime+0x38>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	4a04      	ldr	r2, [pc, #16]	@ (80038cc <prvResetNextTaskUnblockTime+0x3c>)
 80038ba:	6013      	str	r3, [r2, #0]
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr
 80038c8:	2000023c 	.word	0x2000023c
 80038cc:	20000258 	.word	0x20000258

080038d0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80038d0:	4b07      	ldr	r3, [pc, #28]	@ (80038f0 <pxCurrentTCBConst2>)
 80038d2:	6819      	ldr	r1, [r3, #0]
 80038d4:	6808      	ldr	r0, [r1, #0]
 80038d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038da:	f380 8809 	msr	PSP, r0
 80038de:	f3bf 8f6f 	isb	sy
 80038e2:	f04f 0000 	mov.w	r0, #0
 80038e6:	f380 8811 	msr	BASEPRI, r0
 80038ea:	4770      	bx	lr
 80038ec:	f3af 8000 	nop.w

080038f0 <pxCurrentTCBConst2>:
 80038f0:	200001d4 	.word	0x200001d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80038f4:	bf00      	nop
 80038f6:	bf00      	nop
	...

08003900 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003900:	f3ef 8009 	mrs	r0, PSP
 8003904:	f3bf 8f6f 	isb	sy
 8003908:	4b15      	ldr	r3, [pc, #84]	@ (8003960 <pxCurrentTCBConst>)
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	f01e 0f10 	tst.w	lr, #16
 8003910:	bf08      	it	eq
 8003912:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003916:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800391a:	6010      	str	r0, [r2, #0]
 800391c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003920:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003924:	f380 8811 	msr	BASEPRI, r0
 8003928:	f3bf 8f4f 	dsb	sy
 800392c:	f3bf 8f6f 	isb	sy
 8003930:	f7ff ff52 	bl	80037d8 <vTaskSwitchContext>
 8003934:	f04f 0000 	mov.w	r0, #0
 8003938:	f380 8811 	msr	BASEPRI, r0
 800393c:	bc09      	pop	{r0, r3}
 800393e:	6819      	ldr	r1, [r3, #0]
 8003940:	6808      	ldr	r0, [r1, #0]
 8003942:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003946:	f01e 0f10 	tst.w	lr, #16
 800394a:	bf08      	it	eq
 800394c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003950:	f380 8809 	msr	PSP, r0
 8003954:	f3bf 8f6f 	isb	sy
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	f3af 8000 	nop.w

08003960 <pxCurrentTCBConst>:
 8003960:	200001d4 	.word	0x200001d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003964:	bf00      	nop
 8003966:	bf00      	nop

08003968 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
	__asm volatile
 800396e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003972:	f383 8811 	msr	BASEPRI, r3
 8003976:	f3bf 8f6f 	isb	sy
 800397a:	f3bf 8f4f 	dsb	sy
 800397e:	607b      	str	r3, [r7, #4]
}
 8003980:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003982:	f7ff fe6f 	bl	8003664 <xTaskIncrementTick>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d003      	beq.n	8003994 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800398c:	4b06      	ldr	r3, [pc, #24]	@ (80039a8 <SysTick_Handler+0x40>)
 800398e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003992:	601a      	str	r2, [r3, #0]
 8003994:	2300      	movs	r3, #0
 8003996:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800399e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80039a0:	bf00      	nop
 80039a2:	3708      	adds	r7, #8
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	e000ed04 	.word	0xe000ed04

080039ac <siprintf>:
 80039ac:	b40e      	push	{r1, r2, r3}
 80039ae:	b500      	push	{lr}
 80039b0:	b09c      	sub	sp, #112	@ 0x70
 80039b2:	ab1d      	add	r3, sp, #116	@ 0x74
 80039b4:	9002      	str	r0, [sp, #8]
 80039b6:	9006      	str	r0, [sp, #24]
 80039b8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80039bc:	4809      	ldr	r0, [pc, #36]	@ (80039e4 <siprintf+0x38>)
 80039be:	9107      	str	r1, [sp, #28]
 80039c0:	9104      	str	r1, [sp, #16]
 80039c2:	4909      	ldr	r1, [pc, #36]	@ (80039e8 <siprintf+0x3c>)
 80039c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80039c8:	9105      	str	r1, [sp, #20]
 80039ca:	6800      	ldr	r0, [r0, #0]
 80039cc:	9301      	str	r3, [sp, #4]
 80039ce:	a902      	add	r1, sp, #8
 80039d0:	f000 f9a2 	bl	8003d18 <_svfiprintf_r>
 80039d4:	9b02      	ldr	r3, [sp, #8]
 80039d6:	2200      	movs	r2, #0
 80039d8:	701a      	strb	r2, [r3, #0]
 80039da:	b01c      	add	sp, #112	@ 0x70
 80039dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80039e0:	b003      	add	sp, #12
 80039e2:	4770      	bx	lr
 80039e4:	20000010 	.word	0x20000010
 80039e8:	ffff0208 	.word	0xffff0208

080039ec <memset>:
 80039ec:	4402      	add	r2, r0
 80039ee:	4603      	mov	r3, r0
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d100      	bne.n	80039f6 <memset+0xa>
 80039f4:	4770      	bx	lr
 80039f6:	f803 1b01 	strb.w	r1, [r3], #1
 80039fa:	e7f9      	b.n	80039f0 <memset+0x4>

080039fc <__errno>:
 80039fc:	4b01      	ldr	r3, [pc, #4]	@ (8003a04 <__errno+0x8>)
 80039fe:	6818      	ldr	r0, [r3, #0]
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	20000010 	.word	0x20000010

08003a08 <__libc_init_array>:
 8003a08:	b570      	push	{r4, r5, r6, lr}
 8003a0a:	4d0d      	ldr	r5, [pc, #52]	@ (8003a40 <__libc_init_array+0x38>)
 8003a0c:	4c0d      	ldr	r4, [pc, #52]	@ (8003a44 <__libc_init_array+0x3c>)
 8003a0e:	1b64      	subs	r4, r4, r5
 8003a10:	10a4      	asrs	r4, r4, #2
 8003a12:	2600      	movs	r6, #0
 8003a14:	42a6      	cmp	r6, r4
 8003a16:	d109      	bne.n	8003a2c <__libc_init_array+0x24>
 8003a18:	4d0b      	ldr	r5, [pc, #44]	@ (8003a48 <__libc_init_array+0x40>)
 8003a1a:	4c0c      	ldr	r4, [pc, #48]	@ (8003a4c <__libc_init_array+0x44>)
 8003a1c:	f000 fc66 	bl	80042ec <_init>
 8003a20:	1b64      	subs	r4, r4, r5
 8003a22:	10a4      	asrs	r4, r4, #2
 8003a24:	2600      	movs	r6, #0
 8003a26:	42a6      	cmp	r6, r4
 8003a28:	d105      	bne.n	8003a36 <__libc_init_array+0x2e>
 8003a2a:	bd70      	pop	{r4, r5, r6, pc}
 8003a2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a30:	4798      	blx	r3
 8003a32:	3601      	adds	r6, #1
 8003a34:	e7ee      	b.n	8003a14 <__libc_init_array+0xc>
 8003a36:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a3a:	4798      	blx	r3
 8003a3c:	3601      	adds	r6, #1
 8003a3e:	e7f2      	b.n	8003a26 <__libc_init_array+0x1e>
 8003a40:	08004440 	.word	0x08004440
 8003a44:	08004440 	.word	0x08004440
 8003a48:	08004440 	.word	0x08004440
 8003a4c:	08004444 	.word	0x08004444

08003a50 <__retarget_lock_acquire_recursive>:
 8003a50:	4770      	bx	lr

08003a52 <__retarget_lock_release_recursive>:
 8003a52:	4770      	bx	lr

08003a54 <memcpy>:
 8003a54:	440a      	add	r2, r1
 8003a56:	4291      	cmp	r1, r2
 8003a58:	f100 33ff 	add.w	r3, r0, #4294967295
 8003a5c:	d100      	bne.n	8003a60 <memcpy+0xc>
 8003a5e:	4770      	bx	lr
 8003a60:	b510      	push	{r4, lr}
 8003a62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a6a:	4291      	cmp	r1, r2
 8003a6c:	d1f9      	bne.n	8003a62 <memcpy+0xe>
 8003a6e:	bd10      	pop	{r4, pc}

08003a70 <_free_r>:
 8003a70:	b538      	push	{r3, r4, r5, lr}
 8003a72:	4605      	mov	r5, r0
 8003a74:	2900      	cmp	r1, #0
 8003a76:	d041      	beq.n	8003afc <_free_r+0x8c>
 8003a78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a7c:	1f0c      	subs	r4, r1, #4
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	bfb8      	it	lt
 8003a82:	18e4      	addlt	r4, r4, r3
 8003a84:	f000 f8e0 	bl	8003c48 <__malloc_lock>
 8003a88:	4a1d      	ldr	r2, [pc, #116]	@ (8003b00 <_free_r+0x90>)
 8003a8a:	6813      	ldr	r3, [r2, #0]
 8003a8c:	b933      	cbnz	r3, 8003a9c <_free_r+0x2c>
 8003a8e:	6063      	str	r3, [r4, #4]
 8003a90:	6014      	str	r4, [r2, #0]
 8003a92:	4628      	mov	r0, r5
 8003a94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a98:	f000 b8dc 	b.w	8003c54 <__malloc_unlock>
 8003a9c:	42a3      	cmp	r3, r4
 8003a9e:	d908      	bls.n	8003ab2 <_free_r+0x42>
 8003aa0:	6820      	ldr	r0, [r4, #0]
 8003aa2:	1821      	adds	r1, r4, r0
 8003aa4:	428b      	cmp	r3, r1
 8003aa6:	bf01      	itttt	eq
 8003aa8:	6819      	ldreq	r1, [r3, #0]
 8003aaa:	685b      	ldreq	r3, [r3, #4]
 8003aac:	1809      	addeq	r1, r1, r0
 8003aae:	6021      	streq	r1, [r4, #0]
 8003ab0:	e7ed      	b.n	8003a8e <_free_r+0x1e>
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	b10b      	cbz	r3, 8003abc <_free_r+0x4c>
 8003ab8:	42a3      	cmp	r3, r4
 8003aba:	d9fa      	bls.n	8003ab2 <_free_r+0x42>
 8003abc:	6811      	ldr	r1, [r2, #0]
 8003abe:	1850      	adds	r0, r2, r1
 8003ac0:	42a0      	cmp	r0, r4
 8003ac2:	d10b      	bne.n	8003adc <_free_r+0x6c>
 8003ac4:	6820      	ldr	r0, [r4, #0]
 8003ac6:	4401      	add	r1, r0
 8003ac8:	1850      	adds	r0, r2, r1
 8003aca:	4283      	cmp	r3, r0
 8003acc:	6011      	str	r1, [r2, #0]
 8003ace:	d1e0      	bne.n	8003a92 <_free_r+0x22>
 8003ad0:	6818      	ldr	r0, [r3, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	6053      	str	r3, [r2, #4]
 8003ad6:	4408      	add	r0, r1
 8003ad8:	6010      	str	r0, [r2, #0]
 8003ada:	e7da      	b.n	8003a92 <_free_r+0x22>
 8003adc:	d902      	bls.n	8003ae4 <_free_r+0x74>
 8003ade:	230c      	movs	r3, #12
 8003ae0:	602b      	str	r3, [r5, #0]
 8003ae2:	e7d6      	b.n	8003a92 <_free_r+0x22>
 8003ae4:	6820      	ldr	r0, [r4, #0]
 8003ae6:	1821      	adds	r1, r4, r0
 8003ae8:	428b      	cmp	r3, r1
 8003aea:	bf04      	itt	eq
 8003aec:	6819      	ldreq	r1, [r3, #0]
 8003aee:	685b      	ldreq	r3, [r3, #4]
 8003af0:	6063      	str	r3, [r4, #4]
 8003af2:	bf04      	itt	eq
 8003af4:	1809      	addeq	r1, r1, r0
 8003af6:	6021      	streq	r1, [r4, #0]
 8003af8:	6054      	str	r4, [r2, #4]
 8003afa:	e7ca      	b.n	8003a92 <_free_r+0x22>
 8003afc:	bd38      	pop	{r3, r4, r5, pc}
 8003afe:	bf00      	nop
 8003b00:	200003a4 	.word	0x200003a4

08003b04 <sbrk_aligned>:
 8003b04:	b570      	push	{r4, r5, r6, lr}
 8003b06:	4e0f      	ldr	r6, [pc, #60]	@ (8003b44 <sbrk_aligned+0x40>)
 8003b08:	460c      	mov	r4, r1
 8003b0a:	6831      	ldr	r1, [r6, #0]
 8003b0c:	4605      	mov	r5, r0
 8003b0e:	b911      	cbnz	r1, 8003b16 <sbrk_aligned+0x12>
 8003b10:	f000 fba6 	bl	8004260 <_sbrk_r>
 8003b14:	6030      	str	r0, [r6, #0]
 8003b16:	4621      	mov	r1, r4
 8003b18:	4628      	mov	r0, r5
 8003b1a:	f000 fba1 	bl	8004260 <_sbrk_r>
 8003b1e:	1c43      	adds	r3, r0, #1
 8003b20:	d103      	bne.n	8003b2a <sbrk_aligned+0x26>
 8003b22:	f04f 34ff 	mov.w	r4, #4294967295
 8003b26:	4620      	mov	r0, r4
 8003b28:	bd70      	pop	{r4, r5, r6, pc}
 8003b2a:	1cc4      	adds	r4, r0, #3
 8003b2c:	f024 0403 	bic.w	r4, r4, #3
 8003b30:	42a0      	cmp	r0, r4
 8003b32:	d0f8      	beq.n	8003b26 <sbrk_aligned+0x22>
 8003b34:	1a21      	subs	r1, r4, r0
 8003b36:	4628      	mov	r0, r5
 8003b38:	f000 fb92 	bl	8004260 <_sbrk_r>
 8003b3c:	3001      	adds	r0, #1
 8003b3e:	d1f2      	bne.n	8003b26 <sbrk_aligned+0x22>
 8003b40:	e7ef      	b.n	8003b22 <sbrk_aligned+0x1e>
 8003b42:	bf00      	nop
 8003b44:	200003a0 	.word	0x200003a0

08003b48 <_malloc_r>:
 8003b48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b4c:	1ccd      	adds	r5, r1, #3
 8003b4e:	f025 0503 	bic.w	r5, r5, #3
 8003b52:	3508      	adds	r5, #8
 8003b54:	2d0c      	cmp	r5, #12
 8003b56:	bf38      	it	cc
 8003b58:	250c      	movcc	r5, #12
 8003b5a:	2d00      	cmp	r5, #0
 8003b5c:	4606      	mov	r6, r0
 8003b5e:	db01      	blt.n	8003b64 <_malloc_r+0x1c>
 8003b60:	42a9      	cmp	r1, r5
 8003b62:	d904      	bls.n	8003b6e <_malloc_r+0x26>
 8003b64:	230c      	movs	r3, #12
 8003b66:	6033      	str	r3, [r6, #0]
 8003b68:	2000      	movs	r0, #0
 8003b6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003c44 <_malloc_r+0xfc>
 8003b72:	f000 f869 	bl	8003c48 <__malloc_lock>
 8003b76:	f8d8 3000 	ldr.w	r3, [r8]
 8003b7a:	461c      	mov	r4, r3
 8003b7c:	bb44      	cbnz	r4, 8003bd0 <_malloc_r+0x88>
 8003b7e:	4629      	mov	r1, r5
 8003b80:	4630      	mov	r0, r6
 8003b82:	f7ff ffbf 	bl	8003b04 <sbrk_aligned>
 8003b86:	1c43      	adds	r3, r0, #1
 8003b88:	4604      	mov	r4, r0
 8003b8a:	d158      	bne.n	8003c3e <_malloc_r+0xf6>
 8003b8c:	f8d8 4000 	ldr.w	r4, [r8]
 8003b90:	4627      	mov	r7, r4
 8003b92:	2f00      	cmp	r7, #0
 8003b94:	d143      	bne.n	8003c1e <_malloc_r+0xd6>
 8003b96:	2c00      	cmp	r4, #0
 8003b98:	d04b      	beq.n	8003c32 <_malloc_r+0xea>
 8003b9a:	6823      	ldr	r3, [r4, #0]
 8003b9c:	4639      	mov	r1, r7
 8003b9e:	4630      	mov	r0, r6
 8003ba0:	eb04 0903 	add.w	r9, r4, r3
 8003ba4:	f000 fb5c 	bl	8004260 <_sbrk_r>
 8003ba8:	4581      	cmp	r9, r0
 8003baa:	d142      	bne.n	8003c32 <_malloc_r+0xea>
 8003bac:	6821      	ldr	r1, [r4, #0]
 8003bae:	1a6d      	subs	r5, r5, r1
 8003bb0:	4629      	mov	r1, r5
 8003bb2:	4630      	mov	r0, r6
 8003bb4:	f7ff ffa6 	bl	8003b04 <sbrk_aligned>
 8003bb8:	3001      	adds	r0, #1
 8003bba:	d03a      	beq.n	8003c32 <_malloc_r+0xea>
 8003bbc:	6823      	ldr	r3, [r4, #0]
 8003bbe:	442b      	add	r3, r5
 8003bc0:	6023      	str	r3, [r4, #0]
 8003bc2:	f8d8 3000 	ldr.w	r3, [r8]
 8003bc6:	685a      	ldr	r2, [r3, #4]
 8003bc8:	bb62      	cbnz	r2, 8003c24 <_malloc_r+0xdc>
 8003bca:	f8c8 7000 	str.w	r7, [r8]
 8003bce:	e00f      	b.n	8003bf0 <_malloc_r+0xa8>
 8003bd0:	6822      	ldr	r2, [r4, #0]
 8003bd2:	1b52      	subs	r2, r2, r5
 8003bd4:	d420      	bmi.n	8003c18 <_malloc_r+0xd0>
 8003bd6:	2a0b      	cmp	r2, #11
 8003bd8:	d917      	bls.n	8003c0a <_malloc_r+0xc2>
 8003bda:	1961      	adds	r1, r4, r5
 8003bdc:	42a3      	cmp	r3, r4
 8003bde:	6025      	str	r5, [r4, #0]
 8003be0:	bf18      	it	ne
 8003be2:	6059      	strne	r1, [r3, #4]
 8003be4:	6863      	ldr	r3, [r4, #4]
 8003be6:	bf08      	it	eq
 8003be8:	f8c8 1000 	streq.w	r1, [r8]
 8003bec:	5162      	str	r2, [r4, r5]
 8003bee:	604b      	str	r3, [r1, #4]
 8003bf0:	4630      	mov	r0, r6
 8003bf2:	f000 f82f 	bl	8003c54 <__malloc_unlock>
 8003bf6:	f104 000b 	add.w	r0, r4, #11
 8003bfa:	1d23      	adds	r3, r4, #4
 8003bfc:	f020 0007 	bic.w	r0, r0, #7
 8003c00:	1ac2      	subs	r2, r0, r3
 8003c02:	bf1c      	itt	ne
 8003c04:	1a1b      	subne	r3, r3, r0
 8003c06:	50a3      	strne	r3, [r4, r2]
 8003c08:	e7af      	b.n	8003b6a <_malloc_r+0x22>
 8003c0a:	6862      	ldr	r2, [r4, #4]
 8003c0c:	42a3      	cmp	r3, r4
 8003c0e:	bf0c      	ite	eq
 8003c10:	f8c8 2000 	streq.w	r2, [r8]
 8003c14:	605a      	strne	r2, [r3, #4]
 8003c16:	e7eb      	b.n	8003bf0 <_malloc_r+0xa8>
 8003c18:	4623      	mov	r3, r4
 8003c1a:	6864      	ldr	r4, [r4, #4]
 8003c1c:	e7ae      	b.n	8003b7c <_malloc_r+0x34>
 8003c1e:	463c      	mov	r4, r7
 8003c20:	687f      	ldr	r7, [r7, #4]
 8003c22:	e7b6      	b.n	8003b92 <_malloc_r+0x4a>
 8003c24:	461a      	mov	r2, r3
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	42a3      	cmp	r3, r4
 8003c2a:	d1fb      	bne.n	8003c24 <_malloc_r+0xdc>
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	6053      	str	r3, [r2, #4]
 8003c30:	e7de      	b.n	8003bf0 <_malloc_r+0xa8>
 8003c32:	230c      	movs	r3, #12
 8003c34:	6033      	str	r3, [r6, #0]
 8003c36:	4630      	mov	r0, r6
 8003c38:	f000 f80c 	bl	8003c54 <__malloc_unlock>
 8003c3c:	e794      	b.n	8003b68 <_malloc_r+0x20>
 8003c3e:	6005      	str	r5, [r0, #0]
 8003c40:	e7d6      	b.n	8003bf0 <_malloc_r+0xa8>
 8003c42:	bf00      	nop
 8003c44:	200003a4 	.word	0x200003a4

08003c48 <__malloc_lock>:
 8003c48:	4801      	ldr	r0, [pc, #4]	@ (8003c50 <__malloc_lock+0x8>)
 8003c4a:	f7ff bf01 	b.w	8003a50 <__retarget_lock_acquire_recursive>
 8003c4e:	bf00      	nop
 8003c50:	2000039c 	.word	0x2000039c

08003c54 <__malloc_unlock>:
 8003c54:	4801      	ldr	r0, [pc, #4]	@ (8003c5c <__malloc_unlock+0x8>)
 8003c56:	f7ff befc 	b.w	8003a52 <__retarget_lock_release_recursive>
 8003c5a:	bf00      	nop
 8003c5c:	2000039c 	.word	0x2000039c

08003c60 <__ssputs_r>:
 8003c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c64:	688e      	ldr	r6, [r1, #8]
 8003c66:	461f      	mov	r7, r3
 8003c68:	42be      	cmp	r6, r7
 8003c6a:	680b      	ldr	r3, [r1, #0]
 8003c6c:	4682      	mov	sl, r0
 8003c6e:	460c      	mov	r4, r1
 8003c70:	4690      	mov	r8, r2
 8003c72:	d82d      	bhi.n	8003cd0 <__ssputs_r+0x70>
 8003c74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003c78:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003c7c:	d026      	beq.n	8003ccc <__ssputs_r+0x6c>
 8003c7e:	6965      	ldr	r5, [r4, #20]
 8003c80:	6909      	ldr	r1, [r1, #16]
 8003c82:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c86:	eba3 0901 	sub.w	r9, r3, r1
 8003c8a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003c8e:	1c7b      	adds	r3, r7, #1
 8003c90:	444b      	add	r3, r9
 8003c92:	106d      	asrs	r5, r5, #1
 8003c94:	429d      	cmp	r5, r3
 8003c96:	bf38      	it	cc
 8003c98:	461d      	movcc	r5, r3
 8003c9a:	0553      	lsls	r3, r2, #21
 8003c9c:	d527      	bpl.n	8003cee <__ssputs_r+0x8e>
 8003c9e:	4629      	mov	r1, r5
 8003ca0:	f7ff ff52 	bl	8003b48 <_malloc_r>
 8003ca4:	4606      	mov	r6, r0
 8003ca6:	b360      	cbz	r0, 8003d02 <__ssputs_r+0xa2>
 8003ca8:	6921      	ldr	r1, [r4, #16]
 8003caa:	464a      	mov	r2, r9
 8003cac:	f7ff fed2 	bl	8003a54 <memcpy>
 8003cb0:	89a3      	ldrh	r3, [r4, #12]
 8003cb2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003cb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cba:	81a3      	strh	r3, [r4, #12]
 8003cbc:	6126      	str	r6, [r4, #16]
 8003cbe:	6165      	str	r5, [r4, #20]
 8003cc0:	444e      	add	r6, r9
 8003cc2:	eba5 0509 	sub.w	r5, r5, r9
 8003cc6:	6026      	str	r6, [r4, #0]
 8003cc8:	60a5      	str	r5, [r4, #8]
 8003cca:	463e      	mov	r6, r7
 8003ccc:	42be      	cmp	r6, r7
 8003cce:	d900      	bls.n	8003cd2 <__ssputs_r+0x72>
 8003cd0:	463e      	mov	r6, r7
 8003cd2:	6820      	ldr	r0, [r4, #0]
 8003cd4:	4632      	mov	r2, r6
 8003cd6:	4641      	mov	r1, r8
 8003cd8:	f000 faa8 	bl	800422c <memmove>
 8003cdc:	68a3      	ldr	r3, [r4, #8]
 8003cde:	1b9b      	subs	r3, r3, r6
 8003ce0:	60a3      	str	r3, [r4, #8]
 8003ce2:	6823      	ldr	r3, [r4, #0]
 8003ce4:	4433      	add	r3, r6
 8003ce6:	6023      	str	r3, [r4, #0]
 8003ce8:	2000      	movs	r0, #0
 8003cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cee:	462a      	mov	r2, r5
 8003cf0:	f000 fac6 	bl	8004280 <_realloc_r>
 8003cf4:	4606      	mov	r6, r0
 8003cf6:	2800      	cmp	r0, #0
 8003cf8:	d1e0      	bne.n	8003cbc <__ssputs_r+0x5c>
 8003cfa:	6921      	ldr	r1, [r4, #16]
 8003cfc:	4650      	mov	r0, sl
 8003cfe:	f7ff feb7 	bl	8003a70 <_free_r>
 8003d02:	230c      	movs	r3, #12
 8003d04:	f8ca 3000 	str.w	r3, [sl]
 8003d08:	89a3      	ldrh	r3, [r4, #12]
 8003d0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d0e:	81a3      	strh	r3, [r4, #12]
 8003d10:	f04f 30ff 	mov.w	r0, #4294967295
 8003d14:	e7e9      	b.n	8003cea <__ssputs_r+0x8a>
	...

08003d18 <_svfiprintf_r>:
 8003d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d1c:	4698      	mov	r8, r3
 8003d1e:	898b      	ldrh	r3, [r1, #12]
 8003d20:	061b      	lsls	r3, r3, #24
 8003d22:	b09d      	sub	sp, #116	@ 0x74
 8003d24:	4607      	mov	r7, r0
 8003d26:	460d      	mov	r5, r1
 8003d28:	4614      	mov	r4, r2
 8003d2a:	d510      	bpl.n	8003d4e <_svfiprintf_r+0x36>
 8003d2c:	690b      	ldr	r3, [r1, #16]
 8003d2e:	b973      	cbnz	r3, 8003d4e <_svfiprintf_r+0x36>
 8003d30:	2140      	movs	r1, #64	@ 0x40
 8003d32:	f7ff ff09 	bl	8003b48 <_malloc_r>
 8003d36:	6028      	str	r0, [r5, #0]
 8003d38:	6128      	str	r0, [r5, #16]
 8003d3a:	b930      	cbnz	r0, 8003d4a <_svfiprintf_r+0x32>
 8003d3c:	230c      	movs	r3, #12
 8003d3e:	603b      	str	r3, [r7, #0]
 8003d40:	f04f 30ff 	mov.w	r0, #4294967295
 8003d44:	b01d      	add	sp, #116	@ 0x74
 8003d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d4a:	2340      	movs	r3, #64	@ 0x40
 8003d4c:	616b      	str	r3, [r5, #20]
 8003d4e:	2300      	movs	r3, #0
 8003d50:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d52:	2320      	movs	r3, #32
 8003d54:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003d58:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d5c:	2330      	movs	r3, #48	@ 0x30
 8003d5e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003efc <_svfiprintf_r+0x1e4>
 8003d62:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003d66:	f04f 0901 	mov.w	r9, #1
 8003d6a:	4623      	mov	r3, r4
 8003d6c:	469a      	mov	sl, r3
 8003d6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d72:	b10a      	cbz	r2, 8003d78 <_svfiprintf_r+0x60>
 8003d74:	2a25      	cmp	r2, #37	@ 0x25
 8003d76:	d1f9      	bne.n	8003d6c <_svfiprintf_r+0x54>
 8003d78:	ebba 0b04 	subs.w	fp, sl, r4
 8003d7c:	d00b      	beq.n	8003d96 <_svfiprintf_r+0x7e>
 8003d7e:	465b      	mov	r3, fp
 8003d80:	4622      	mov	r2, r4
 8003d82:	4629      	mov	r1, r5
 8003d84:	4638      	mov	r0, r7
 8003d86:	f7ff ff6b 	bl	8003c60 <__ssputs_r>
 8003d8a:	3001      	adds	r0, #1
 8003d8c:	f000 80a7 	beq.w	8003ede <_svfiprintf_r+0x1c6>
 8003d90:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003d92:	445a      	add	r2, fp
 8003d94:	9209      	str	r2, [sp, #36]	@ 0x24
 8003d96:	f89a 3000 	ldrb.w	r3, [sl]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	f000 809f 	beq.w	8003ede <_svfiprintf_r+0x1c6>
 8003da0:	2300      	movs	r3, #0
 8003da2:	f04f 32ff 	mov.w	r2, #4294967295
 8003da6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003daa:	f10a 0a01 	add.w	sl, sl, #1
 8003dae:	9304      	str	r3, [sp, #16]
 8003db0:	9307      	str	r3, [sp, #28]
 8003db2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003db6:	931a      	str	r3, [sp, #104]	@ 0x68
 8003db8:	4654      	mov	r4, sl
 8003dba:	2205      	movs	r2, #5
 8003dbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dc0:	484e      	ldr	r0, [pc, #312]	@ (8003efc <_svfiprintf_r+0x1e4>)
 8003dc2:	f7fc fa0d 	bl	80001e0 <memchr>
 8003dc6:	9a04      	ldr	r2, [sp, #16]
 8003dc8:	b9d8      	cbnz	r0, 8003e02 <_svfiprintf_r+0xea>
 8003dca:	06d0      	lsls	r0, r2, #27
 8003dcc:	bf44      	itt	mi
 8003dce:	2320      	movmi	r3, #32
 8003dd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003dd4:	0711      	lsls	r1, r2, #28
 8003dd6:	bf44      	itt	mi
 8003dd8:	232b      	movmi	r3, #43	@ 0x2b
 8003dda:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003dde:	f89a 3000 	ldrb.w	r3, [sl]
 8003de2:	2b2a      	cmp	r3, #42	@ 0x2a
 8003de4:	d015      	beq.n	8003e12 <_svfiprintf_r+0xfa>
 8003de6:	9a07      	ldr	r2, [sp, #28]
 8003de8:	4654      	mov	r4, sl
 8003dea:	2000      	movs	r0, #0
 8003dec:	f04f 0c0a 	mov.w	ip, #10
 8003df0:	4621      	mov	r1, r4
 8003df2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003df6:	3b30      	subs	r3, #48	@ 0x30
 8003df8:	2b09      	cmp	r3, #9
 8003dfa:	d94b      	bls.n	8003e94 <_svfiprintf_r+0x17c>
 8003dfc:	b1b0      	cbz	r0, 8003e2c <_svfiprintf_r+0x114>
 8003dfe:	9207      	str	r2, [sp, #28]
 8003e00:	e014      	b.n	8003e2c <_svfiprintf_r+0x114>
 8003e02:	eba0 0308 	sub.w	r3, r0, r8
 8003e06:	fa09 f303 	lsl.w	r3, r9, r3
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	9304      	str	r3, [sp, #16]
 8003e0e:	46a2      	mov	sl, r4
 8003e10:	e7d2      	b.n	8003db8 <_svfiprintf_r+0xa0>
 8003e12:	9b03      	ldr	r3, [sp, #12]
 8003e14:	1d19      	adds	r1, r3, #4
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	9103      	str	r1, [sp, #12]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	bfbb      	ittet	lt
 8003e1e:	425b      	neglt	r3, r3
 8003e20:	f042 0202 	orrlt.w	r2, r2, #2
 8003e24:	9307      	strge	r3, [sp, #28]
 8003e26:	9307      	strlt	r3, [sp, #28]
 8003e28:	bfb8      	it	lt
 8003e2a:	9204      	strlt	r2, [sp, #16]
 8003e2c:	7823      	ldrb	r3, [r4, #0]
 8003e2e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003e30:	d10a      	bne.n	8003e48 <_svfiprintf_r+0x130>
 8003e32:	7863      	ldrb	r3, [r4, #1]
 8003e34:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e36:	d132      	bne.n	8003e9e <_svfiprintf_r+0x186>
 8003e38:	9b03      	ldr	r3, [sp, #12]
 8003e3a:	1d1a      	adds	r2, r3, #4
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	9203      	str	r2, [sp, #12]
 8003e40:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003e44:	3402      	adds	r4, #2
 8003e46:	9305      	str	r3, [sp, #20]
 8003e48:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003f0c <_svfiprintf_r+0x1f4>
 8003e4c:	7821      	ldrb	r1, [r4, #0]
 8003e4e:	2203      	movs	r2, #3
 8003e50:	4650      	mov	r0, sl
 8003e52:	f7fc f9c5 	bl	80001e0 <memchr>
 8003e56:	b138      	cbz	r0, 8003e68 <_svfiprintf_r+0x150>
 8003e58:	9b04      	ldr	r3, [sp, #16]
 8003e5a:	eba0 000a 	sub.w	r0, r0, sl
 8003e5e:	2240      	movs	r2, #64	@ 0x40
 8003e60:	4082      	lsls	r2, r0
 8003e62:	4313      	orrs	r3, r2
 8003e64:	3401      	adds	r4, #1
 8003e66:	9304      	str	r3, [sp, #16]
 8003e68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e6c:	4824      	ldr	r0, [pc, #144]	@ (8003f00 <_svfiprintf_r+0x1e8>)
 8003e6e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003e72:	2206      	movs	r2, #6
 8003e74:	f7fc f9b4 	bl	80001e0 <memchr>
 8003e78:	2800      	cmp	r0, #0
 8003e7a:	d036      	beq.n	8003eea <_svfiprintf_r+0x1d2>
 8003e7c:	4b21      	ldr	r3, [pc, #132]	@ (8003f04 <_svfiprintf_r+0x1ec>)
 8003e7e:	bb1b      	cbnz	r3, 8003ec8 <_svfiprintf_r+0x1b0>
 8003e80:	9b03      	ldr	r3, [sp, #12]
 8003e82:	3307      	adds	r3, #7
 8003e84:	f023 0307 	bic.w	r3, r3, #7
 8003e88:	3308      	adds	r3, #8
 8003e8a:	9303      	str	r3, [sp, #12]
 8003e8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e8e:	4433      	add	r3, r6
 8003e90:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e92:	e76a      	b.n	8003d6a <_svfiprintf_r+0x52>
 8003e94:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e98:	460c      	mov	r4, r1
 8003e9a:	2001      	movs	r0, #1
 8003e9c:	e7a8      	b.n	8003df0 <_svfiprintf_r+0xd8>
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	3401      	adds	r4, #1
 8003ea2:	9305      	str	r3, [sp, #20]
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	f04f 0c0a 	mov.w	ip, #10
 8003eaa:	4620      	mov	r0, r4
 8003eac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003eb0:	3a30      	subs	r2, #48	@ 0x30
 8003eb2:	2a09      	cmp	r2, #9
 8003eb4:	d903      	bls.n	8003ebe <_svfiprintf_r+0x1a6>
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d0c6      	beq.n	8003e48 <_svfiprintf_r+0x130>
 8003eba:	9105      	str	r1, [sp, #20]
 8003ebc:	e7c4      	b.n	8003e48 <_svfiprintf_r+0x130>
 8003ebe:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ec2:	4604      	mov	r4, r0
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e7f0      	b.n	8003eaa <_svfiprintf_r+0x192>
 8003ec8:	ab03      	add	r3, sp, #12
 8003eca:	9300      	str	r3, [sp, #0]
 8003ecc:	462a      	mov	r2, r5
 8003ece:	4b0e      	ldr	r3, [pc, #56]	@ (8003f08 <_svfiprintf_r+0x1f0>)
 8003ed0:	a904      	add	r1, sp, #16
 8003ed2:	4638      	mov	r0, r7
 8003ed4:	f3af 8000 	nop.w
 8003ed8:	1c42      	adds	r2, r0, #1
 8003eda:	4606      	mov	r6, r0
 8003edc:	d1d6      	bne.n	8003e8c <_svfiprintf_r+0x174>
 8003ede:	89ab      	ldrh	r3, [r5, #12]
 8003ee0:	065b      	lsls	r3, r3, #25
 8003ee2:	f53f af2d 	bmi.w	8003d40 <_svfiprintf_r+0x28>
 8003ee6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003ee8:	e72c      	b.n	8003d44 <_svfiprintf_r+0x2c>
 8003eea:	ab03      	add	r3, sp, #12
 8003eec:	9300      	str	r3, [sp, #0]
 8003eee:	462a      	mov	r2, r5
 8003ef0:	4b05      	ldr	r3, [pc, #20]	@ (8003f08 <_svfiprintf_r+0x1f0>)
 8003ef2:	a904      	add	r1, sp, #16
 8003ef4:	4638      	mov	r0, r7
 8003ef6:	f000 f879 	bl	8003fec <_printf_i>
 8003efa:	e7ed      	b.n	8003ed8 <_svfiprintf_r+0x1c0>
 8003efc:	08004404 	.word	0x08004404
 8003f00:	0800440e 	.word	0x0800440e
 8003f04:	00000000 	.word	0x00000000
 8003f08:	08003c61 	.word	0x08003c61
 8003f0c:	0800440a 	.word	0x0800440a

08003f10 <_printf_common>:
 8003f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f14:	4616      	mov	r6, r2
 8003f16:	4698      	mov	r8, r3
 8003f18:	688a      	ldr	r2, [r1, #8]
 8003f1a:	690b      	ldr	r3, [r1, #16]
 8003f1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003f20:	4293      	cmp	r3, r2
 8003f22:	bfb8      	it	lt
 8003f24:	4613      	movlt	r3, r2
 8003f26:	6033      	str	r3, [r6, #0]
 8003f28:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003f2c:	4607      	mov	r7, r0
 8003f2e:	460c      	mov	r4, r1
 8003f30:	b10a      	cbz	r2, 8003f36 <_printf_common+0x26>
 8003f32:	3301      	adds	r3, #1
 8003f34:	6033      	str	r3, [r6, #0]
 8003f36:	6823      	ldr	r3, [r4, #0]
 8003f38:	0699      	lsls	r1, r3, #26
 8003f3a:	bf42      	ittt	mi
 8003f3c:	6833      	ldrmi	r3, [r6, #0]
 8003f3e:	3302      	addmi	r3, #2
 8003f40:	6033      	strmi	r3, [r6, #0]
 8003f42:	6825      	ldr	r5, [r4, #0]
 8003f44:	f015 0506 	ands.w	r5, r5, #6
 8003f48:	d106      	bne.n	8003f58 <_printf_common+0x48>
 8003f4a:	f104 0a19 	add.w	sl, r4, #25
 8003f4e:	68e3      	ldr	r3, [r4, #12]
 8003f50:	6832      	ldr	r2, [r6, #0]
 8003f52:	1a9b      	subs	r3, r3, r2
 8003f54:	42ab      	cmp	r3, r5
 8003f56:	dc26      	bgt.n	8003fa6 <_printf_common+0x96>
 8003f58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003f5c:	6822      	ldr	r2, [r4, #0]
 8003f5e:	3b00      	subs	r3, #0
 8003f60:	bf18      	it	ne
 8003f62:	2301      	movne	r3, #1
 8003f64:	0692      	lsls	r2, r2, #26
 8003f66:	d42b      	bmi.n	8003fc0 <_printf_common+0xb0>
 8003f68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003f6c:	4641      	mov	r1, r8
 8003f6e:	4638      	mov	r0, r7
 8003f70:	47c8      	blx	r9
 8003f72:	3001      	adds	r0, #1
 8003f74:	d01e      	beq.n	8003fb4 <_printf_common+0xa4>
 8003f76:	6823      	ldr	r3, [r4, #0]
 8003f78:	6922      	ldr	r2, [r4, #16]
 8003f7a:	f003 0306 	and.w	r3, r3, #6
 8003f7e:	2b04      	cmp	r3, #4
 8003f80:	bf02      	ittt	eq
 8003f82:	68e5      	ldreq	r5, [r4, #12]
 8003f84:	6833      	ldreq	r3, [r6, #0]
 8003f86:	1aed      	subeq	r5, r5, r3
 8003f88:	68a3      	ldr	r3, [r4, #8]
 8003f8a:	bf0c      	ite	eq
 8003f8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f90:	2500      	movne	r5, #0
 8003f92:	4293      	cmp	r3, r2
 8003f94:	bfc4      	itt	gt
 8003f96:	1a9b      	subgt	r3, r3, r2
 8003f98:	18ed      	addgt	r5, r5, r3
 8003f9a:	2600      	movs	r6, #0
 8003f9c:	341a      	adds	r4, #26
 8003f9e:	42b5      	cmp	r5, r6
 8003fa0:	d11a      	bne.n	8003fd8 <_printf_common+0xc8>
 8003fa2:	2000      	movs	r0, #0
 8003fa4:	e008      	b.n	8003fb8 <_printf_common+0xa8>
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	4652      	mov	r2, sl
 8003faa:	4641      	mov	r1, r8
 8003fac:	4638      	mov	r0, r7
 8003fae:	47c8      	blx	r9
 8003fb0:	3001      	adds	r0, #1
 8003fb2:	d103      	bne.n	8003fbc <_printf_common+0xac>
 8003fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fbc:	3501      	adds	r5, #1
 8003fbe:	e7c6      	b.n	8003f4e <_printf_common+0x3e>
 8003fc0:	18e1      	adds	r1, r4, r3
 8003fc2:	1c5a      	adds	r2, r3, #1
 8003fc4:	2030      	movs	r0, #48	@ 0x30
 8003fc6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003fca:	4422      	add	r2, r4
 8003fcc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003fd0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003fd4:	3302      	adds	r3, #2
 8003fd6:	e7c7      	b.n	8003f68 <_printf_common+0x58>
 8003fd8:	2301      	movs	r3, #1
 8003fda:	4622      	mov	r2, r4
 8003fdc:	4641      	mov	r1, r8
 8003fde:	4638      	mov	r0, r7
 8003fe0:	47c8      	blx	r9
 8003fe2:	3001      	adds	r0, #1
 8003fe4:	d0e6      	beq.n	8003fb4 <_printf_common+0xa4>
 8003fe6:	3601      	adds	r6, #1
 8003fe8:	e7d9      	b.n	8003f9e <_printf_common+0x8e>
	...

08003fec <_printf_i>:
 8003fec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ff0:	7e0f      	ldrb	r7, [r1, #24]
 8003ff2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003ff4:	2f78      	cmp	r7, #120	@ 0x78
 8003ff6:	4691      	mov	r9, r2
 8003ff8:	4680      	mov	r8, r0
 8003ffa:	460c      	mov	r4, r1
 8003ffc:	469a      	mov	sl, r3
 8003ffe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004002:	d807      	bhi.n	8004014 <_printf_i+0x28>
 8004004:	2f62      	cmp	r7, #98	@ 0x62
 8004006:	d80a      	bhi.n	800401e <_printf_i+0x32>
 8004008:	2f00      	cmp	r7, #0
 800400a:	f000 80d2 	beq.w	80041b2 <_printf_i+0x1c6>
 800400e:	2f58      	cmp	r7, #88	@ 0x58
 8004010:	f000 80b9 	beq.w	8004186 <_printf_i+0x19a>
 8004014:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004018:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800401c:	e03a      	b.n	8004094 <_printf_i+0xa8>
 800401e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004022:	2b15      	cmp	r3, #21
 8004024:	d8f6      	bhi.n	8004014 <_printf_i+0x28>
 8004026:	a101      	add	r1, pc, #4	@ (adr r1, 800402c <_printf_i+0x40>)
 8004028:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800402c:	08004085 	.word	0x08004085
 8004030:	08004099 	.word	0x08004099
 8004034:	08004015 	.word	0x08004015
 8004038:	08004015 	.word	0x08004015
 800403c:	08004015 	.word	0x08004015
 8004040:	08004015 	.word	0x08004015
 8004044:	08004099 	.word	0x08004099
 8004048:	08004015 	.word	0x08004015
 800404c:	08004015 	.word	0x08004015
 8004050:	08004015 	.word	0x08004015
 8004054:	08004015 	.word	0x08004015
 8004058:	08004199 	.word	0x08004199
 800405c:	080040c3 	.word	0x080040c3
 8004060:	08004153 	.word	0x08004153
 8004064:	08004015 	.word	0x08004015
 8004068:	08004015 	.word	0x08004015
 800406c:	080041bb 	.word	0x080041bb
 8004070:	08004015 	.word	0x08004015
 8004074:	080040c3 	.word	0x080040c3
 8004078:	08004015 	.word	0x08004015
 800407c:	08004015 	.word	0x08004015
 8004080:	0800415b 	.word	0x0800415b
 8004084:	6833      	ldr	r3, [r6, #0]
 8004086:	1d1a      	adds	r2, r3, #4
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	6032      	str	r2, [r6, #0]
 800408c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004090:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004094:	2301      	movs	r3, #1
 8004096:	e09d      	b.n	80041d4 <_printf_i+0x1e8>
 8004098:	6833      	ldr	r3, [r6, #0]
 800409a:	6820      	ldr	r0, [r4, #0]
 800409c:	1d19      	adds	r1, r3, #4
 800409e:	6031      	str	r1, [r6, #0]
 80040a0:	0606      	lsls	r6, r0, #24
 80040a2:	d501      	bpl.n	80040a8 <_printf_i+0xbc>
 80040a4:	681d      	ldr	r5, [r3, #0]
 80040a6:	e003      	b.n	80040b0 <_printf_i+0xc4>
 80040a8:	0645      	lsls	r5, r0, #25
 80040aa:	d5fb      	bpl.n	80040a4 <_printf_i+0xb8>
 80040ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80040b0:	2d00      	cmp	r5, #0
 80040b2:	da03      	bge.n	80040bc <_printf_i+0xd0>
 80040b4:	232d      	movs	r3, #45	@ 0x2d
 80040b6:	426d      	negs	r5, r5
 80040b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80040bc:	4859      	ldr	r0, [pc, #356]	@ (8004224 <_printf_i+0x238>)
 80040be:	230a      	movs	r3, #10
 80040c0:	e011      	b.n	80040e6 <_printf_i+0xfa>
 80040c2:	6821      	ldr	r1, [r4, #0]
 80040c4:	6833      	ldr	r3, [r6, #0]
 80040c6:	0608      	lsls	r0, r1, #24
 80040c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80040cc:	d402      	bmi.n	80040d4 <_printf_i+0xe8>
 80040ce:	0649      	lsls	r1, r1, #25
 80040d0:	bf48      	it	mi
 80040d2:	b2ad      	uxthmi	r5, r5
 80040d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80040d6:	4853      	ldr	r0, [pc, #332]	@ (8004224 <_printf_i+0x238>)
 80040d8:	6033      	str	r3, [r6, #0]
 80040da:	bf14      	ite	ne
 80040dc:	230a      	movne	r3, #10
 80040de:	2308      	moveq	r3, #8
 80040e0:	2100      	movs	r1, #0
 80040e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80040e6:	6866      	ldr	r6, [r4, #4]
 80040e8:	60a6      	str	r6, [r4, #8]
 80040ea:	2e00      	cmp	r6, #0
 80040ec:	bfa2      	ittt	ge
 80040ee:	6821      	ldrge	r1, [r4, #0]
 80040f0:	f021 0104 	bicge.w	r1, r1, #4
 80040f4:	6021      	strge	r1, [r4, #0]
 80040f6:	b90d      	cbnz	r5, 80040fc <_printf_i+0x110>
 80040f8:	2e00      	cmp	r6, #0
 80040fa:	d04b      	beq.n	8004194 <_printf_i+0x1a8>
 80040fc:	4616      	mov	r6, r2
 80040fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8004102:	fb03 5711 	mls	r7, r3, r1, r5
 8004106:	5dc7      	ldrb	r7, [r0, r7]
 8004108:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800410c:	462f      	mov	r7, r5
 800410e:	42bb      	cmp	r3, r7
 8004110:	460d      	mov	r5, r1
 8004112:	d9f4      	bls.n	80040fe <_printf_i+0x112>
 8004114:	2b08      	cmp	r3, #8
 8004116:	d10b      	bne.n	8004130 <_printf_i+0x144>
 8004118:	6823      	ldr	r3, [r4, #0]
 800411a:	07df      	lsls	r7, r3, #31
 800411c:	d508      	bpl.n	8004130 <_printf_i+0x144>
 800411e:	6923      	ldr	r3, [r4, #16]
 8004120:	6861      	ldr	r1, [r4, #4]
 8004122:	4299      	cmp	r1, r3
 8004124:	bfde      	ittt	le
 8004126:	2330      	movle	r3, #48	@ 0x30
 8004128:	f806 3c01 	strble.w	r3, [r6, #-1]
 800412c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004130:	1b92      	subs	r2, r2, r6
 8004132:	6122      	str	r2, [r4, #16]
 8004134:	f8cd a000 	str.w	sl, [sp]
 8004138:	464b      	mov	r3, r9
 800413a:	aa03      	add	r2, sp, #12
 800413c:	4621      	mov	r1, r4
 800413e:	4640      	mov	r0, r8
 8004140:	f7ff fee6 	bl	8003f10 <_printf_common>
 8004144:	3001      	adds	r0, #1
 8004146:	d14a      	bne.n	80041de <_printf_i+0x1f2>
 8004148:	f04f 30ff 	mov.w	r0, #4294967295
 800414c:	b004      	add	sp, #16
 800414e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004152:	6823      	ldr	r3, [r4, #0]
 8004154:	f043 0320 	orr.w	r3, r3, #32
 8004158:	6023      	str	r3, [r4, #0]
 800415a:	4833      	ldr	r0, [pc, #204]	@ (8004228 <_printf_i+0x23c>)
 800415c:	2778      	movs	r7, #120	@ 0x78
 800415e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004162:	6823      	ldr	r3, [r4, #0]
 8004164:	6831      	ldr	r1, [r6, #0]
 8004166:	061f      	lsls	r7, r3, #24
 8004168:	f851 5b04 	ldr.w	r5, [r1], #4
 800416c:	d402      	bmi.n	8004174 <_printf_i+0x188>
 800416e:	065f      	lsls	r7, r3, #25
 8004170:	bf48      	it	mi
 8004172:	b2ad      	uxthmi	r5, r5
 8004174:	6031      	str	r1, [r6, #0]
 8004176:	07d9      	lsls	r1, r3, #31
 8004178:	bf44      	itt	mi
 800417a:	f043 0320 	orrmi.w	r3, r3, #32
 800417e:	6023      	strmi	r3, [r4, #0]
 8004180:	b11d      	cbz	r5, 800418a <_printf_i+0x19e>
 8004182:	2310      	movs	r3, #16
 8004184:	e7ac      	b.n	80040e0 <_printf_i+0xf4>
 8004186:	4827      	ldr	r0, [pc, #156]	@ (8004224 <_printf_i+0x238>)
 8004188:	e7e9      	b.n	800415e <_printf_i+0x172>
 800418a:	6823      	ldr	r3, [r4, #0]
 800418c:	f023 0320 	bic.w	r3, r3, #32
 8004190:	6023      	str	r3, [r4, #0]
 8004192:	e7f6      	b.n	8004182 <_printf_i+0x196>
 8004194:	4616      	mov	r6, r2
 8004196:	e7bd      	b.n	8004114 <_printf_i+0x128>
 8004198:	6833      	ldr	r3, [r6, #0]
 800419a:	6825      	ldr	r5, [r4, #0]
 800419c:	6961      	ldr	r1, [r4, #20]
 800419e:	1d18      	adds	r0, r3, #4
 80041a0:	6030      	str	r0, [r6, #0]
 80041a2:	062e      	lsls	r6, r5, #24
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	d501      	bpl.n	80041ac <_printf_i+0x1c0>
 80041a8:	6019      	str	r1, [r3, #0]
 80041aa:	e002      	b.n	80041b2 <_printf_i+0x1c6>
 80041ac:	0668      	lsls	r0, r5, #25
 80041ae:	d5fb      	bpl.n	80041a8 <_printf_i+0x1bc>
 80041b0:	8019      	strh	r1, [r3, #0]
 80041b2:	2300      	movs	r3, #0
 80041b4:	6123      	str	r3, [r4, #16]
 80041b6:	4616      	mov	r6, r2
 80041b8:	e7bc      	b.n	8004134 <_printf_i+0x148>
 80041ba:	6833      	ldr	r3, [r6, #0]
 80041bc:	1d1a      	adds	r2, r3, #4
 80041be:	6032      	str	r2, [r6, #0]
 80041c0:	681e      	ldr	r6, [r3, #0]
 80041c2:	6862      	ldr	r2, [r4, #4]
 80041c4:	2100      	movs	r1, #0
 80041c6:	4630      	mov	r0, r6
 80041c8:	f7fc f80a 	bl	80001e0 <memchr>
 80041cc:	b108      	cbz	r0, 80041d2 <_printf_i+0x1e6>
 80041ce:	1b80      	subs	r0, r0, r6
 80041d0:	6060      	str	r0, [r4, #4]
 80041d2:	6863      	ldr	r3, [r4, #4]
 80041d4:	6123      	str	r3, [r4, #16]
 80041d6:	2300      	movs	r3, #0
 80041d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80041dc:	e7aa      	b.n	8004134 <_printf_i+0x148>
 80041de:	6923      	ldr	r3, [r4, #16]
 80041e0:	4632      	mov	r2, r6
 80041e2:	4649      	mov	r1, r9
 80041e4:	4640      	mov	r0, r8
 80041e6:	47d0      	blx	sl
 80041e8:	3001      	adds	r0, #1
 80041ea:	d0ad      	beq.n	8004148 <_printf_i+0x15c>
 80041ec:	6823      	ldr	r3, [r4, #0]
 80041ee:	079b      	lsls	r3, r3, #30
 80041f0:	d413      	bmi.n	800421a <_printf_i+0x22e>
 80041f2:	68e0      	ldr	r0, [r4, #12]
 80041f4:	9b03      	ldr	r3, [sp, #12]
 80041f6:	4298      	cmp	r0, r3
 80041f8:	bfb8      	it	lt
 80041fa:	4618      	movlt	r0, r3
 80041fc:	e7a6      	b.n	800414c <_printf_i+0x160>
 80041fe:	2301      	movs	r3, #1
 8004200:	4632      	mov	r2, r6
 8004202:	4649      	mov	r1, r9
 8004204:	4640      	mov	r0, r8
 8004206:	47d0      	blx	sl
 8004208:	3001      	adds	r0, #1
 800420a:	d09d      	beq.n	8004148 <_printf_i+0x15c>
 800420c:	3501      	adds	r5, #1
 800420e:	68e3      	ldr	r3, [r4, #12]
 8004210:	9903      	ldr	r1, [sp, #12]
 8004212:	1a5b      	subs	r3, r3, r1
 8004214:	42ab      	cmp	r3, r5
 8004216:	dcf2      	bgt.n	80041fe <_printf_i+0x212>
 8004218:	e7eb      	b.n	80041f2 <_printf_i+0x206>
 800421a:	2500      	movs	r5, #0
 800421c:	f104 0619 	add.w	r6, r4, #25
 8004220:	e7f5      	b.n	800420e <_printf_i+0x222>
 8004222:	bf00      	nop
 8004224:	08004415 	.word	0x08004415
 8004228:	08004426 	.word	0x08004426

0800422c <memmove>:
 800422c:	4288      	cmp	r0, r1
 800422e:	b510      	push	{r4, lr}
 8004230:	eb01 0402 	add.w	r4, r1, r2
 8004234:	d902      	bls.n	800423c <memmove+0x10>
 8004236:	4284      	cmp	r4, r0
 8004238:	4623      	mov	r3, r4
 800423a:	d807      	bhi.n	800424c <memmove+0x20>
 800423c:	1e43      	subs	r3, r0, #1
 800423e:	42a1      	cmp	r1, r4
 8004240:	d008      	beq.n	8004254 <memmove+0x28>
 8004242:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004246:	f803 2f01 	strb.w	r2, [r3, #1]!
 800424a:	e7f8      	b.n	800423e <memmove+0x12>
 800424c:	4402      	add	r2, r0
 800424e:	4601      	mov	r1, r0
 8004250:	428a      	cmp	r2, r1
 8004252:	d100      	bne.n	8004256 <memmove+0x2a>
 8004254:	bd10      	pop	{r4, pc}
 8004256:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800425a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800425e:	e7f7      	b.n	8004250 <memmove+0x24>

08004260 <_sbrk_r>:
 8004260:	b538      	push	{r3, r4, r5, lr}
 8004262:	4d06      	ldr	r5, [pc, #24]	@ (800427c <_sbrk_r+0x1c>)
 8004264:	2300      	movs	r3, #0
 8004266:	4604      	mov	r4, r0
 8004268:	4608      	mov	r0, r1
 800426a:	602b      	str	r3, [r5, #0]
 800426c:	f7fc fe2c 	bl	8000ec8 <_sbrk>
 8004270:	1c43      	adds	r3, r0, #1
 8004272:	d102      	bne.n	800427a <_sbrk_r+0x1a>
 8004274:	682b      	ldr	r3, [r5, #0]
 8004276:	b103      	cbz	r3, 800427a <_sbrk_r+0x1a>
 8004278:	6023      	str	r3, [r4, #0]
 800427a:	bd38      	pop	{r3, r4, r5, pc}
 800427c:	20000398 	.word	0x20000398

08004280 <_realloc_r>:
 8004280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004284:	4680      	mov	r8, r0
 8004286:	4615      	mov	r5, r2
 8004288:	460c      	mov	r4, r1
 800428a:	b921      	cbnz	r1, 8004296 <_realloc_r+0x16>
 800428c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004290:	4611      	mov	r1, r2
 8004292:	f7ff bc59 	b.w	8003b48 <_malloc_r>
 8004296:	b92a      	cbnz	r2, 80042a4 <_realloc_r+0x24>
 8004298:	f7ff fbea 	bl	8003a70 <_free_r>
 800429c:	2400      	movs	r4, #0
 800429e:	4620      	mov	r0, r4
 80042a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042a4:	f000 f81a 	bl	80042dc <_malloc_usable_size_r>
 80042a8:	4285      	cmp	r5, r0
 80042aa:	4606      	mov	r6, r0
 80042ac:	d802      	bhi.n	80042b4 <_realloc_r+0x34>
 80042ae:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80042b2:	d8f4      	bhi.n	800429e <_realloc_r+0x1e>
 80042b4:	4629      	mov	r1, r5
 80042b6:	4640      	mov	r0, r8
 80042b8:	f7ff fc46 	bl	8003b48 <_malloc_r>
 80042bc:	4607      	mov	r7, r0
 80042be:	2800      	cmp	r0, #0
 80042c0:	d0ec      	beq.n	800429c <_realloc_r+0x1c>
 80042c2:	42b5      	cmp	r5, r6
 80042c4:	462a      	mov	r2, r5
 80042c6:	4621      	mov	r1, r4
 80042c8:	bf28      	it	cs
 80042ca:	4632      	movcs	r2, r6
 80042cc:	f7ff fbc2 	bl	8003a54 <memcpy>
 80042d0:	4621      	mov	r1, r4
 80042d2:	4640      	mov	r0, r8
 80042d4:	f7ff fbcc 	bl	8003a70 <_free_r>
 80042d8:	463c      	mov	r4, r7
 80042da:	e7e0      	b.n	800429e <_realloc_r+0x1e>

080042dc <_malloc_usable_size_r>:
 80042dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042e0:	1f18      	subs	r0, r3, #4
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	bfbc      	itt	lt
 80042e6:	580b      	ldrlt	r3, [r1, r0]
 80042e8:	18c0      	addlt	r0, r0, r3
 80042ea:	4770      	bx	lr

080042ec <_init>:
 80042ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ee:	bf00      	nop
 80042f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042f2:	bc08      	pop	{r3}
 80042f4:	469e      	mov	lr, r3
 80042f6:	4770      	bx	lr

080042f8 <_fini>:
 80042f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042fa:	bf00      	nop
 80042fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042fe:	bc08      	pop	{r3}
 8004300:	469e      	mov	lr, r3
 8004302:	4770      	bx	lr
