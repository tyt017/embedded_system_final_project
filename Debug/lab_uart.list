
lab_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069f4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08006b84  08006b84  00007b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006cc0  08006cc0  00008064  2**0
                  CONTENTS
  4 .ARM          00000008  08006cc0  08006cc0  00007cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006cc8  08006cc8  00008064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006cc8  08006cc8  00007cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ccc  08006ccc  00007ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08006cd0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008064  2**0
                  CONTENTS
 10 .bss          0001306c  20000064  20000064  00008064  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200130d0  200130d0  00008064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008064  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001447a  00000000  00000000  00008094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e79  00000000  00000000  0001c50e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013b8  00000000  00000000  0001f388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f84  00000000  00000000  00020740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022382  00000000  00000000  000216c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001732d  00000000  00000000  00043a46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d50a7  00000000  00000000  0005ad73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012fe1a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000058c4  00000000  00000000  0012fe60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  00135724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006b6c 	.word	0x08006b6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	08006b6c 	.word	0x08006b6c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <lcd_send_cmd>:
int day=1;
int now=0;
char MonitorTset[100];

void lcd_send_cmd(char cmd)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b086      	sub	sp, #24
 8000574:	af02      	add	r7, sp, #8
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]
	char data_h,data_l;
	uint8_t frame_data[4];
	data_h = (cmd&0xf0);
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	f023 030f 	bic.w	r3, r3, #15
 8000580:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd <<4)&0xf0);
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	011b      	lsls	r3, r3, #4
 8000586:	73bb      	strb	r3, [r7, #14]
	frame_data[0] = data_h | 0x0C;
 8000588:	7bfb      	ldrb	r3, [r7, #15]
 800058a:	f043 030c 	orr.w	r3, r3, #12
 800058e:	b2db      	uxtb	r3, r3
 8000590:	723b      	strb	r3, [r7, #8]
	frame_data[1] = data_h | 0x08;
 8000592:	7bfb      	ldrb	r3, [r7, #15]
 8000594:	f043 0308 	orr.w	r3, r3, #8
 8000598:	b2db      	uxtb	r3, r3
 800059a:	727b      	strb	r3, [r7, #9]
	frame_data[2] = data_l | 0x0C;
 800059c:	7bbb      	ldrb	r3, [r7, #14]
 800059e:	f043 030c 	orr.w	r3, r3, #12
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	72bb      	strb	r3, [r7, #10]
	frame_data[3] = data_l | 0x08;
 80005a6:	7bbb      	ldrb	r3, [r7, #14]
 80005a8:	f043 0308 	orr.w	r3, r3, #8
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(&hi2c1,LCD_ADDRESS,(uint8_t *)frame_data,4,0x100);
 80005b0:	f107 0208 	add.w	r2, r7, #8
 80005b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2304      	movs	r3, #4
 80005bc:	214e      	movs	r1, #78	@ 0x4e
 80005be:	4803      	ldr	r0, [pc, #12]	@ (80005cc <lcd_send_cmd+0x5c>)
 80005c0:	f001 faec 	bl	8001b9c <HAL_I2C_Master_Transmit>

	//HAL_Delay(1);
}
 80005c4:	bf00      	nop
 80005c6:	3710      	adds	r7, #16
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	20000080 	.word	0x20000080

080005d0 <lcd_send_data>:

void lcd_send_data(char data)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af02      	add	r7, sp, #8
 80005d6:	4603      	mov	r3, r0
 80005d8:	71fb      	strb	r3, [r7, #7]
	char data_h,data_l;
	uint8_t frame_data[4];
	data_h = (data&0xf0);
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	f023 030f 	bic.w	r3, r3, #15
 80005e0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data <<4)&0xf0);
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	011b      	lsls	r3, r3, #4
 80005e6:	73bb      	strb	r3, [r7, #14]
	frame_data[0] = data_h | 0x0D;
 80005e8:	7bfb      	ldrb	r3, [r7, #15]
 80005ea:	f043 030d 	orr.w	r3, r3, #13
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	723b      	strb	r3, [r7, #8]
	frame_data[1] = data_h | 0x09;
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	f043 0309 	orr.w	r3, r3, #9
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	727b      	strb	r3, [r7, #9]
	frame_data[2] = data_l | 0x0D;
 80005fc:	7bbb      	ldrb	r3, [r7, #14]
 80005fe:	f043 030d 	orr.w	r3, r3, #13
 8000602:	b2db      	uxtb	r3, r3
 8000604:	72bb      	strb	r3, [r7, #10]
	frame_data[3] = data_l | 0x09;
 8000606:	7bbb      	ldrb	r3, [r7, #14]
 8000608:	f043 0309 	orr.w	r3, r3, #9
 800060c:	b2db      	uxtb	r3, r3
 800060e:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(&hi2c1,LCD_ADDRESS,(uint8_t *)frame_data,4,0x100);
 8000610:	f107 0208 	add.w	r2, r7, #8
 8000614:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000618:	9300      	str	r3, [sp, #0]
 800061a:	2304      	movs	r3, #4
 800061c:	214e      	movs	r1, #78	@ 0x4e
 800061e:	4803      	ldr	r0, [pc, #12]	@ (800062c <lcd_send_data+0x5c>)
 8000620:	f001 fabc 	bl	8001b9c <HAL_I2C_Master_Transmit>

	//HAL_Delay(1);
}
 8000624:	bf00      	nop
 8000626:	3710      	adds	r7, #16
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	20000080 	.word	0x20000080

08000630 <lcd_clear>:

void lcd_clear()
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8000634:	2001      	movs	r0, #1
 8000636:	f7ff ff9b 	bl	8000570 <lcd_send_cmd>
	HAL_Delay(1);
 800063a:	2001      	movs	r0, #1
 800063c:	f000 fe96 	bl	800136c <HAL_Delay>
}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}

08000644 <lcd_Init>:


void lcd_Init()
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	HAL_Delay(50);
 8000648:	2032      	movs	r0, #50	@ 0x32
 800064a:	f000 fe8f 	bl	800136c <HAL_Delay>
	lcd_send_cmd(0x30);
 800064e:	2030      	movs	r0, #48	@ 0x30
 8000650:	f7ff ff8e 	bl	8000570 <lcd_send_cmd>
	HAL_Delay(5);
 8000654:	2005      	movs	r0, #5
 8000656:	f000 fe89 	bl	800136c <HAL_Delay>
	lcd_send_cmd(0x30);
 800065a:	2030      	movs	r0, #48	@ 0x30
 800065c:	f7ff ff88 	bl	8000570 <lcd_send_cmd>
	HAL_Delay(1);
 8000660:	2001      	movs	r0, #1
 8000662:	f000 fe83 	bl	800136c <HAL_Delay>
	lcd_send_cmd(0x30);
 8000666:	2030      	movs	r0, #48	@ 0x30
 8000668:	f7ff ff82 	bl	8000570 <lcd_send_cmd>
	HAL_Delay(10);
 800066c:	200a      	movs	r0, #10
 800066e:	f000 fe7d 	bl	800136c <HAL_Delay>
	lcd_send_cmd(0x20);
 8000672:	2020      	movs	r0, #32
 8000674:	f7ff ff7c 	bl	8000570 <lcd_send_cmd>
	HAL_Delay(10);
 8000678:	200a      	movs	r0, #10
 800067a:	f000 fe77 	bl	800136c <HAL_Delay>

	lcd_send_cmd(0x28);		//function set
 800067e:	2028      	movs	r0, #40	@ 0x28
 8000680:	f7ff ff76 	bl	8000570 <lcd_send_cmd>
	HAL_Delay(1);
 8000684:	2001      	movs	r0, #1
 8000686:	f000 fe71 	bl	800136c <HAL_Delay>
	lcd_send_cmd(0x08);		//Display on/off
 800068a:	2008      	movs	r0, #8
 800068c:	f7ff ff70 	bl	8000570 <lcd_send_cmd>
	HAL_Delay(1);
 8000690:	2001      	movs	r0, #1
 8000692:	f000 fe6b 	bl	800136c <HAL_Delay>
	lcd_send_cmd(0x01);		//clear display
 8000696:	2001      	movs	r0, #1
 8000698:	f7ff ff6a 	bl	8000570 <lcd_send_cmd>
	HAL_Delay(1);
 800069c:	2001      	movs	r0, #1
 800069e:	f000 fe65 	bl	800136c <HAL_Delay>
	lcd_send_cmd(0x06);		//Enter mode
 80006a2:	2006      	movs	r0, #6
 80006a4:	f7ff ff64 	bl	8000570 <lcd_send_cmd>
	HAL_Delay(1);
 80006a8:	2001      	movs	r0, #1
 80006aa:	f000 fe5f 	bl	800136c <HAL_Delay>
	lcd_send_cmd(0x0C);		//Display on/off
 80006ae:	200c      	movs	r0, #12
 80006b0:	f7ff ff5e 	bl	8000570 <lcd_send_cmd>
	HAL_Delay(1);
 80006b4:	2001      	movs	r0, #1
 80006b6:	f000 fe59 	bl	800136c <HAL_Delay>

}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}

080006be <lcd_send_string>:

void lcd_send_string (char *str)
{
 80006be:	b580      	push	{r7, lr}
 80006c0:	b082      	sub	sp, #8
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	6078      	str	r0, [r7, #4]
	while(*str)
 80006c6:	e006      	b.n	80006d6 <lcd_send_string+0x18>
	{
		lcd_send_data(*str++);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	1c5a      	adds	r2, r3, #1
 80006cc:	607a      	str	r2, [r7, #4]
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff ff7d 	bl	80005d0 <lcd_send_data>
	while(*str)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d1f4      	bne.n	80006c8 <lcd_send_string+0xa>
	}
	HAL_Delay(1);
 80006de:	2001      	movs	r0, #1
 80006e0:	f000 fe44 	bl	800136c <HAL_Delay>
}
 80006e4:	bf00      	nop
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}

080006ec <lcd_put_cur>:

void lcd_put_cur(uint8_t row,uint8_t col) // the location on the lcd screen
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	460a      	mov	r2, r1
 80006f6:	71fb      	strb	r3, [r7, #7]
 80006f8:	4613      	mov	r3, r2
 80006fa:	71bb      	strb	r3, [r7, #6]
	lcd_send_cmd(0x80 | (col + (0x40 * row)));
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	019b      	lsls	r3, r3, #6
 8000700:	b2da      	uxtb	r2, r3
 8000702:	79bb      	ldrb	r3, [r7, #6]
 8000704:	4413      	add	r3, r2
 8000706:	b2db      	uxtb	r3, r3
 8000708:	b25b      	sxtb	r3, r3
 800070a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800070e:	b25b      	sxtb	r3, r3
 8000710:	b2db      	uxtb	r3, r3
 8000712:	4618      	mov	r0, r3
 8000714:	f7ff ff2c 	bl	8000570 <lcd_send_cmd>
}
 8000718:	bf00      	nop
 800071a:	3708      	adds	r7, #8
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}

08000720 <I2C_Scan>:

void I2C_Scan(I2C_HandleTypeDef *hi2c) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b094      	sub	sp, #80	@ 0x50
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
    char msg[64];
    for (uint8_t addr = 1; addr < 127; addr++) {
 8000728:	2301      	movs	r3, #1
 800072a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800072e:	e028      	b.n	8000782 <I2C_Scan+0x62>
        if (HAL_I2C_IsDeviceReady(hi2c, addr << 1, 1, 10) == HAL_OK) {
 8000730:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000734:	b29b      	uxth	r3, r3
 8000736:	005b      	lsls	r3, r3, #1
 8000738:	b299      	uxth	r1, r3
 800073a:	230a      	movs	r3, #10
 800073c:	2201      	movs	r2, #1
 800073e:	6878      	ldr	r0, [r7, #4]
 8000740:	f001 fb2a 	bl	8001d98 <HAL_I2C_IsDeviceReady>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d116      	bne.n	8000778 <I2C_Scan+0x58>
            sprintf(msg, "Found device at 0x%02X\r\n", addr << 1);
 800074a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800074e:	005a      	lsls	r2, r3, #1
 8000750:	f107 030c 	add.w	r3, r7, #12
 8000754:	490f      	ldr	r1, [pc, #60]	@ (8000794 <I2C_Scan+0x74>)
 8000756:	4618      	mov	r0, r3
 8000758:	f005 fd68 	bl	800622c <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 0xffff);
 800075c:	f107 030c 	add.w	r3, r7, #12
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff fd35 	bl	80001d0 <strlen>
 8000766:	4603      	mov	r3, r0
 8000768:	b29a      	uxth	r2, r3
 800076a:	f107 010c 	add.w	r1, r7, #12
 800076e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000772:	4809      	ldr	r0, [pc, #36]	@ (8000798 <I2C_Scan+0x78>)
 8000774:	f002 fe50 	bl	8003418 <HAL_UART_Transmit>
    for (uint8_t addr = 1; addr < 127; addr++) {
 8000778:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800077c:	3301      	adds	r3, #1
 800077e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8000782:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000786:	2b7e      	cmp	r3, #126	@ 0x7e
 8000788:	d9d2      	bls.n	8000730 <I2C_Scan+0x10>
        }
    }
}
 800078a:	bf00      	nop
 800078c:	bf00      	nop
 800078e:	3750      	adds	r7, #80	@ 0x50
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	08006b84 	.word	0x08006b84
 8000798:	200000d4 	.word	0x200000d4

0800079c <incomingImpulse>:

void incomingImpulse() {
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
	for (;;) {
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 0) {
 80007a0:	2101      	movs	r1, #1
 80007a2:	480b      	ldr	r0, [pc, #44]	@ (80007d0 <incomingImpulse+0x34>)
 80007a4:	f001 f884 	bl	80018b0 <HAL_GPIO_ReadPin>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d1f8      	bne.n	80007a0 <incomingImpulse+0x4>
			while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 0){}
 80007ae:	bf00      	nop
 80007b0:	2101      	movs	r1, #1
 80007b2:	4807      	ldr	r0, [pc, #28]	@ (80007d0 <incomingImpulse+0x34>)
 80007b4:	f001 f87c 	bl	80018b0 <HAL_GPIO_ReadPin>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d0f8      	beq.n	80007b0 <incomingImpulse+0x14>
			impulse = impulse + 1;
 80007be:	4b05      	ldr	r3, [pc, #20]	@ (80007d4 <incomingImpulse+0x38>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	3301      	adds	r3, #1
 80007c4:	4a03      	ldr	r2, [pc, #12]	@ (80007d4 <incomingImpulse+0x38>)
 80007c6:	6013      	str	r3, [r2, #0]
			i = 0;
 80007c8:	4b03      	ldr	r3, [pc, #12]	@ (80007d8 <incomingImpulse+0x3c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 0) {
 80007ce:	e7e7      	b.n	80007a0 <incomingImpulse+0x4>
 80007d0:	40020000 	.word	0x40020000
 80007d4:	20000128 	.word	0x20000128
 80007d8:	20000124 	.word	0x20000124

080007dc <COIN_Task>:
		}
	}
}

void COIN_Task() {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af02      	add	r7, sp, #8
  // put your main code here, to run repeatedly:

	memset(MonitorTset,'\0',sizeof(MonitorTset));
 80007e2:	2264      	movs	r2, #100	@ 0x64
 80007e4:	2100      	movs	r1, #0
 80007e6:	488d      	ldr	r0, [pc, #564]	@ (8000a1c <COIN_Task+0x240>)
 80007e8:	f005 fd40 	bl	800626c <memset>
	I2C_Scan(&hi2c1);
 80007ec:	488c      	ldr	r0, [pc, #560]	@ (8000a20 <COIN_Task+0x244>)
 80007ee:	f7ff ff97 	bl	8000720 <I2C_Scan>
	for (;;) {
	  i = i + 1;
 80007f2:	4b8c      	ldr	r3, [pc, #560]	@ (8000a24 <COIN_Task+0x248>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	3301      	adds	r3, #1
 80007f8:	4a8a      	ldr	r2, [pc, #552]	@ (8000a24 <COIN_Task+0x248>)
 80007fa:	6013      	str	r3, [r2, #0]

	  if (i >= 5 && impulse == 1){
 80007fc:	4b89      	ldr	r3, [pc, #548]	@ (8000a24 <COIN_Task+0x248>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2b04      	cmp	r3, #4
 8000802:	dd52      	ble.n	80008aa <COIN_Task+0xce>
 8000804:	4b88      	ldr	r3, [pc, #544]	@ (8000a28 <COIN_Task+0x24c>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2b01      	cmp	r3, #1
 800080a:	d14e      	bne.n	80008aa <COIN_Task+0xce>
		total = total + 10;
 800080c:	4b87      	ldr	r3, [pc, #540]	@ (8000a2c <COIN_Task+0x250>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	330a      	adds	r3, #10
 8000812:	4a86      	ldr	r2, [pc, #536]	@ (8000a2c <COIN_Task+0x250>)
 8000814:	6013      	str	r3, [r2, #0]
		now = now + 10;
 8000816:	4b86      	ldr	r3, [pc, #536]	@ (8000a30 <COIN_Task+0x254>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	330a      	adds	r3, #10
 800081c:	4a84      	ldr	r2, [pc, #528]	@ (8000a30 <COIN_Task+0x254>)
 800081e:	6013      	str	r3, [r2, #0]

		while (day <= now){
 8000820:	e00b      	b.n	800083a <COIN_Task+0x5e>
		  now = now - day;
 8000822:	4b83      	ldr	r3, [pc, #524]	@ (8000a30 <COIN_Task+0x254>)
 8000824:	681a      	ldr	r2, [r3, #0]
 8000826:	4b83      	ldr	r3, [pc, #524]	@ (8000a34 <COIN_Task+0x258>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	1ad3      	subs	r3, r2, r3
 800082c:	4a80      	ldr	r2, [pc, #512]	@ (8000a30 <COIN_Task+0x254>)
 800082e:	6013      	str	r3, [r2, #0]
		  day = day + 1;
 8000830:	4b80      	ldr	r3, [pc, #512]	@ (8000a34 <COIN_Task+0x258>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	3301      	adds	r3, #1
 8000836:	4a7f      	ldr	r2, [pc, #508]	@ (8000a34 <COIN_Task+0x258>)
 8000838:	6013      	str	r3, [r2, #0]
		while (day <= now){
 800083a:	4b7e      	ldr	r3, [pc, #504]	@ (8000a34 <COIN_Task+0x258>)
 800083c:	681a      	ldr	r2, [r3, #0]
 800083e:	4b7c      	ldr	r3, [pc, #496]	@ (8000a30 <COIN_Task+0x254>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	429a      	cmp	r2, r3
 8000844:	dded      	ble.n	8000822 <COIN_Task+0x46>
		}

		// uart
		sprintf(MonitorTset,"The day is %d. Today already saved %d. The total value is %d.\n\r",day, now, total);
 8000846:	4b7b      	ldr	r3, [pc, #492]	@ (8000a34 <COIN_Task+0x258>)
 8000848:	681a      	ldr	r2, [r3, #0]
 800084a:	4b79      	ldr	r3, [pc, #484]	@ (8000a30 <COIN_Task+0x254>)
 800084c:	6819      	ldr	r1, [r3, #0]
 800084e:	4b77      	ldr	r3, [pc, #476]	@ (8000a2c <COIN_Task+0x250>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	9300      	str	r3, [sp, #0]
 8000854:	460b      	mov	r3, r1
 8000856:	4978      	ldr	r1, [pc, #480]	@ (8000a38 <COIN_Task+0x25c>)
 8000858:	4870      	ldr	r0, [pc, #448]	@ (8000a1c <COIN_Task+0x240>)
 800085a:	f005 fce7 	bl	800622c <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t *)MonitorTset,strlen(MonitorTset),0xffff);
 800085e:	486f      	ldr	r0, [pc, #444]	@ (8000a1c <COIN_Task+0x240>)
 8000860:	f7ff fcb6 	bl	80001d0 <strlen>
 8000864:	4603      	mov	r3, r0
 8000866:	b29a      	uxth	r2, r3
 8000868:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800086c:	496b      	ldr	r1, [pc, #428]	@ (8000a1c <COIN_Task+0x240>)
 800086e:	4873      	ldr	r0, [pc, #460]	@ (8000a3c <COIN_Task+0x260>)
 8000870:	f002 fdd2 	bl	8003418 <HAL_UART_Transmit>

		lcd_clear();
 8000874:	f7ff fedc 	bl	8000630 <lcd_clear>
		lcd_put_cur(0,0);
 8000878:	2100      	movs	r1, #0
 800087a:	2000      	movs	r0, #0
 800087c:	f7ff ff36 	bl	80006ec <lcd_put_cur>
		lcd_send_string("Insert 10 dollar.");
 8000880:	486f      	ldr	r0, [pc, #444]	@ (8000a40 <COIN_Task+0x264>)
 8000882:	f7ff ff1c 	bl	80006be <lcd_send_string>
		lcd_put_cur(1,0);
 8000886:	2100      	movs	r1, #0
 8000888:	2001      	movs	r0, #1
 800088a:	f7ff ff2f 	bl	80006ec <lcd_put_cur>
		sprintf(MonitorTset,"Total value is %d", total);
 800088e:	4b67      	ldr	r3, [pc, #412]	@ (8000a2c <COIN_Task+0x250>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	461a      	mov	r2, r3
 8000894:	496b      	ldr	r1, [pc, #428]	@ (8000a44 <COIN_Task+0x268>)
 8000896:	4861      	ldr	r0, [pc, #388]	@ (8000a1c <COIN_Task+0x240>)
 8000898:	f005 fcc8 	bl	800622c <siprintf>
		lcd_send_string(MonitorTset);
 800089c:	485f      	ldr	r0, [pc, #380]	@ (8000a1c <COIN_Task+0x240>)
 800089e:	f7ff ff0e 	bl	80006be <lcd_send_string>

		impulse = 0;
 80008a2:	4b61      	ldr	r3, [pc, #388]	@ (8000a28 <COIN_Task+0x24c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
	  if (i >= 5 && impulse == 1){
 80008a8:	e0ac      	b.n	8000a04 <COIN_Task+0x228>
	  }
	  else if (i >= 5 && impulse == 2){
 80008aa:	4b5e      	ldr	r3, [pc, #376]	@ (8000a24 <COIN_Task+0x248>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	2b04      	cmp	r3, #4
 80008b0:	dd52      	ble.n	8000958 <COIN_Task+0x17c>
 80008b2:	4b5d      	ldr	r3, [pc, #372]	@ (8000a28 <COIN_Task+0x24c>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	2b02      	cmp	r3, #2
 80008b8:	d14e      	bne.n	8000958 <COIN_Task+0x17c>
		total = total + 5;
 80008ba:	4b5c      	ldr	r3, [pc, #368]	@ (8000a2c <COIN_Task+0x250>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	3305      	adds	r3, #5
 80008c0:	4a5a      	ldr	r2, [pc, #360]	@ (8000a2c <COIN_Task+0x250>)
 80008c2:	6013      	str	r3, [r2, #0]
		now = now + 5;
 80008c4:	4b5a      	ldr	r3, [pc, #360]	@ (8000a30 <COIN_Task+0x254>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	3305      	adds	r3, #5
 80008ca:	4a59      	ldr	r2, [pc, #356]	@ (8000a30 <COIN_Task+0x254>)
 80008cc:	6013      	str	r3, [r2, #0]

		while(day <= now){
 80008ce:	e00b      	b.n	80008e8 <COIN_Task+0x10c>
		  now = now - day;
 80008d0:	4b57      	ldr	r3, [pc, #348]	@ (8000a30 <COIN_Task+0x254>)
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	4b57      	ldr	r3, [pc, #348]	@ (8000a34 <COIN_Task+0x258>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	1ad3      	subs	r3, r2, r3
 80008da:	4a55      	ldr	r2, [pc, #340]	@ (8000a30 <COIN_Task+0x254>)
 80008dc:	6013      	str	r3, [r2, #0]
		  day = day + 1;
 80008de:	4b55      	ldr	r3, [pc, #340]	@ (8000a34 <COIN_Task+0x258>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	3301      	adds	r3, #1
 80008e4:	4a53      	ldr	r2, [pc, #332]	@ (8000a34 <COIN_Task+0x258>)
 80008e6:	6013      	str	r3, [r2, #0]
		while(day <= now){
 80008e8:	4b52      	ldr	r3, [pc, #328]	@ (8000a34 <COIN_Task+0x258>)
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	4b50      	ldr	r3, [pc, #320]	@ (8000a30 <COIN_Task+0x254>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	dded      	ble.n	80008d0 <COIN_Task+0xf4>
		}

		sprintf(MonitorTset,"The day is %d. Today already saved %d. The total value is %d.\n\r",day, now, total);
 80008f4:	4b4f      	ldr	r3, [pc, #316]	@ (8000a34 <COIN_Task+0x258>)
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	4b4d      	ldr	r3, [pc, #308]	@ (8000a30 <COIN_Task+0x254>)
 80008fa:	6819      	ldr	r1, [r3, #0]
 80008fc:	4b4b      	ldr	r3, [pc, #300]	@ (8000a2c <COIN_Task+0x250>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	9300      	str	r3, [sp, #0]
 8000902:	460b      	mov	r3, r1
 8000904:	494c      	ldr	r1, [pc, #304]	@ (8000a38 <COIN_Task+0x25c>)
 8000906:	4845      	ldr	r0, [pc, #276]	@ (8000a1c <COIN_Task+0x240>)
 8000908:	f005 fc90 	bl	800622c <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t *)MonitorTset,strlen(MonitorTset),0xffff);
 800090c:	4843      	ldr	r0, [pc, #268]	@ (8000a1c <COIN_Task+0x240>)
 800090e:	f7ff fc5f 	bl	80001d0 <strlen>
 8000912:	4603      	mov	r3, r0
 8000914:	b29a      	uxth	r2, r3
 8000916:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800091a:	4940      	ldr	r1, [pc, #256]	@ (8000a1c <COIN_Task+0x240>)
 800091c:	4847      	ldr	r0, [pc, #284]	@ (8000a3c <COIN_Task+0x260>)
 800091e:	f002 fd7b 	bl	8003418 <HAL_UART_Transmit>

		lcd_clear();
 8000922:	f7ff fe85 	bl	8000630 <lcd_clear>
		lcd_put_cur(0,0);
 8000926:	2100      	movs	r1, #0
 8000928:	2000      	movs	r0, #0
 800092a:	f7ff fedf 	bl	80006ec <lcd_put_cur>
		lcd_send_string("Insert 5 dollar.");
 800092e:	4846      	ldr	r0, [pc, #280]	@ (8000a48 <COIN_Task+0x26c>)
 8000930:	f7ff fec5 	bl	80006be <lcd_send_string>
		lcd_put_cur(1,0);
 8000934:	2100      	movs	r1, #0
 8000936:	2001      	movs	r0, #1
 8000938:	f7ff fed8 	bl	80006ec <lcd_put_cur>
		sprintf(MonitorTset,"Total value is %d", total);
 800093c:	4b3b      	ldr	r3, [pc, #236]	@ (8000a2c <COIN_Task+0x250>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	461a      	mov	r2, r3
 8000942:	4940      	ldr	r1, [pc, #256]	@ (8000a44 <COIN_Task+0x268>)
 8000944:	4835      	ldr	r0, [pc, #212]	@ (8000a1c <COIN_Task+0x240>)
 8000946:	f005 fc71 	bl	800622c <siprintf>
		lcd_send_string(MonitorTset);
 800094a:	4834      	ldr	r0, [pc, #208]	@ (8000a1c <COIN_Task+0x240>)
 800094c:	f7ff feb7 	bl	80006be <lcd_send_string>

		impulse = 0;
 8000950:	4b35      	ldr	r3, [pc, #212]	@ (8000a28 <COIN_Task+0x24c>)
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
	  else if (i >= 5 && impulse == 2){
 8000956:	e055      	b.n	8000a04 <COIN_Task+0x228>
	  }
	  else if (i >= 5 && impulse == 3){
 8000958:	4b32      	ldr	r3, [pc, #200]	@ (8000a24 <COIN_Task+0x248>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2b04      	cmp	r3, #4
 800095e:	dd51      	ble.n	8000a04 <COIN_Task+0x228>
 8000960:	4b31      	ldr	r3, [pc, #196]	@ (8000a28 <COIN_Task+0x24c>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	2b03      	cmp	r3, #3
 8000966:	d14d      	bne.n	8000a04 <COIN_Task+0x228>
		total = total + 1;
 8000968:	4b30      	ldr	r3, [pc, #192]	@ (8000a2c <COIN_Task+0x250>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	3301      	adds	r3, #1
 800096e:	4a2f      	ldr	r2, [pc, #188]	@ (8000a2c <COIN_Task+0x250>)
 8000970:	6013      	str	r3, [r2, #0]
		now = now + 1;
 8000972:	4b2f      	ldr	r3, [pc, #188]	@ (8000a30 <COIN_Task+0x254>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	3301      	adds	r3, #1
 8000978:	4a2d      	ldr	r2, [pc, #180]	@ (8000a30 <COIN_Task+0x254>)
 800097a:	6013      	str	r3, [r2, #0]

		while(day <= now){
 800097c:	e00b      	b.n	8000996 <COIN_Task+0x1ba>
		  now = now - day;
 800097e:	4b2c      	ldr	r3, [pc, #176]	@ (8000a30 <COIN_Task+0x254>)
 8000980:	681a      	ldr	r2, [r3, #0]
 8000982:	4b2c      	ldr	r3, [pc, #176]	@ (8000a34 <COIN_Task+0x258>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	1ad3      	subs	r3, r2, r3
 8000988:	4a29      	ldr	r2, [pc, #164]	@ (8000a30 <COIN_Task+0x254>)
 800098a:	6013      	str	r3, [r2, #0]
		  day = day + 1;
 800098c:	4b29      	ldr	r3, [pc, #164]	@ (8000a34 <COIN_Task+0x258>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	3301      	adds	r3, #1
 8000992:	4a28      	ldr	r2, [pc, #160]	@ (8000a34 <COIN_Task+0x258>)
 8000994:	6013      	str	r3, [r2, #0]
		while(day <= now){
 8000996:	4b27      	ldr	r3, [pc, #156]	@ (8000a34 <COIN_Task+0x258>)
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	4b25      	ldr	r3, [pc, #148]	@ (8000a30 <COIN_Task+0x254>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	429a      	cmp	r2, r3
 80009a0:	dded      	ble.n	800097e <COIN_Task+0x1a2>
		}

		sprintf(MonitorTset,"The day is %d. Today already saved %d. The total value is %d.\n\r",day, now, total);
 80009a2:	4b24      	ldr	r3, [pc, #144]	@ (8000a34 <COIN_Task+0x258>)
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	4b22      	ldr	r3, [pc, #136]	@ (8000a30 <COIN_Task+0x254>)
 80009a8:	6819      	ldr	r1, [r3, #0]
 80009aa:	4b20      	ldr	r3, [pc, #128]	@ (8000a2c <COIN_Task+0x250>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	9300      	str	r3, [sp, #0]
 80009b0:	460b      	mov	r3, r1
 80009b2:	4921      	ldr	r1, [pc, #132]	@ (8000a38 <COIN_Task+0x25c>)
 80009b4:	4819      	ldr	r0, [pc, #100]	@ (8000a1c <COIN_Task+0x240>)
 80009b6:	f005 fc39 	bl	800622c <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t *)MonitorTset,strlen(MonitorTset),0xffff);
 80009ba:	4818      	ldr	r0, [pc, #96]	@ (8000a1c <COIN_Task+0x240>)
 80009bc:	f7ff fc08 	bl	80001d0 <strlen>
 80009c0:	4603      	mov	r3, r0
 80009c2:	b29a      	uxth	r2, r3
 80009c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80009c8:	4914      	ldr	r1, [pc, #80]	@ (8000a1c <COIN_Task+0x240>)
 80009ca:	481c      	ldr	r0, [pc, #112]	@ (8000a3c <COIN_Task+0x260>)
 80009cc:	f002 fd24 	bl	8003418 <HAL_UART_Transmit>

		lcd_clear();
 80009d0:	f7ff fe2e 	bl	8000630 <lcd_clear>
		lcd_put_cur(0,0);
 80009d4:	2100      	movs	r1, #0
 80009d6:	2000      	movs	r0, #0
 80009d8:	f7ff fe88 	bl	80006ec <lcd_put_cur>
		lcd_send_string("Insert 1 dollar.");
 80009dc:	481b      	ldr	r0, [pc, #108]	@ (8000a4c <COIN_Task+0x270>)
 80009de:	f7ff fe6e 	bl	80006be <lcd_send_string>
		lcd_put_cur(1,0);
 80009e2:	2100      	movs	r1, #0
 80009e4:	2001      	movs	r0, #1
 80009e6:	f7ff fe81 	bl	80006ec <lcd_put_cur>
		sprintf(MonitorTset,"Total value is %d", total);
 80009ea:	4b10      	ldr	r3, [pc, #64]	@ (8000a2c <COIN_Task+0x250>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	461a      	mov	r2, r3
 80009f0:	4914      	ldr	r1, [pc, #80]	@ (8000a44 <COIN_Task+0x268>)
 80009f2:	480a      	ldr	r0, [pc, #40]	@ (8000a1c <COIN_Task+0x240>)
 80009f4:	f005 fc1a 	bl	800622c <siprintf>
		lcd_send_string(MonitorTset);
 80009f8:	4808      	ldr	r0, [pc, #32]	@ (8000a1c <COIN_Task+0x240>)
 80009fa:	f7ff fe60 	bl	80006be <lcd_send_string>

		impulse=0;
 80009fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000a28 <COIN_Task+0x24c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
	  }

	  if (day > 365){
 8000a04:	4b0b      	ldr	r3, [pc, #44]	@ (8000a34 <COIN_Task+0x258>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f5b3 7fb7 	cmp.w	r3, #366	@ 0x16e
 8000a0c:	db02      	blt.n	8000a14 <COIN_Task+0x238>
		day = 1;
 8000a0e:	4b09      	ldr	r3, [pc, #36]	@ (8000a34 <COIN_Task+0x258>)
 8000a10:	2201      	movs	r2, #1
 8000a12:	601a      	str	r2, [r3, #0]
	  }

	  vTaskDelay(100);
 8000a14:	2064      	movs	r0, #100	@ 0x64
 8000a16:	f003 ff67 	bl	80048e8 <vTaskDelay>
	  i = i + 1;
 8000a1a:	e6ea      	b.n	80007f2 <COIN_Task+0x16>
 8000a1c:	20000134 	.word	0x20000134
 8000a20:	20000080 	.word	0x20000080
 8000a24:	20000124 	.word	0x20000124
 8000a28:	20000128 	.word	0x20000128
 8000a2c:	2000012c 	.word	0x2000012c
 8000a30:	20000130 	.word	0x20000130
 8000a34:	20000000 	.word	0x20000000
 8000a38:	08006ba0 	.word	0x08006ba0
 8000a3c:	200000d4 	.word	0x200000d4
 8000a40:	08006be0 	.word	0x08006be0
 8000a44:	08006bf4 	.word	0x08006bf4
 8000a48:	08006c08 	.word	0x08006c08
 8000a4c:	08006c1c 	.word	0x08006c1c

08000a50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a56:	f000 fc47 	bl	80012e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a5a:	f000 f853 	bl	8000b04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a5e:	f000 f913 	bl	8000c88 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a62:	f000 f8e7 	bl	8000c34 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000a66:	f000 f8b7 	bl	8000bd8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(30);
 8000a6a:	201e      	movs	r0, #30
 8000a6c:	f000 fc7e 	bl	800136c <HAL_Delay>
  lcd_Init();
 8000a70:	f7ff fde8 	bl	8000644 <lcd_Init>

  xTaskCreate(
 8000a74:	4b17      	ldr	r3, [pc, #92]	@ (8000ad4 <main+0x84>)
 8000a76:	9301      	str	r3, [sp, #4]
 8000a78:	2301      	movs	r3, #1
 8000a7a:	9300      	str	r3, [sp, #0]
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	2280      	movs	r2, #128	@ 0x80
 8000a80:	4915      	ldr	r1, [pc, #84]	@ (8000ad8 <main+0x88>)
 8000a82:	4816      	ldr	r0, [pc, #88]	@ (8000adc <main+0x8c>)
 8000a84:	f003 fdf0 	bl	8004668 <xTaskCreate>
		  128,
		  NULL,
		  1,
		  &xcoinHandle);

  xTaskCreate(
 8000a88:	4b15      	ldr	r3, [pc, #84]	@ (8000ae0 <main+0x90>)
 8000a8a:	9301      	str	r3, [sp, #4]
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	9300      	str	r3, [sp, #0]
 8000a90:	2300      	movs	r3, #0
 8000a92:	2280      	movs	r2, #128	@ 0x80
 8000a94:	4913      	ldr	r1, [pc, #76]	@ (8000ae4 <main+0x94>)
 8000a96:	4814      	ldr	r0, [pc, #80]	@ (8000ae8 <main+0x98>)
 8000a98:	f003 fde6 	bl	8004668 <xTaskCreate>
  		  128,
  		  NULL,
  		  1,
  		  &xpulseHandle);

  vTaskStartScheduler();
 8000a9c:	f003 ff5a 	bl	8004954 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  sprintf(MonitorTset,"The day is %d. Today already saved %d. The total value is %d.\n\r",day, now, total);
 8000aa0:	4b12      	ldr	r3, [pc, #72]	@ (8000aec <main+0x9c>)
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	4b12      	ldr	r3, [pc, #72]	@ (8000af0 <main+0xa0>)
 8000aa6:	6819      	ldr	r1, [r3, #0]
 8000aa8:	4b12      	ldr	r3, [pc, #72]	@ (8000af4 <main+0xa4>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	9300      	str	r3, [sp, #0]
 8000aae:	460b      	mov	r3, r1
 8000ab0:	4911      	ldr	r1, [pc, #68]	@ (8000af8 <main+0xa8>)
 8000ab2:	4812      	ldr	r0, [pc, #72]	@ (8000afc <main+0xac>)
 8000ab4:	f005 fbba 	bl	800622c <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t *)MonitorTset,strlen(MonitorTset),0xffff);
 8000ab8:	4810      	ldr	r0, [pc, #64]	@ (8000afc <main+0xac>)
 8000aba:	f7ff fb89 	bl	80001d0 <strlen>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	b29a      	uxth	r2, r3
 8000ac2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ac6:	490d      	ldr	r1, [pc, #52]	@ (8000afc <main+0xac>)
 8000ac8:	480d      	ldr	r0, [pc, #52]	@ (8000b00 <main+0xb0>)
 8000aca:	f002 fca5 	bl	8003418 <HAL_UART_Transmit>


  while (1)
 8000ace:	bf00      	nop
 8000ad0:	e7fd      	b.n	8000ace <main+0x7e>
 8000ad2:	bf00      	nop
 8000ad4:	2000011c 	.word	0x2000011c
 8000ad8:	08006c48 	.word	0x08006c48
 8000adc:	080007dd 	.word	0x080007dd
 8000ae0:	20000120 	.word	0x20000120
 8000ae4:	08006c54 	.word	0x08006c54
 8000ae8:	0800079d 	.word	0x0800079d
 8000aec:	20000000 	.word	0x20000000
 8000af0:	20000130 	.word	0x20000130
 8000af4:	2000012c 	.word	0x2000012c
 8000af8:	08006ba0 	.word	0x08006ba0
 8000afc:	20000134 	.word	0x20000134
 8000b00:	200000d4 	.word	0x200000d4

08000b04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b094      	sub	sp, #80	@ 0x50
 8000b08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b0a:	f107 0320 	add.w	r3, r7, #32
 8000b0e:	2230      	movs	r2, #48	@ 0x30
 8000b10:	2100      	movs	r1, #0
 8000b12:	4618      	mov	r0, r3
 8000b14:	f005 fbaa 	bl	800626c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b18:	f107 030c 	add.w	r3, r7, #12
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60bb      	str	r3, [r7, #8]
 8000b2c:	4b28      	ldr	r3, [pc, #160]	@ (8000bd0 <SystemClock_Config+0xcc>)
 8000b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b30:	4a27      	ldr	r2, [pc, #156]	@ (8000bd0 <SystemClock_Config+0xcc>)
 8000b32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b36:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b38:	4b25      	ldr	r3, [pc, #148]	@ (8000bd0 <SystemClock_Config+0xcc>)
 8000b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b44:	2300      	movs	r3, #0
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	4b22      	ldr	r3, [pc, #136]	@ (8000bd4 <SystemClock_Config+0xd0>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a21      	ldr	r2, [pc, #132]	@ (8000bd4 <SystemClock_Config+0xd0>)
 8000b4e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b52:	6013      	str	r3, [r2, #0]
 8000b54:	4b1f      	ldr	r3, [pc, #124]	@ (8000bd4 <SystemClock_Config+0xd0>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b60:	2302      	movs	r3, #2
 8000b62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b64:	2301      	movs	r3, #1
 8000b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b68:	2310      	movs	r3, #16
 8000b6a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b70:	2300      	movs	r3, #0
 8000b72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b74:	2308      	movs	r3, #8
 8000b76:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000b78:	2332      	movs	r3, #50	@ 0x32
 8000b7a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b7c:	2304      	movs	r3, #4
 8000b7e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b80:	2307      	movs	r3, #7
 8000b82:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b84:	f107 0320 	add.w	r3, r7, #32
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f001 fc8f 	bl	80024ac <HAL_RCC_OscConfig>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b94:	f000 f9d6 	bl	8000f44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b98:	230f      	movs	r3, #15
 8000b9a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ba4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ba8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000baa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bb0:	f107 030c 	add.w	r3, r7, #12
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f001 fef0 	bl	800299c <HAL_RCC_ClockConfig>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000bc2:	f000 f9bf 	bl	8000f44 <Error_Handler>
  }
}
 8000bc6:	bf00      	nop
 8000bc8:	3750      	adds	r7, #80	@ 0x50
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40023800 	.word	0x40023800
 8000bd4:	40007000 	.word	0x40007000

08000bd8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bdc:	4b12      	ldr	r3, [pc, #72]	@ (8000c28 <MX_I2C1_Init+0x50>)
 8000bde:	4a13      	ldr	r2, [pc, #76]	@ (8000c2c <MX_I2C1_Init+0x54>)
 8000be0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000be2:	4b11      	ldr	r3, [pc, #68]	@ (8000c28 <MX_I2C1_Init+0x50>)
 8000be4:	4a12      	ldr	r2, [pc, #72]	@ (8000c30 <MX_I2C1_Init+0x58>)
 8000be6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000be8:	4b0f      	ldr	r3, [pc, #60]	@ (8000c28 <MX_I2C1_Init+0x50>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000bee:	4b0e      	ldr	r3, [pc, #56]	@ (8000c28 <MX_I2C1_Init+0x50>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8000c28 <MX_I2C1_Init+0x50>)
 8000bf6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000bfa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8000c28 <MX_I2C1_Init+0x50>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c02:	4b09      	ldr	r3, [pc, #36]	@ (8000c28 <MX_I2C1_Init+0x50>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c08:	4b07      	ldr	r3, [pc, #28]	@ (8000c28 <MX_I2C1_Init+0x50>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c0e:	4b06      	ldr	r3, [pc, #24]	@ (8000c28 <MX_I2C1_Init+0x50>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c14:	4804      	ldr	r0, [pc, #16]	@ (8000c28 <MX_I2C1_Init+0x50>)
 8000c16:	f000 fe7d 	bl	8001914 <HAL_I2C_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c20:	f000 f990 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20000080 	.word	0x20000080
 8000c2c:	40005400 	.word	0x40005400
 8000c30:	000186a0 	.word	0x000186a0

08000c34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c38:	4b11      	ldr	r3, [pc, #68]	@ (8000c80 <MX_USART2_UART_Init+0x4c>)
 8000c3a:	4a12      	ldr	r2, [pc, #72]	@ (8000c84 <MX_USART2_UART_Init+0x50>)
 8000c3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c3e:	4b10      	ldr	r3, [pc, #64]	@ (8000c80 <MX_USART2_UART_Init+0x4c>)
 8000c40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c46:	4b0e      	ldr	r3, [pc, #56]	@ (8000c80 <MX_USART2_UART_Init+0x4c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c80 <MX_USART2_UART_Init+0x4c>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c52:	4b0b      	ldr	r3, [pc, #44]	@ (8000c80 <MX_USART2_UART_Init+0x4c>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c58:	4b09      	ldr	r3, [pc, #36]	@ (8000c80 <MX_USART2_UART_Init+0x4c>)
 8000c5a:	220c      	movs	r2, #12
 8000c5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c5e:	4b08      	ldr	r3, [pc, #32]	@ (8000c80 <MX_USART2_UART_Init+0x4c>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c64:	4b06      	ldr	r3, [pc, #24]	@ (8000c80 <MX_USART2_UART_Init+0x4c>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c6a:	4805      	ldr	r0, [pc, #20]	@ (8000c80 <MX_USART2_UART_Init+0x4c>)
 8000c6c:	f002 fb84 	bl	8003378 <HAL_UART_Init>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c76:	f000 f965 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	200000d4 	.word	0x200000d4
 8000c84:	40004400 	.word	0x40004400

08000c88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08c      	sub	sp, #48	@ 0x30
 8000c8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8e:	f107 031c 	add.w	r3, r7, #28
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
 8000c9a:	60da      	str	r2, [r3, #12]
 8000c9c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61bb      	str	r3, [r7, #24]
 8000ca2:	4b99      	ldr	r3, [pc, #612]	@ (8000f08 <MX_GPIO_Init+0x280>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca6:	4a98      	ldr	r2, [pc, #608]	@ (8000f08 <MX_GPIO_Init+0x280>)
 8000ca8:	f043 0310 	orr.w	r3, r3, #16
 8000cac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cae:	4b96      	ldr	r3, [pc, #600]	@ (8000f08 <MX_GPIO_Init+0x280>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb2:	f003 0310 	and.w	r3, r3, #16
 8000cb6:	61bb      	str	r3, [r7, #24]
 8000cb8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	617b      	str	r3, [r7, #20]
 8000cbe:	4b92      	ldr	r3, [pc, #584]	@ (8000f08 <MX_GPIO_Init+0x280>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc2:	4a91      	ldr	r2, [pc, #580]	@ (8000f08 <MX_GPIO_Init+0x280>)
 8000cc4:	f043 0304 	orr.w	r3, r3, #4
 8000cc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cca:	4b8f      	ldr	r3, [pc, #572]	@ (8000f08 <MX_GPIO_Init+0x280>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cce:	f003 0304 	and.w	r3, r3, #4
 8000cd2:	617b      	str	r3, [r7, #20]
 8000cd4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	4b8b      	ldr	r3, [pc, #556]	@ (8000f08 <MX_GPIO_Init+0x280>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cde:	4a8a      	ldr	r2, [pc, #552]	@ (8000f08 <MX_GPIO_Init+0x280>)
 8000ce0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ce4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ce6:	4b88      	ldr	r3, [pc, #544]	@ (8000f08 <MX_GPIO_Init+0x280>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	4b84      	ldr	r3, [pc, #528]	@ (8000f08 <MX_GPIO_Init+0x280>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfa:	4a83      	ldr	r2, [pc, #524]	@ (8000f08 <MX_GPIO_Init+0x280>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d02:	4b81      	ldr	r3, [pc, #516]	@ (8000f08 <MX_GPIO_Init+0x280>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60bb      	str	r3, [r7, #8]
 8000d12:	4b7d      	ldr	r3, [pc, #500]	@ (8000f08 <MX_GPIO_Init+0x280>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d16:	4a7c      	ldr	r2, [pc, #496]	@ (8000f08 <MX_GPIO_Init+0x280>)
 8000d18:	f043 0302 	orr.w	r3, r3, #2
 8000d1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d1e:	4b7a      	ldr	r3, [pc, #488]	@ (8000f08 <MX_GPIO_Init+0x280>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d22:	f003 0302 	and.w	r3, r3, #2
 8000d26:	60bb      	str	r3, [r7, #8]
 8000d28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	607b      	str	r3, [r7, #4]
 8000d2e:	4b76      	ldr	r3, [pc, #472]	@ (8000f08 <MX_GPIO_Init+0x280>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d32:	4a75      	ldr	r2, [pc, #468]	@ (8000f08 <MX_GPIO_Init+0x280>)
 8000d34:	f043 0308 	orr.w	r3, r3, #8
 8000d38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d3a:	4b73      	ldr	r3, [pc, #460]	@ (8000f08 <MX_GPIO_Init+0x280>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3e:	f003 0308 	and.w	r3, r3, #8
 8000d42:	607b      	str	r3, [r7, #4]
 8000d44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2108      	movs	r1, #8
 8000d4a:	4870      	ldr	r0, [pc, #448]	@ (8000f0c <MX_GPIO_Init+0x284>)
 8000d4c:	f000 fdc8 	bl	80018e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000d50:	2201      	movs	r2, #1
 8000d52:	2101      	movs	r1, #1
 8000d54:	486e      	ldr	r0, [pc, #440]	@ (8000f10 <MX_GPIO_Init+0x288>)
 8000d56:	f000 fdc3 	bl	80018e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000d60:	486c      	ldr	r0, [pc, #432]	@ (8000f14 <MX_GPIO_Init+0x28c>)
 8000d62:	f000 fdbd 	bl	80018e0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000d66:	2308      	movs	r3, #8
 8000d68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d72:	2300      	movs	r3, #0
 8000d74:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000d76:	f107 031c 	add.w	r3, r7, #28
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4863      	ldr	r0, [pc, #396]	@ (8000f0c <MX_GPIO_Init+0x284>)
 8000d7e:	f000 fbfb 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000d82:	2301      	movs	r3, #1
 8000d84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d86:	2301      	movs	r3, #1
 8000d88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d92:	f107 031c 	add.w	r3, r7, #28
 8000d96:	4619      	mov	r1, r3
 8000d98:	485d      	ldr	r0, [pc, #372]	@ (8000f10 <MX_GPIO_Init+0x288>)
 8000d9a:	f000 fbed 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000d9e:	2308      	movs	r3, #8
 8000da0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da2:	2302      	movs	r3, #2
 8000da4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000daa:	2300      	movs	r3, #0
 8000dac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000dae:	2305      	movs	r3, #5
 8000db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000db2:	f107 031c 	add.w	r3, r7, #28
 8000db6:	4619      	mov	r1, r3
 8000db8:	4855      	ldr	r0, [pc, #340]	@ (8000f10 <MX_GPIO_Init+0x288>)
 8000dba:	f000 fbdd 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dc2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000dc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000dcc:	f107 031c 	add.w	r3, r7, #28
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4851      	ldr	r0, [pc, #324]	@ (8000f18 <MX_GPIO_Init+0x290>)
 8000dd4:	f000 fbd0 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000dd8:	2310      	movs	r3, #16
 8000dda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de4:	2300      	movs	r3, #0
 8000de6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000de8:	2306      	movs	r3, #6
 8000dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000dec:	f107 031c 	add.w	r3, r7, #28
 8000df0:	4619      	mov	r1, r3
 8000df2:	4849      	ldr	r0, [pc, #292]	@ (8000f18 <MX_GPIO_Init+0x290>)
 8000df4:	f000 fbc0 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000df8:	23e0      	movs	r3, #224	@ 0xe0
 8000dfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e04:	2300      	movs	r3, #0
 8000e06:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e08:	2305      	movs	r3, #5
 8000e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0c:	f107 031c 	add.w	r3, r7, #28
 8000e10:	4619      	mov	r1, r3
 8000e12:	4841      	ldr	r0, [pc, #260]	@ (8000f18 <MX_GPIO_Init+0x290>)
 8000e14:	f000 fbb0 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000e18:	2304      	movs	r3, #4
 8000e1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000e24:	f107 031c 	add.w	r3, r7, #28
 8000e28:	4619      	mov	r1, r3
 8000e2a:	483c      	ldr	r0, [pc, #240]	@ (8000f1c <MX_GPIO_Init+0x294>)
 8000e2c:	f000 fba4 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000e30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e36:	2302      	movs	r3, #2
 8000e38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e42:	2305      	movs	r3, #5
 8000e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000e46:	f107 031c 	add.w	r3, r7, #28
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4833      	ldr	r0, [pc, #204]	@ (8000f1c <MX_GPIO_Init+0x294>)
 8000e4e:	f000 fb93 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000e52:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000e56:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e60:	2300      	movs	r3, #0
 8000e62:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e64:	f107 031c 	add.w	r3, r7, #28
 8000e68:	4619      	mov	r1, r3
 8000e6a:	482a      	ldr	r0, [pc, #168]	@ (8000f14 <MX_GPIO_Init+0x28c>)
 8000e6c:	f000 fb84 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000e70:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000e74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e76:	2302      	movs	r3, #2
 8000e78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e82:	2306      	movs	r3, #6
 8000e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e86:	f107 031c 	add.w	r3, r7, #28
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4820      	ldr	r0, [pc, #128]	@ (8000f10 <MX_GPIO_Init+0x288>)
 8000e8e:	f000 fb73 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000e92:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000ea0:	f107 031c 	add.w	r3, r7, #28
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	481c      	ldr	r0, [pc, #112]	@ (8000f18 <MX_GPIO_Init+0x290>)
 8000ea8:	f000 fb66 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000eac:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000eb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ebe:	230a      	movs	r3, #10
 8000ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec2:	f107 031c 	add.w	r3, r7, #28
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4813      	ldr	r0, [pc, #76]	@ (8000f18 <MX_GPIO_Init+0x290>)
 8000eca:	f000 fb55 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ece:	2320      	movs	r3, #32
 8000ed0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000eda:	f107 031c 	add.w	r3, r7, #28
 8000ede:	4619      	mov	r1, r3
 8000ee0:	480c      	ldr	r0, [pc, #48]	@ (8000f14 <MX_GPIO_Init+0x28c>)
 8000ee2:	f000 fb49 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000eea:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000eee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000ef4:	f107 031c 	add.w	r3, r7, #28
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4804      	ldr	r0, [pc, #16]	@ (8000f0c <MX_GPIO_Init+0x284>)
 8000efc:	f000 fb3c 	bl	8001578 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f00:	bf00      	nop
 8000f02:	3730      	adds	r7, #48	@ 0x30
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	40020800 	.word	0x40020800
 8000f14:	40020c00 	.word	0x40020c00
 8000f18:	40020000 	.word	0x40020000
 8000f1c:	40020400 	.word	0x40020400

08000f20 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a04      	ldr	r2, [pc, #16]	@ (8000f40 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d101      	bne.n	8000f36 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f32:	f000 f9fb 	bl	800132c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40001400 	.word	0x40001400

08000f44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f48:	b672      	cpsid	i
}
 8000f4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f4c:	bf00      	nop
 8000f4e:	e7fd      	b.n	8000f4c <Error_Handler+0x8>

08000f50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	607b      	str	r3, [r7, #4]
 8000f5a:	4b10      	ldr	r3, [pc, #64]	@ (8000f9c <HAL_MspInit+0x4c>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f5e:	4a0f      	ldr	r2, [pc, #60]	@ (8000f9c <HAL_MspInit+0x4c>)
 8000f60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f64:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f66:	4b0d      	ldr	r3, [pc, #52]	@ (8000f9c <HAL_MspInit+0x4c>)
 8000f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	603b      	str	r3, [r7, #0]
 8000f76:	4b09      	ldr	r3, [pc, #36]	@ (8000f9c <HAL_MspInit+0x4c>)
 8000f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f7a:	4a08      	ldr	r2, [pc, #32]	@ (8000f9c <HAL_MspInit+0x4c>)
 8000f7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f80:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f82:	4b06      	ldr	r3, [pc, #24]	@ (8000f9c <HAL_MspInit+0x4c>)
 8000f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f8a:	603b      	str	r3, [r7, #0]
 8000f8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	40023800 	.word	0x40023800

08000fa0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08a      	sub	sp, #40	@ 0x28
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a19      	ldr	r2, [pc, #100]	@ (8001024 <HAL_I2C_MspInit+0x84>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d12c      	bne.n	800101c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	613b      	str	r3, [r7, #16]
 8000fc6:	4b18      	ldr	r3, [pc, #96]	@ (8001028 <HAL_I2C_MspInit+0x88>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fca:	4a17      	ldr	r2, [pc, #92]	@ (8001028 <HAL_I2C_MspInit+0x88>)
 8000fcc:	f043 0302 	orr.w	r3, r3, #2
 8000fd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fd2:	4b15      	ldr	r3, [pc, #84]	@ (8001028 <HAL_I2C_MspInit+0x88>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	613b      	str	r3, [r7, #16]
 8000fdc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = lcd_scl_Pin|lcd_sda_Pin;
 8000fde:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000fe2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fe4:	2312      	movs	r3, #18
 8000fe6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fec:	2300      	movs	r3, #0
 8000fee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ff0:	2304      	movs	r3, #4
 8000ff2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff4:	f107 0314 	add.w	r3, r7, #20
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	480c      	ldr	r0, [pc, #48]	@ (800102c <HAL_I2C_MspInit+0x8c>)
 8000ffc:	f000 fabc 	bl	8001578 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001000:	2300      	movs	r3, #0
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	4b08      	ldr	r3, [pc, #32]	@ (8001028 <HAL_I2C_MspInit+0x88>)
 8001006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001008:	4a07      	ldr	r2, [pc, #28]	@ (8001028 <HAL_I2C_MspInit+0x88>)
 800100a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800100e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001010:	4b05      	ldr	r3, [pc, #20]	@ (8001028 <HAL_I2C_MspInit+0x88>)
 8001012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001014:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800101c:	bf00      	nop
 800101e:	3728      	adds	r7, #40	@ 0x28
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40005400 	.word	0x40005400
 8001028:	40023800 	.word	0x40023800
 800102c:	40020400 	.word	0x40020400

08001030 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08a      	sub	sp, #40	@ 0x28
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a19      	ldr	r2, [pc, #100]	@ (80010b4 <HAL_UART_MspInit+0x84>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d12b      	bne.n	80010aa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	613b      	str	r3, [r7, #16]
 8001056:	4b18      	ldr	r3, [pc, #96]	@ (80010b8 <HAL_UART_MspInit+0x88>)
 8001058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800105a:	4a17      	ldr	r2, [pc, #92]	@ (80010b8 <HAL_UART_MspInit+0x88>)
 800105c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001060:	6413      	str	r3, [r2, #64]	@ 0x40
 8001062:	4b15      	ldr	r3, [pc, #84]	@ (80010b8 <HAL_UART_MspInit+0x88>)
 8001064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800106a:	613b      	str	r3, [r7, #16]
 800106c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	4b11      	ldr	r3, [pc, #68]	@ (80010b8 <HAL_UART_MspInit+0x88>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001076:	4a10      	ldr	r2, [pc, #64]	@ (80010b8 <HAL_UART_MspInit+0x88>)
 8001078:	f043 0301 	orr.w	r3, r3, #1
 800107c:	6313      	str	r3, [r2, #48]	@ 0x30
 800107e:	4b0e      	ldr	r3, [pc, #56]	@ (80010b8 <HAL_UART_MspInit+0x88>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800108a:	230c      	movs	r3, #12
 800108c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108e:	2302      	movs	r3, #2
 8001090:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001096:	2303      	movs	r3, #3
 8001098:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800109a:	2307      	movs	r3, #7
 800109c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109e:	f107 0314 	add.w	r3, r7, #20
 80010a2:	4619      	mov	r1, r3
 80010a4:	4805      	ldr	r0, [pc, #20]	@ (80010bc <HAL_UART_MspInit+0x8c>)
 80010a6:	f000 fa67 	bl	8001578 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80010aa:	bf00      	nop
 80010ac:	3728      	adds	r7, #40	@ 0x28
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40004400 	.word	0x40004400
 80010b8:	40023800 	.word	0x40023800
 80010bc:	40020000 	.word	0x40020000

080010c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08e      	sub	sp, #56	@ 0x38
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80010c8:	2300      	movs	r3, #0
 80010ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80010cc:	2300      	movs	r3, #0
 80010ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80010d0:	2300      	movs	r3, #0
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	4b33      	ldr	r3, [pc, #204]	@ (80011a4 <HAL_InitTick+0xe4>)
 80010d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d8:	4a32      	ldr	r2, [pc, #200]	@ (80011a4 <HAL_InitTick+0xe4>)
 80010da:	f043 0320 	orr.w	r3, r3, #32
 80010de:	6413      	str	r3, [r2, #64]	@ 0x40
 80010e0:	4b30      	ldr	r3, [pc, #192]	@ (80011a4 <HAL_InitTick+0xe4>)
 80010e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e4:	f003 0320 	and.w	r3, r3, #32
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010ec:	f107 0210 	add.w	r2, r7, #16
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	4611      	mov	r1, r2
 80010f6:	4618      	mov	r0, r3
 80010f8:	f001 fe70 	bl	8002ddc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80010fc:	6a3b      	ldr	r3, [r7, #32]
 80010fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001102:	2b00      	cmp	r3, #0
 8001104:	d103      	bne.n	800110e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001106:	f001 fe41 	bl	8002d8c <HAL_RCC_GetPCLK1Freq>
 800110a:	6378      	str	r0, [r7, #52]	@ 0x34
 800110c:	e004      	b.n	8001118 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800110e:	f001 fe3d 	bl	8002d8c <HAL_RCC_GetPCLK1Freq>
 8001112:	4603      	mov	r3, r0
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001118:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800111a:	4a23      	ldr	r2, [pc, #140]	@ (80011a8 <HAL_InitTick+0xe8>)
 800111c:	fba2 2303 	umull	r2, r3, r2, r3
 8001120:	0c9b      	lsrs	r3, r3, #18
 8001122:	3b01      	subs	r3, #1
 8001124:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001126:	4b21      	ldr	r3, [pc, #132]	@ (80011ac <HAL_InitTick+0xec>)
 8001128:	4a21      	ldr	r2, [pc, #132]	@ (80011b0 <HAL_InitTick+0xf0>)
 800112a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 800112c:	4b1f      	ldr	r3, [pc, #124]	@ (80011ac <HAL_InitTick+0xec>)
 800112e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001132:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001134:	4a1d      	ldr	r2, [pc, #116]	@ (80011ac <HAL_InitTick+0xec>)
 8001136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001138:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 800113a:	4b1c      	ldr	r3, [pc, #112]	@ (80011ac <HAL_InitTick+0xec>)
 800113c:	2200      	movs	r2, #0
 800113e:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001140:	4b1a      	ldr	r3, [pc, #104]	@ (80011ac <HAL_InitTick+0xec>)
 8001142:	2200      	movs	r2, #0
 8001144:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001146:	4b19      	ldr	r3, [pc, #100]	@ (80011ac <HAL_InitTick+0xec>)
 8001148:	2200      	movs	r2, #0
 800114a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 800114c:	4817      	ldr	r0, [pc, #92]	@ (80011ac <HAL_InitTick+0xec>)
 800114e:	f001 fe77 	bl	8002e40 <HAL_TIM_Base_Init>
 8001152:	4603      	mov	r3, r0
 8001154:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001158:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800115c:	2b00      	cmp	r3, #0
 800115e:	d11b      	bne.n	8001198 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8001160:	4812      	ldr	r0, [pc, #72]	@ (80011ac <HAL_InitTick+0xec>)
 8001162:	f001 fec7 	bl	8002ef4 <HAL_TIM_Base_Start_IT>
 8001166:	4603      	mov	r3, r0
 8001168:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800116c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001170:	2b00      	cmp	r3, #0
 8001172:	d111      	bne.n	8001198 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001174:	2037      	movs	r0, #55	@ 0x37
 8001176:	f000 f9f1 	bl	800155c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2b0f      	cmp	r3, #15
 800117e:	d808      	bhi.n	8001192 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8001180:	2200      	movs	r2, #0
 8001182:	6879      	ldr	r1, [r7, #4]
 8001184:	2037      	movs	r0, #55	@ 0x37
 8001186:	f000 f9cd 	bl	8001524 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800118a:	4a0a      	ldr	r2, [pc, #40]	@ (80011b4 <HAL_InitTick+0xf4>)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6013      	str	r3, [r2, #0]
 8001190:	e002      	b.n	8001198 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001198:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800119c:	4618      	mov	r0, r3
 800119e:	3738      	adds	r7, #56	@ 0x38
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40023800 	.word	0x40023800
 80011a8:	431bde83 	.word	0x431bde83
 80011ac:	20000198 	.word	0x20000198
 80011b0:	40001400 	.word	0x40001400
 80011b4:	20000008 	.word	0x20000008

080011b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011bc:	bf00      	nop
 80011be:	e7fd      	b.n	80011bc <NMI_Handler+0x4>

080011c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011c4:	bf00      	nop
 80011c6:	e7fd      	b.n	80011c4 <HardFault_Handler+0x4>

080011c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011cc:	bf00      	nop
 80011ce:	e7fd      	b.n	80011cc <MemManage_Handler+0x4>

080011d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011d4:	bf00      	nop
 80011d6:	e7fd      	b.n	80011d4 <BusFault_Handler+0x4>

080011d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011dc:	bf00      	nop
 80011de:	e7fd      	b.n	80011dc <UsageFault_Handler+0x4>

080011e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80011f4:	4802      	ldr	r0, [pc, #8]	@ (8001200 <TIM7_IRQHandler+0x10>)
 80011f6:	f001 feed 	bl	8002fd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000198 	.word	0x20000198

08001204 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800120c:	4a14      	ldr	r2, [pc, #80]	@ (8001260 <_sbrk+0x5c>)
 800120e:	4b15      	ldr	r3, [pc, #84]	@ (8001264 <_sbrk+0x60>)
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001218:	4b13      	ldr	r3, [pc, #76]	@ (8001268 <_sbrk+0x64>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d102      	bne.n	8001226 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001220:	4b11      	ldr	r3, [pc, #68]	@ (8001268 <_sbrk+0x64>)
 8001222:	4a12      	ldr	r2, [pc, #72]	@ (800126c <_sbrk+0x68>)
 8001224:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001226:	4b10      	ldr	r3, [pc, #64]	@ (8001268 <_sbrk+0x64>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4413      	add	r3, r2
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	429a      	cmp	r2, r3
 8001232:	d207      	bcs.n	8001244 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001234:	f005 f822 	bl	800627c <__errno>
 8001238:	4603      	mov	r3, r0
 800123a:	220c      	movs	r2, #12
 800123c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800123e:	f04f 33ff 	mov.w	r3, #4294967295
 8001242:	e009      	b.n	8001258 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001244:	4b08      	ldr	r3, [pc, #32]	@ (8001268 <_sbrk+0x64>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800124a:	4b07      	ldr	r3, [pc, #28]	@ (8001268 <_sbrk+0x64>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4413      	add	r3, r2
 8001252:	4a05      	ldr	r2, [pc, #20]	@ (8001268 <_sbrk+0x64>)
 8001254:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001256:	68fb      	ldr	r3, [r7, #12]
}
 8001258:	4618      	mov	r0, r3
 800125a:	3718      	adds	r7, #24
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20020000 	.word	0x20020000
 8001264:	00000400 	.word	0x00000400
 8001268:	200001e0 	.word	0x200001e0
 800126c:	200130d0 	.word	0x200130d0

08001270 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001274:	4b06      	ldr	r3, [pc, #24]	@ (8001290 <SystemInit+0x20>)
 8001276:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800127a:	4a05      	ldr	r2, [pc, #20]	@ (8001290 <SystemInit+0x20>)
 800127c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001280:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001284:	bf00      	nop
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001294:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001298:	480d      	ldr	r0, [pc, #52]	@ (80012d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800129a:	490e      	ldr	r1, [pc, #56]	@ (80012d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800129c:	4a0e      	ldr	r2, [pc, #56]	@ (80012d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800129e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012a0:	e002      	b.n	80012a8 <LoopCopyDataInit>

080012a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012a6:	3304      	adds	r3, #4

080012a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012ac:	d3f9      	bcc.n	80012a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ae:	4a0b      	ldr	r2, [pc, #44]	@ (80012dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012b0:	4c0b      	ldr	r4, [pc, #44]	@ (80012e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012b4:	e001      	b.n	80012ba <LoopFillZerobss>

080012b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b8:	3204      	adds	r2, #4

080012ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012bc:	d3fb      	bcc.n	80012b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012be:	f7ff ffd7 	bl	8001270 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012c2:	f004 ffe1 	bl	8006288 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012c6:	f7ff fbc3 	bl	8000a50 <main>
  bx  lr    
 80012ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80012cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012d4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80012d8:	08006cd0 	.word	0x08006cd0
  ldr r2, =_sbss
 80012dc:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80012e0:	200130d0 	.word	0x200130d0

080012e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012e4:	e7fe      	b.n	80012e4 <ADC_IRQHandler>
	...

080012e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001328 <HAL_Init+0x40>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001328 <HAL_Init+0x40>)
 80012f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001328 <HAL_Init+0x40>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a0a      	ldr	r2, [pc, #40]	@ (8001328 <HAL_Init+0x40>)
 80012fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001302:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001304:	4b08      	ldr	r3, [pc, #32]	@ (8001328 <HAL_Init+0x40>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a07      	ldr	r2, [pc, #28]	@ (8001328 <HAL_Init+0x40>)
 800130a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800130e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001310:	2003      	movs	r0, #3
 8001312:	f000 f8fc 	bl	800150e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001316:	2000      	movs	r0, #0
 8001318:	f7ff fed2 	bl	80010c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800131c:	f7ff fe18 	bl	8000f50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40023c00 	.word	0x40023c00

0800132c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001330:	4b06      	ldr	r3, [pc, #24]	@ (800134c <HAL_IncTick+0x20>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	461a      	mov	r2, r3
 8001336:	4b06      	ldr	r3, [pc, #24]	@ (8001350 <HAL_IncTick+0x24>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4413      	add	r3, r2
 800133c:	4a04      	ldr	r2, [pc, #16]	@ (8001350 <HAL_IncTick+0x24>)
 800133e:	6013      	str	r3, [r2, #0]
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	2000000c 	.word	0x2000000c
 8001350:	200001e4 	.word	0x200001e4

08001354 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  return uwTick;
 8001358:	4b03      	ldr	r3, [pc, #12]	@ (8001368 <HAL_GetTick+0x14>)
 800135a:	681b      	ldr	r3, [r3, #0]
}
 800135c:	4618      	mov	r0, r3
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	200001e4 	.word	0x200001e4

0800136c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001374:	f7ff ffee 	bl	8001354 <HAL_GetTick>
 8001378:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001384:	d005      	beq.n	8001392 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001386:	4b0a      	ldr	r3, [pc, #40]	@ (80013b0 <HAL_Delay+0x44>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	461a      	mov	r2, r3
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	4413      	add	r3, r2
 8001390:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001392:	bf00      	nop
 8001394:	f7ff ffde 	bl	8001354 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	68fa      	ldr	r2, [r7, #12]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d8f7      	bhi.n	8001394 <HAL_Delay+0x28>
  {
  }
}
 80013a4:	bf00      	nop
 80013a6:	bf00      	nop
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	2000000c 	.word	0x2000000c

080013b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013c4:	4b0c      	ldr	r3, [pc, #48]	@ (80013f8 <__NVIC_SetPriorityGrouping+0x44>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ca:	68ba      	ldr	r2, [r7, #8]
 80013cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013d0:	4013      	ands	r3, r2
 80013d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013e6:	4a04      	ldr	r2, [pc, #16]	@ (80013f8 <__NVIC_SetPriorityGrouping+0x44>)
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	60d3      	str	r3, [r2, #12]
}
 80013ec:	bf00      	nop
 80013ee:	3714      	adds	r7, #20
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001400:	4b04      	ldr	r3, [pc, #16]	@ (8001414 <__NVIC_GetPriorityGrouping+0x18>)
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	0a1b      	lsrs	r3, r3, #8
 8001406:	f003 0307 	and.w	r3, r3, #7
}
 800140a:	4618      	mov	r0, r3
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001426:	2b00      	cmp	r3, #0
 8001428:	db0b      	blt.n	8001442 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	f003 021f 	and.w	r2, r3, #31
 8001430:	4907      	ldr	r1, [pc, #28]	@ (8001450 <__NVIC_EnableIRQ+0x38>)
 8001432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001436:	095b      	lsrs	r3, r3, #5
 8001438:	2001      	movs	r0, #1
 800143a:	fa00 f202 	lsl.w	r2, r0, r2
 800143e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001442:	bf00      	nop
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	e000e100 	.word	0xe000e100

08001454 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	6039      	str	r1, [r7, #0]
 800145e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001464:	2b00      	cmp	r3, #0
 8001466:	db0a      	blt.n	800147e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	b2da      	uxtb	r2, r3
 800146c:	490c      	ldr	r1, [pc, #48]	@ (80014a0 <__NVIC_SetPriority+0x4c>)
 800146e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001472:	0112      	lsls	r2, r2, #4
 8001474:	b2d2      	uxtb	r2, r2
 8001476:	440b      	add	r3, r1
 8001478:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800147c:	e00a      	b.n	8001494 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	b2da      	uxtb	r2, r3
 8001482:	4908      	ldr	r1, [pc, #32]	@ (80014a4 <__NVIC_SetPriority+0x50>)
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	f003 030f 	and.w	r3, r3, #15
 800148a:	3b04      	subs	r3, #4
 800148c:	0112      	lsls	r2, r2, #4
 800148e:	b2d2      	uxtb	r2, r2
 8001490:	440b      	add	r3, r1
 8001492:	761a      	strb	r2, [r3, #24]
}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	e000e100 	.word	0xe000e100
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b089      	sub	sp, #36	@ 0x24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	f1c3 0307 	rsb	r3, r3, #7
 80014c2:	2b04      	cmp	r3, #4
 80014c4:	bf28      	it	cs
 80014c6:	2304      	movcs	r3, #4
 80014c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	3304      	adds	r3, #4
 80014ce:	2b06      	cmp	r3, #6
 80014d0:	d902      	bls.n	80014d8 <NVIC_EncodePriority+0x30>
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	3b03      	subs	r3, #3
 80014d6:	e000      	b.n	80014da <NVIC_EncodePriority+0x32>
 80014d8:	2300      	movs	r3, #0
 80014da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014dc:	f04f 32ff 	mov.w	r2, #4294967295
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	43da      	mvns	r2, r3
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	401a      	ands	r2, r3
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014f0:	f04f 31ff 	mov.w	r1, #4294967295
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	fa01 f303 	lsl.w	r3, r1, r3
 80014fa:	43d9      	mvns	r1, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001500:	4313      	orrs	r3, r2
         );
}
 8001502:	4618      	mov	r0, r3
 8001504:	3724      	adds	r7, #36	@ 0x24
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7ff ff4c 	bl	80013b4 <__NVIC_SetPriorityGrouping>
}
 800151c:	bf00      	nop
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
 8001530:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001532:	2300      	movs	r3, #0
 8001534:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001536:	f7ff ff61 	bl	80013fc <__NVIC_GetPriorityGrouping>
 800153a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	68b9      	ldr	r1, [r7, #8]
 8001540:	6978      	ldr	r0, [r7, #20]
 8001542:	f7ff ffb1 	bl	80014a8 <NVIC_EncodePriority>
 8001546:	4602      	mov	r2, r0
 8001548:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800154c:	4611      	mov	r1, r2
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff ff80 	bl	8001454 <__NVIC_SetPriority>
}
 8001554:	bf00      	nop
 8001556:	3718      	adds	r7, #24
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff ff54 	bl	8001418 <__NVIC_EnableIRQ>
}
 8001570:	bf00      	nop
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001578:	b480      	push	{r7}
 800157a:	b089      	sub	sp, #36	@ 0x24
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001582:	2300      	movs	r3, #0
 8001584:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001586:	2300      	movs	r3, #0
 8001588:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800158a:	2300      	movs	r3, #0
 800158c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800158e:	2300      	movs	r3, #0
 8001590:	61fb      	str	r3, [r7, #28]
 8001592:	e16b      	b.n	800186c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001594:	2201      	movs	r2, #1
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	697a      	ldr	r2, [r7, #20]
 80015a4:	4013      	ands	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	f040 815a 	bne.w	8001866 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f003 0303 	and.w	r3, r3, #3
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d005      	beq.n	80015ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d130      	bne.n	800162c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	2203      	movs	r2, #3
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	43db      	mvns	r3, r3
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	4013      	ands	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	68da      	ldr	r2, [r3, #12]
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001600:	2201      	movs	r2, #1
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	43db      	mvns	r3, r3
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	4013      	ands	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	091b      	lsrs	r3, r3, #4
 8001616:	f003 0201 	and.w	r2, r3, #1
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	4313      	orrs	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f003 0303 	and.w	r3, r3, #3
 8001634:	2b03      	cmp	r3, #3
 8001636:	d017      	beq.n	8001668 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	2203      	movs	r2, #3
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	43db      	mvns	r3, r3
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4013      	ands	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	689a      	ldr	r2, [r3, #8]
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	4313      	orrs	r3, r2
 8001660:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f003 0303 	and.w	r3, r3, #3
 8001670:	2b02      	cmp	r3, #2
 8001672:	d123      	bne.n	80016bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	08da      	lsrs	r2, r3, #3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	3208      	adds	r2, #8
 800167c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001680:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	f003 0307 	and.w	r3, r3, #7
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	220f      	movs	r2, #15
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	43db      	mvns	r3, r3
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	4013      	ands	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	691a      	ldr	r2, [r3, #16]
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	08da      	lsrs	r2, r3, #3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	3208      	adds	r2, #8
 80016b6:	69b9      	ldr	r1, [r7, #24]
 80016b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	2203      	movs	r2, #3
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	43db      	mvns	r3, r3
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	4013      	ands	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f003 0203 	and.w	r2, r3, #3
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f000 80b4 	beq.w	8001866 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	4b60      	ldr	r3, [pc, #384]	@ (8001884 <HAL_GPIO_Init+0x30c>)
 8001704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001706:	4a5f      	ldr	r2, [pc, #380]	@ (8001884 <HAL_GPIO_Init+0x30c>)
 8001708:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800170c:	6453      	str	r3, [r2, #68]	@ 0x44
 800170e:	4b5d      	ldr	r3, [pc, #372]	@ (8001884 <HAL_GPIO_Init+0x30c>)
 8001710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001712:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800171a:	4a5b      	ldr	r2, [pc, #364]	@ (8001888 <HAL_GPIO_Init+0x310>)
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	089b      	lsrs	r3, r3, #2
 8001720:	3302      	adds	r3, #2
 8001722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001726:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	f003 0303 	and.w	r3, r3, #3
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	220f      	movs	r2, #15
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	43db      	mvns	r3, r3
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	4013      	ands	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a52      	ldr	r2, [pc, #328]	@ (800188c <HAL_GPIO_Init+0x314>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d02b      	beq.n	800179e <HAL_GPIO_Init+0x226>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a51      	ldr	r2, [pc, #324]	@ (8001890 <HAL_GPIO_Init+0x318>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d025      	beq.n	800179a <HAL_GPIO_Init+0x222>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a50      	ldr	r2, [pc, #320]	@ (8001894 <HAL_GPIO_Init+0x31c>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d01f      	beq.n	8001796 <HAL_GPIO_Init+0x21e>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a4f      	ldr	r2, [pc, #316]	@ (8001898 <HAL_GPIO_Init+0x320>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d019      	beq.n	8001792 <HAL_GPIO_Init+0x21a>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a4e      	ldr	r2, [pc, #312]	@ (800189c <HAL_GPIO_Init+0x324>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d013      	beq.n	800178e <HAL_GPIO_Init+0x216>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a4d      	ldr	r2, [pc, #308]	@ (80018a0 <HAL_GPIO_Init+0x328>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d00d      	beq.n	800178a <HAL_GPIO_Init+0x212>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a4c      	ldr	r2, [pc, #304]	@ (80018a4 <HAL_GPIO_Init+0x32c>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d007      	beq.n	8001786 <HAL_GPIO_Init+0x20e>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a4b      	ldr	r2, [pc, #300]	@ (80018a8 <HAL_GPIO_Init+0x330>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d101      	bne.n	8001782 <HAL_GPIO_Init+0x20a>
 800177e:	2307      	movs	r3, #7
 8001780:	e00e      	b.n	80017a0 <HAL_GPIO_Init+0x228>
 8001782:	2308      	movs	r3, #8
 8001784:	e00c      	b.n	80017a0 <HAL_GPIO_Init+0x228>
 8001786:	2306      	movs	r3, #6
 8001788:	e00a      	b.n	80017a0 <HAL_GPIO_Init+0x228>
 800178a:	2305      	movs	r3, #5
 800178c:	e008      	b.n	80017a0 <HAL_GPIO_Init+0x228>
 800178e:	2304      	movs	r3, #4
 8001790:	e006      	b.n	80017a0 <HAL_GPIO_Init+0x228>
 8001792:	2303      	movs	r3, #3
 8001794:	e004      	b.n	80017a0 <HAL_GPIO_Init+0x228>
 8001796:	2302      	movs	r3, #2
 8001798:	e002      	b.n	80017a0 <HAL_GPIO_Init+0x228>
 800179a:	2301      	movs	r3, #1
 800179c:	e000      	b.n	80017a0 <HAL_GPIO_Init+0x228>
 800179e:	2300      	movs	r3, #0
 80017a0:	69fa      	ldr	r2, [r7, #28]
 80017a2:	f002 0203 	and.w	r2, r2, #3
 80017a6:	0092      	lsls	r2, r2, #2
 80017a8:	4093      	lsls	r3, r2
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017b0:	4935      	ldr	r1, [pc, #212]	@ (8001888 <HAL_GPIO_Init+0x310>)
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	089b      	lsrs	r3, r3, #2
 80017b6:	3302      	adds	r3, #2
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017be:	4b3b      	ldr	r3, [pc, #236]	@ (80018ac <HAL_GPIO_Init+0x334>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	43db      	mvns	r3, r3
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4013      	ands	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d003      	beq.n	80017e2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	4313      	orrs	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017e2:	4a32      	ldr	r2, [pc, #200]	@ (80018ac <HAL_GPIO_Init+0x334>)
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017e8:	4b30      	ldr	r3, [pc, #192]	@ (80018ac <HAL_GPIO_Init+0x334>)
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	43db      	mvns	r3, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4013      	ands	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d003      	beq.n	800180c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	4313      	orrs	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800180c:	4a27      	ldr	r2, [pc, #156]	@ (80018ac <HAL_GPIO_Init+0x334>)
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001812:	4b26      	ldr	r3, [pc, #152]	@ (80018ac <HAL_GPIO_Init+0x334>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	43db      	mvns	r3, r3
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	4013      	ands	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d003      	beq.n	8001836 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	4313      	orrs	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001836:	4a1d      	ldr	r2, [pc, #116]	@ (80018ac <HAL_GPIO_Init+0x334>)
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800183c:	4b1b      	ldr	r3, [pc, #108]	@ (80018ac <HAL_GPIO_Init+0x334>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	43db      	mvns	r3, r3
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	4013      	ands	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d003      	beq.n	8001860 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	4313      	orrs	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001860:	4a12      	ldr	r2, [pc, #72]	@ (80018ac <HAL_GPIO_Init+0x334>)
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	3301      	adds	r3, #1
 800186a:	61fb      	str	r3, [r7, #28]
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	2b0f      	cmp	r3, #15
 8001870:	f67f ae90 	bls.w	8001594 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001874:	bf00      	nop
 8001876:	bf00      	nop
 8001878:	3724      	adds	r7, #36	@ 0x24
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	40023800 	.word	0x40023800
 8001888:	40013800 	.word	0x40013800
 800188c:	40020000 	.word	0x40020000
 8001890:	40020400 	.word	0x40020400
 8001894:	40020800 	.word	0x40020800
 8001898:	40020c00 	.word	0x40020c00
 800189c:	40021000 	.word	0x40021000
 80018a0:	40021400 	.word	0x40021400
 80018a4:	40021800 	.word	0x40021800
 80018a8:	40021c00 	.word	0x40021c00
 80018ac:	40013c00 	.word	0x40013c00

080018b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	460b      	mov	r3, r1
 80018ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	691a      	ldr	r2, [r3, #16]
 80018c0:	887b      	ldrh	r3, [r7, #2]
 80018c2:	4013      	ands	r3, r2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d002      	beq.n	80018ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018c8:	2301      	movs	r3, #1
 80018ca:	73fb      	strb	r3, [r7, #15]
 80018cc:	e001      	b.n	80018d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018ce:	2300      	movs	r3, #0
 80018d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3714      	adds	r7, #20
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	460b      	mov	r3, r1
 80018ea:	807b      	strh	r3, [r7, #2]
 80018ec:	4613      	mov	r3, r2
 80018ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018f0:	787b      	ldrb	r3, [r7, #1]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d003      	beq.n	80018fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018f6:	887a      	ldrh	r2, [r7, #2]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018fc:	e003      	b.n	8001906 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018fe:	887b      	ldrh	r3, [r7, #2]
 8001900:	041a      	lsls	r2, r3, #16
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	619a      	str	r2, [r3, #24]
}
 8001906:	bf00      	nop
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
	...

08001914 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d101      	bne.n	8001926 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e12b      	b.n	8001b7e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b00      	cmp	r3, #0
 8001930:	d106      	bne.n	8001940 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f7ff fb30 	bl	8000fa0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2224      	movs	r2, #36	@ 0x24
 8001944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f022 0201 	bic.w	r2, r2, #1
 8001956:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001966:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001976:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001978:	f001 fa08 	bl	8002d8c <HAL_RCC_GetPCLK1Freq>
 800197c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	4a81      	ldr	r2, [pc, #516]	@ (8001b88 <HAL_I2C_Init+0x274>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d807      	bhi.n	8001998 <HAL_I2C_Init+0x84>
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	4a80      	ldr	r2, [pc, #512]	@ (8001b8c <HAL_I2C_Init+0x278>)
 800198c:	4293      	cmp	r3, r2
 800198e:	bf94      	ite	ls
 8001990:	2301      	movls	r3, #1
 8001992:	2300      	movhi	r3, #0
 8001994:	b2db      	uxtb	r3, r3
 8001996:	e006      	b.n	80019a6 <HAL_I2C_Init+0x92>
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	4a7d      	ldr	r2, [pc, #500]	@ (8001b90 <HAL_I2C_Init+0x27c>)
 800199c:	4293      	cmp	r3, r2
 800199e:	bf94      	ite	ls
 80019a0:	2301      	movls	r3, #1
 80019a2:	2300      	movhi	r3, #0
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e0e7      	b.n	8001b7e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	4a78      	ldr	r2, [pc, #480]	@ (8001b94 <HAL_I2C_Init+0x280>)
 80019b2:	fba2 2303 	umull	r2, r3, r2, r3
 80019b6:	0c9b      	lsrs	r3, r3, #18
 80019b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	68ba      	ldr	r2, [r7, #8]
 80019ca:	430a      	orrs	r2, r1
 80019cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	6a1b      	ldr	r3, [r3, #32]
 80019d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	4a6a      	ldr	r2, [pc, #424]	@ (8001b88 <HAL_I2C_Init+0x274>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d802      	bhi.n	80019e8 <HAL_I2C_Init+0xd4>
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	3301      	adds	r3, #1
 80019e6:	e009      	b.n	80019fc <HAL_I2C_Init+0xe8>
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80019ee:	fb02 f303 	mul.w	r3, r2, r3
 80019f2:	4a69      	ldr	r2, [pc, #420]	@ (8001b98 <HAL_I2C_Init+0x284>)
 80019f4:	fba2 2303 	umull	r2, r3, r2, r3
 80019f8:	099b      	lsrs	r3, r3, #6
 80019fa:	3301      	adds	r3, #1
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	6812      	ldr	r2, [r2, #0]
 8001a00:	430b      	orrs	r3, r1
 8001a02:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001a0e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	495c      	ldr	r1, [pc, #368]	@ (8001b88 <HAL_I2C_Init+0x274>)
 8001a18:	428b      	cmp	r3, r1
 8001a1a:	d819      	bhi.n	8001a50 <HAL_I2C_Init+0x13c>
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	1e59      	subs	r1, r3, #1
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a2a:	1c59      	adds	r1, r3, #1
 8001a2c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001a30:	400b      	ands	r3, r1
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d00a      	beq.n	8001a4c <HAL_I2C_Init+0x138>
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	1e59      	subs	r1, r3, #1
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a44:	3301      	adds	r3, #1
 8001a46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a4a:	e051      	b.n	8001af0 <HAL_I2C_Init+0x1dc>
 8001a4c:	2304      	movs	r3, #4
 8001a4e:	e04f      	b.n	8001af0 <HAL_I2C_Init+0x1dc>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d111      	bne.n	8001a7c <HAL_I2C_Init+0x168>
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	1e58      	subs	r0, r3, #1
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6859      	ldr	r1, [r3, #4]
 8001a60:	460b      	mov	r3, r1
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	440b      	add	r3, r1
 8001a66:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	bf0c      	ite	eq
 8001a74:	2301      	moveq	r3, #1
 8001a76:	2300      	movne	r3, #0
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	e012      	b.n	8001aa2 <HAL_I2C_Init+0x18e>
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	1e58      	subs	r0, r3, #1
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6859      	ldr	r1, [r3, #4]
 8001a84:	460b      	mov	r3, r1
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	440b      	add	r3, r1
 8001a8a:	0099      	lsls	r1, r3, #2
 8001a8c:	440b      	add	r3, r1
 8001a8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a92:	3301      	adds	r3, #1
 8001a94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	bf0c      	ite	eq
 8001a9c:	2301      	moveq	r3, #1
 8001a9e:	2300      	movne	r3, #0
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <HAL_I2C_Init+0x196>
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e022      	b.n	8001af0 <HAL_I2C_Init+0x1dc>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d10e      	bne.n	8001ad0 <HAL_I2C_Init+0x1bc>
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	1e58      	subs	r0, r3, #1
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6859      	ldr	r1, [r3, #4]
 8001aba:	460b      	mov	r3, r1
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	440b      	add	r3, r1
 8001ac0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ace:	e00f      	b.n	8001af0 <HAL_I2C_Init+0x1dc>
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	1e58      	subs	r0, r3, #1
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6859      	ldr	r1, [r3, #4]
 8001ad8:	460b      	mov	r3, r1
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	440b      	add	r3, r1
 8001ade:	0099      	lsls	r1, r3, #2
 8001ae0:	440b      	add	r3, r1
 8001ae2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001af0:	6879      	ldr	r1, [r7, #4]
 8001af2:	6809      	ldr	r1, [r1, #0]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	69da      	ldr	r2, [r3, #28]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a1b      	ldr	r3, [r3, #32]
 8001b0a:	431a      	orrs	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	430a      	orrs	r2, r1
 8001b12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001b1e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	6911      	ldr	r1, [r2, #16]
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	68d2      	ldr	r2, [r2, #12]
 8001b2a:	4311      	orrs	r1, r2
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	6812      	ldr	r2, [r2, #0]
 8001b30:	430b      	orrs	r3, r1
 8001b32:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	695a      	ldr	r2, [r3, #20]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	699b      	ldr	r3, [r3, #24]
 8001b46:	431a      	orrs	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f042 0201 	orr.w	r2, r2, #1
 8001b5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2220      	movs	r2, #32
 8001b6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	000186a0 	.word	0x000186a0
 8001b8c:	001e847f 	.word	0x001e847f
 8001b90:	003d08ff 	.word	0x003d08ff
 8001b94:	431bde83 	.word	0x431bde83
 8001b98:	10624dd3 	.word	0x10624dd3

08001b9c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b088      	sub	sp, #32
 8001ba0:	af02      	add	r7, sp, #8
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	607a      	str	r2, [r7, #4]
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	460b      	mov	r3, r1
 8001baa:	817b      	strh	r3, [r7, #10]
 8001bac:	4613      	mov	r3, r2
 8001bae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001bb0:	f7ff fbd0 	bl	8001354 <HAL_GetTick>
 8001bb4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b20      	cmp	r3, #32
 8001bc0:	f040 80e0 	bne.w	8001d84 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	9300      	str	r3, [sp, #0]
 8001bc8:	2319      	movs	r3, #25
 8001bca:	2201      	movs	r2, #1
 8001bcc:	4970      	ldr	r1, [pc, #448]	@ (8001d90 <HAL_I2C_Master_Transmit+0x1f4>)
 8001bce:	68f8      	ldr	r0, [r7, #12]
 8001bd0:	f000 fa92 	bl	80020f8 <I2C_WaitOnFlagUntilTimeout>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	e0d3      	b.n	8001d86 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d101      	bne.n	8001bec <HAL_I2C_Master_Transmit+0x50>
 8001be8:	2302      	movs	r3, #2
 8001bea:	e0cc      	b.n	8001d86 <HAL_I2C_Master_Transmit+0x1ea>
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d007      	beq.n	8001c12 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f042 0201 	orr.w	r2, r2, #1
 8001c10:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c20:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2221      	movs	r2, #33	@ 0x21
 8001c26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2210      	movs	r2, #16
 8001c2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2200      	movs	r2, #0
 8001c36:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	893a      	ldrh	r2, [r7, #8]
 8001c42:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	4a50      	ldr	r2, [pc, #320]	@ (8001d94 <HAL_I2C_Master_Transmit+0x1f8>)
 8001c52:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c54:	8979      	ldrh	r1, [r7, #10]
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	6a3a      	ldr	r2, [r7, #32]
 8001c5a:	68f8      	ldr	r0, [r7, #12]
 8001c5c:	f000 f9ca 	bl	8001ff4 <I2C_MasterRequestWrite>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e08d      	b.n	8001d86 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	613b      	str	r3, [r7, #16]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	695b      	ldr	r3, [r3, #20]
 8001c74:	613b      	str	r3, [r7, #16]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	613b      	str	r3, [r7, #16]
 8001c7e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001c80:	e066      	b.n	8001d50 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	6a39      	ldr	r1, [r7, #32]
 8001c86:	68f8      	ldr	r0, [r7, #12]
 8001c88:	f000 fb50 	bl	800232c <I2C_WaitOnTXEFlagUntilTimeout>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d00d      	beq.n	8001cae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	d107      	bne.n	8001caa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ca8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e06b      	b.n	8001d86 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb2:	781a      	ldrb	r2, [r3, #0]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cbe:	1c5a      	adds	r2, r3, #1
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	695b      	ldr	r3, [r3, #20]
 8001ce4:	f003 0304 	and.w	r3, r3, #4
 8001ce8:	2b04      	cmp	r3, #4
 8001cea:	d11b      	bne.n	8001d24 <HAL_I2C_Master_Transmit+0x188>
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d017      	beq.n	8001d24 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf8:	781a      	ldrb	r2, [r3, #0]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d04:	1c5a      	adds	r2, r3, #1
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	3b01      	subs	r3, #1
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d24:	697a      	ldr	r2, [r7, #20]
 8001d26:	6a39      	ldr	r1, [r7, #32]
 8001d28:	68f8      	ldr	r0, [r7, #12]
 8001d2a:	f000 fb47 	bl	80023bc <I2C_WaitOnBTFFlagUntilTimeout>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d00d      	beq.n	8001d50 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d38:	2b04      	cmp	r3, #4
 8001d3a:	d107      	bne.n	8001d4c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d4a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e01a      	b.n	8001d86 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d194      	bne.n	8001c82 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2220      	movs	r2, #32
 8001d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001d80:	2300      	movs	r3, #0
 8001d82:	e000      	b.n	8001d86 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001d84:	2302      	movs	r3, #2
  }
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3718      	adds	r7, #24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	00100002 	.word	0x00100002
 8001d94:	ffff0000 	.word	0xffff0000

08001d98 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b08a      	sub	sp, #40	@ 0x28
 8001d9c:	af02      	add	r7, sp, #8
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	607a      	str	r2, [r7, #4]
 8001da2:	603b      	str	r3, [r7, #0]
 8001da4:	460b      	mov	r3, r1
 8001da6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001da8:	f7ff fad4 	bl	8001354 <HAL_GetTick>
 8001dac:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001dae:	2300      	movs	r3, #0
 8001db0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b20      	cmp	r3, #32
 8001dbc:	f040 8111 	bne.w	8001fe2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	2319      	movs	r3, #25
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	4988      	ldr	r1, [pc, #544]	@ (8001fec <HAL_I2C_IsDeviceReady+0x254>)
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f000 f994 	bl	80020f8 <I2C_WaitOnFlagUntilTimeout>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	e104      	b.n	8001fe4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d101      	bne.n	8001de8 <HAL_I2C_IsDeviceReady+0x50>
 8001de4:	2302      	movs	r3, #2
 8001de6:	e0fd      	b.n	8001fe4 <HAL_I2C_IsDeviceReady+0x24c>
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d007      	beq.n	8001e0e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f042 0201 	orr.w	r2, r2, #1
 8001e0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e1c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2224      	movs	r2, #36	@ 0x24
 8001e22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	4a70      	ldr	r2, [pc, #448]	@ (8001ff0 <HAL_I2C_IsDeviceReady+0x258>)
 8001e30:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e40:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	9300      	str	r3, [sp, #0]
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001e4e:	68f8      	ldr	r0, [r7, #12]
 8001e50:	f000 f952 	bl	80020f8 <I2C_WaitOnFlagUntilTimeout>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d00d      	beq.n	8001e76 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e68:	d103      	bne.n	8001e72 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e70:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e0b6      	b.n	8001fe4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e76:	897b      	ldrh	r3, [r7, #10]
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001e84:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001e86:	f7ff fa65 	bl	8001354 <HAL_GetTick>
 8001e8a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	695b      	ldr	r3, [r3, #20]
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	bf0c      	ite	eq
 8001e9a:	2301      	moveq	r3, #1
 8001e9c:	2300      	movne	r3, #0
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	695b      	ldr	r3, [r3, #20]
 8001ea8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001eb0:	bf0c      	ite	eq
 8001eb2:	2301      	moveq	r3, #1
 8001eb4:	2300      	movne	r3, #0
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001eba:	e025      	b.n	8001f08 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001ebc:	f7ff fa4a 	bl	8001354 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d302      	bcc.n	8001ed2 <HAL_I2C_IsDeviceReady+0x13a>
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d103      	bne.n	8001eda <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	22a0      	movs	r2, #160	@ 0xa0
 8001ed6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	695b      	ldr	r3, [r3, #20]
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	bf0c      	ite	eq
 8001ee8:	2301      	moveq	r3, #1
 8001eea:	2300      	movne	r3, #0
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	695b      	ldr	r3, [r3, #20]
 8001ef6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001efa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001efe:	bf0c      	ite	eq
 8001f00:	2301      	moveq	r3, #1
 8001f02:	2300      	movne	r3, #0
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	2ba0      	cmp	r3, #160	@ 0xa0
 8001f12:	d005      	beq.n	8001f20 <HAL_I2C_IsDeviceReady+0x188>
 8001f14:	7dfb      	ldrb	r3, [r7, #23]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d102      	bne.n	8001f20 <HAL_I2C_IsDeviceReady+0x188>
 8001f1a:	7dbb      	ldrb	r3, [r7, #22]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d0cd      	beq.n	8001ebc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2220      	movs	r2, #32
 8001f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d129      	bne.n	8001f8a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f44:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f46:	2300      	movs	r3, #0
 8001f48:	613b      	str	r3, [r7, #16]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	695b      	ldr	r3, [r3, #20]
 8001f50:	613b      	str	r3, [r7, #16]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	613b      	str	r3, [r7, #16]
 8001f5a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	2319      	movs	r3, #25
 8001f62:	2201      	movs	r2, #1
 8001f64:	4921      	ldr	r1, [pc, #132]	@ (8001fec <HAL_I2C_IsDeviceReady+0x254>)
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	f000 f8c6 	bl	80020f8 <I2C_WaitOnFlagUntilTimeout>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e036      	b.n	8001fe4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2220      	movs	r2, #32
 8001f7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8001f86:	2300      	movs	r3, #0
 8001f88:	e02c      	b.n	8001fe4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f98:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001fa2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	9300      	str	r3, [sp, #0]
 8001fa8:	2319      	movs	r3, #25
 8001faa:	2201      	movs	r2, #1
 8001fac:	490f      	ldr	r1, [pc, #60]	@ (8001fec <HAL_I2C_IsDeviceReady+0x254>)
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f000 f8a2 	bl	80020f8 <I2C_WaitOnFlagUntilTimeout>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e012      	b.n	8001fe4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	f4ff af32 	bcc.w	8001e32 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2220      	movs	r2, #32
 8001fd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e000      	b.n	8001fe4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001fe2:	2302      	movs	r3, #2
  }
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3720      	adds	r7, #32
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	00100002 	.word	0x00100002
 8001ff0:	ffff0000 	.word	0xffff0000

08001ff4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b088      	sub	sp, #32
 8001ff8:	af02      	add	r7, sp, #8
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	607a      	str	r2, [r7, #4]
 8001ffe:	603b      	str	r3, [r7, #0]
 8002000:	460b      	mov	r3, r1
 8002002:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002008:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	2b08      	cmp	r3, #8
 800200e:	d006      	beq.n	800201e <I2C_MasterRequestWrite+0x2a>
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d003      	beq.n	800201e <I2C_MasterRequestWrite+0x2a>
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800201c:	d108      	bne.n	8002030 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800202c:	601a      	str	r2, [r3, #0]
 800202e:	e00b      	b.n	8002048 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002034:	2b12      	cmp	r3, #18
 8002036:	d107      	bne.n	8002048 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002046:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	9300      	str	r3, [sp, #0]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002054:	68f8      	ldr	r0, [r7, #12]
 8002056:	f000 f84f 	bl	80020f8 <I2C_WaitOnFlagUntilTimeout>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d00d      	beq.n	800207c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800206a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800206e:	d103      	bne.n	8002078 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002076:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e035      	b.n	80020e8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	691b      	ldr	r3, [r3, #16]
 8002080:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002084:	d108      	bne.n	8002098 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002086:	897b      	ldrh	r3, [r7, #10]
 8002088:	b2db      	uxtb	r3, r3
 800208a:	461a      	mov	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002094:	611a      	str	r2, [r3, #16]
 8002096:	e01b      	b.n	80020d0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002098:	897b      	ldrh	r3, [r7, #10]
 800209a:	11db      	asrs	r3, r3, #7
 800209c:	b2db      	uxtb	r3, r3
 800209e:	f003 0306 	and.w	r3, r3, #6
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	f063 030f 	orn	r3, r3, #15
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	490e      	ldr	r1, [pc, #56]	@ (80020f0 <I2C_MasterRequestWrite+0xfc>)
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	f000 f898 	bl	80021ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e010      	b.n	80020e8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80020c6:	897b      	ldrh	r3, [r7, #10]
 80020c8:	b2da      	uxtb	r2, r3
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	4907      	ldr	r1, [pc, #28]	@ (80020f4 <I2C_MasterRequestWrite+0x100>)
 80020d6:	68f8      	ldr	r0, [r7, #12]
 80020d8:	f000 f888 	bl	80021ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e000      	b.n	80020e8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3718      	adds	r7, #24
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	00010008 	.word	0x00010008
 80020f4:	00010002 	.word	0x00010002

080020f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	603b      	str	r3, [r7, #0]
 8002104:	4613      	mov	r3, r2
 8002106:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002108:	e048      	b.n	800219c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002110:	d044      	beq.n	800219c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002112:	f7ff f91f 	bl	8001354 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	429a      	cmp	r2, r3
 8002120:	d302      	bcc.n	8002128 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d139      	bne.n	800219c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	0c1b      	lsrs	r3, r3, #16
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b01      	cmp	r3, #1
 8002130:	d10d      	bne.n	800214e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	695b      	ldr	r3, [r3, #20]
 8002138:	43da      	mvns	r2, r3
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	4013      	ands	r3, r2
 800213e:	b29b      	uxth	r3, r3
 8002140:	2b00      	cmp	r3, #0
 8002142:	bf0c      	ite	eq
 8002144:	2301      	moveq	r3, #1
 8002146:	2300      	movne	r3, #0
 8002148:	b2db      	uxtb	r3, r3
 800214a:	461a      	mov	r2, r3
 800214c:	e00c      	b.n	8002168 <I2C_WaitOnFlagUntilTimeout+0x70>
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	43da      	mvns	r2, r3
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	4013      	ands	r3, r2
 800215a:	b29b      	uxth	r3, r3
 800215c:	2b00      	cmp	r3, #0
 800215e:	bf0c      	ite	eq
 8002160:	2301      	moveq	r3, #1
 8002162:	2300      	movne	r3, #0
 8002164:	b2db      	uxtb	r3, r3
 8002166:	461a      	mov	r2, r3
 8002168:	79fb      	ldrb	r3, [r7, #7]
 800216a:	429a      	cmp	r2, r3
 800216c:	d116      	bne.n	800219c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2200      	movs	r2, #0
 8002172:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2220      	movs	r2, #32
 8002178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002188:	f043 0220 	orr.w	r2, r3, #32
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e023      	b.n	80021e4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	0c1b      	lsrs	r3, r3, #16
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d10d      	bne.n	80021c2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	695b      	ldr	r3, [r3, #20]
 80021ac:	43da      	mvns	r2, r3
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	4013      	ands	r3, r2
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	bf0c      	ite	eq
 80021b8:	2301      	moveq	r3, #1
 80021ba:	2300      	movne	r3, #0
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	461a      	mov	r2, r3
 80021c0:	e00c      	b.n	80021dc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	43da      	mvns	r2, r3
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	4013      	ands	r3, r2
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	bf0c      	ite	eq
 80021d4:	2301      	moveq	r3, #1
 80021d6:	2300      	movne	r3, #0
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	461a      	mov	r2, r3
 80021dc:	79fb      	ldrb	r3, [r7, #7]
 80021de:	429a      	cmp	r2, r3
 80021e0:	d093      	beq.n	800210a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3710      	adds	r7, #16
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
 80021f8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021fa:	e071      	b.n	80022e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002206:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800220a:	d123      	bne.n	8002254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800221a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002224:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2200      	movs	r2, #0
 800222a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2220      	movs	r2, #32
 8002230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002240:	f043 0204 	orr.w	r2, r3, #4
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e067      	b.n	8002324 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800225a:	d041      	beq.n	80022e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800225c:	f7ff f87a 	bl	8001354 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	429a      	cmp	r2, r3
 800226a:	d302      	bcc.n	8002272 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d136      	bne.n	80022e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	0c1b      	lsrs	r3, r3, #16
 8002276:	b2db      	uxtb	r3, r3
 8002278:	2b01      	cmp	r3, #1
 800227a:	d10c      	bne.n	8002296 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	43da      	mvns	r2, r3
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	4013      	ands	r3, r2
 8002288:	b29b      	uxth	r3, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	bf14      	ite	ne
 800228e:	2301      	movne	r3, #1
 8002290:	2300      	moveq	r3, #0
 8002292:	b2db      	uxtb	r3, r3
 8002294:	e00b      	b.n	80022ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	43da      	mvns	r2, r3
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	4013      	ands	r3, r2
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	bf14      	ite	ne
 80022a8:	2301      	movne	r3, #1
 80022aa:	2300      	moveq	r3, #0
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d016      	beq.n	80022e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2200      	movs	r2, #0
 80022b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2220      	movs	r2, #32
 80022bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022cc:	f043 0220 	orr.w	r2, r3, #32
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e021      	b.n	8002324 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	0c1b      	lsrs	r3, r3, #16
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d10c      	bne.n	8002304 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	695b      	ldr	r3, [r3, #20]
 80022f0:	43da      	mvns	r2, r3
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	4013      	ands	r3, r2
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	bf14      	ite	ne
 80022fc:	2301      	movne	r3, #1
 80022fe:	2300      	moveq	r3, #0
 8002300:	b2db      	uxtb	r3, r3
 8002302:	e00b      	b.n	800231c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	43da      	mvns	r2, r3
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	4013      	ands	r3, r2
 8002310:	b29b      	uxth	r3, r3
 8002312:	2b00      	cmp	r3, #0
 8002314:	bf14      	ite	ne
 8002316:	2301      	movne	r3, #1
 8002318:	2300      	moveq	r3, #0
 800231a:	b2db      	uxtb	r3, r3
 800231c:	2b00      	cmp	r3, #0
 800231e:	f47f af6d 	bne.w	80021fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	3710      	adds	r7, #16
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002338:	e034      	b.n	80023a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800233a:	68f8      	ldr	r0, [r7, #12]
 800233c:	f000 f886 	bl	800244c <I2C_IsAcknowledgeFailed>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e034      	b.n	80023b4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002350:	d028      	beq.n	80023a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002352:	f7fe ffff 	bl	8001354 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	68ba      	ldr	r2, [r7, #8]
 800235e:	429a      	cmp	r2, r3
 8002360:	d302      	bcc.n	8002368 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d11d      	bne.n	80023a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002372:	2b80      	cmp	r3, #128	@ 0x80
 8002374:	d016      	beq.n	80023a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2200      	movs	r2, #0
 800237a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2220      	movs	r2, #32
 8002380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2200      	movs	r2, #0
 8002388:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002390:	f043 0220 	orr.w	r2, r3, #32
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e007      	b.n	80023b4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023ae:	2b80      	cmp	r3, #128	@ 0x80
 80023b0:	d1c3      	bne.n	800233a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80023c8:	e034      	b.n	8002434 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	f000 f83e 	bl	800244c <I2C_IsAcknowledgeFailed>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e034      	b.n	8002444 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e0:	d028      	beq.n	8002434 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023e2:	f7fe ffb7 	bl	8001354 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	68ba      	ldr	r2, [r7, #8]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d302      	bcc.n	80023f8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d11d      	bne.n	8002434 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	f003 0304 	and.w	r3, r3, #4
 8002402:	2b04      	cmp	r3, #4
 8002404:	d016      	beq.n	8002434 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2200      	movs	r2, #0
 800240a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2220      	movs	r2, #32
 8002410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002420:	f043 0220 	orr.w	r2, r3, #32
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e007      	b.n	8002444 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	f003 0304 	and.w	r3, r3, #4
 800243e:	2b04      	cmp	r3, #4
 8002440:	d1c3      	bne.n	80023ca <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3710      	adds	r7, #16
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800245e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002462:	d11b      	bne.n	800249c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800246c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2220      	movs	r2, #32
 8002478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002488:	f043 0204 	orr.w	r2, r3, #4
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e000      	b.n	800249e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
	...

080024ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b086      	sub	sp, #24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e267      	b.n	800298e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d075      	beq.n	80025b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80024ca:	4b88      	ldr	r3, [pc, #544]	@ (80026ec <HAL_RCC_OscConfig+0x240>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f003 030c 	and.w	r3, r3, #12
 80024d2:	2b04      	cmp	r3, #4
 80024d4:	d00c      	beq.n	80024f0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024d6:	4b85      	ldr	r3, [pc, #532]	@ (80026ec <HAL_RCC_OscConfig+0x240>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80024de:	2b08      	cmp	r3, #8
 80024e0:	d112      	bne.n	8002508 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024e2:	4b82      	ldr	r3, [pc, #520]	@ (80026ec <HAL_RCC_OscConfig+0x240>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024ee:	d10b      	bne.n	8002508 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f0:	4b7e      	ldr	r3, [pc, #504]	@ (80026ec <HAL_RCC_OscConfig+0x240>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d05b      	beq.n	80025b4 <HAL_RCC_OscConfig+0x108>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d157      	bne.n	80025b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e242      	b.n	800298e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002510:	d106      	bne.n	8002520 <HAL_RCC_OscConfig+0x74>
 8002512:	4b76      	ldr	r3, [pc, #472]	@ (80026ec <HAL_RCC_OscConfig+0x240>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a75      	ldr	r2, [pc, #468]	@ (80026ec <HAL_RCC_OscConfig+0x240>)
 8002518:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800251c:	6013      	str	r3, [r2, #0]
 800251e:	e01d      	b.n	800255c <HAL_RCC_OscConfig+0xb0>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002528:	d10c      	bne.n	8002544 <HAL_RCC_OscConfig+0x98>
 800252a:	4b70      	ldr	r3, [pc, #448]	@ (80026ec <HAL_RCC_OscConfig+0x240>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a6f      	ldr	r2, [pc, #444]	@ (80026ec <HAL_RCC_OscConfig+0x240>)
 8002530:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002534:	6013      	str	r3, [r2, #0]
 8002536:	4b6d      	ldr	r3, [pc, #436]	@ (80026ec <HAL_RCC_OscConfig+0x240>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a6c      	ldr	r2, [pc, #432]	@ (80026ec <HAL_RCC_OscConfig+0x240>)
 800253c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002540:	6013      	str	r3, [r2, #0]
 8002542:	e00b      	b.n	800255c <HAL_RCC_OscConfig+0xb0>
 8002544:	4b69      	ldr	r3, [pc, #420]	@ (80026ec <HAL_RCC_OscConfig+0x240>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a68      	ldr	r2, [pc, #416]	@ (80026ec <HAL_RCC_OscConfig+0x240>)
 800254a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800254e:	6013      	str	r3, [r2, #0]
 8002550:	4b66      	ldr	r3, [pc, #408]	@ (80026ec <HAL_RCC_OscConfig+0x240>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a65      	ldr	r2, [pc, #404]	@ (80026ec <HAL_RCC_OscConfig+0x240>)
 8002556:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800255a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d013      	beq.n	800258c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002564:	f7fe fef6 	bl	8001354 <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800256c:	f7fe fef2 	bl	8001354 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b64      	cmp	r3, #100	@ 0x64
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e207      	b.n	800298e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800257e:	4b5b      	ldr	r3, [pc, #364]	@ (80026ec <HAL_RCC_OscConfig+0x240>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d0f0      	beq.n	800256c <HAL_RCC_OscConfig+0xc0>
 800258a:	e014      	b.n	80025b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258c:	f7fe fee2 	bl	8001354 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002594:	f7fe fede 	bl	8001354 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b64      	cmp	r3, #100	@ 0x64
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e1f3      	b.n	800298e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025a6:	4b51      	ldr	r3, [pc, #324]	@ (80026ec <HAL_RCC_OscConfig+0x240>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1f0      	bne.n	8002594 <HAL_RCC_OscConfig+0xe8>
 80025b2:	e000      	b.n	80025b6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d063      	beq.n	800268a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80025c2:	4b4a      	ldr	r3, [pc, #296]	@ (80026ec <HAL_RCC_OscConfig+0x240>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 030c 	and.w	r3, r3, #12
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00b      	beq.n	80025e6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ce:	4b47      	ldr	r3, [pc, #284]	@ (80026ec <HAL_RCC_OscConfig+0x240>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80025d6:	2b08      	cmp	r3, #8
 80025d8:	d11c      	bne.n	8002614 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025da:	4b44      	ldr	r3, [pc, #272]	@ (80026ec <HAL_RCC_OscConfig+0x240>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d116      	bne.n	8002614 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025e6:	4b41      	ldr	r3, [pc, #260]	@ (80026ec <HAL_RCC_OscConfig+0x240>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d005      	beq.n	80025fe <HAL_RCC_OscConfig+0x152>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d001      	beq.n	80025fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e1c7      	b.n	800298e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025fe:	4b3b      	ldr	r3, [pc, #236]	@ (80026ec <HAL_RCC_OscConfig+0x240>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	4937      	ldr	r1, [pc, #220]	@ (80026ec <HAL_RCC_OscConfig+0x240>)
 800260e:	4313      	orrs	r3, r2
 8002610:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002612:	e03a      	b.n	800268a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d020      	beq.n	800265e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800261c:	4b34      	ldr	r3, [pc, #208]	@ (80026f0 <HAL_RCC_OscConfig+0x244>)
 800261e:	2201      	movs	r2, #1
 8002620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002622:	f7fe fe97 	bl	8001354 <HAL_GetTick>
 8002626:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002628:	e008      	b.n	800263c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800262a:	f7fe fe93 	bl	8001354 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e1a8      	b.n	800298e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800263c:	4b2b      	ldr	r3, [pc, #172]	@ (80026ec <HAL_RCC_OscConfig+0x240>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d0f0      	beq.n	800262a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002648:	4b28      	ldr	r3, [pc, #160]	@ (80026ec <HAL_RCC_OscConfig+0x240>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	00db      	lsls	r3, r3, #3
 8002656:	4925      	ldr	r1, [pc, #148]	@ (80026ec <HAL_RCC_OscConfig+0x240>)
 8002658:	4313      	orrs	r3, r2
 800265a:	600b      	str	r3, [r1, #0]
 800265c:	e015      	b.n	800268a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800265e:	4b24      	ldr	r3, [pc, #144]	@ (80026f0 <HAL_RCC_OscConfig+0x244>)
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002664:	f7fe fe76 	bl	8001354 <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800266a:	e008      	b.n	800267e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800266c:	f7fe fe72 	bl	8001354 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e187      	b.n	800298e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800267e:	4b1b      	ldr	r3, [pc, #108]	@ (80026ec <HAL_RCC_OscConfig+0x240>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1f0      	bne.n	800266c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0308 	and.w	r3, r3, #8
 8002692:	2b00      	cmp	r3, #0
 8002694:	d036      	beq.n	8002704 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d016      	beq.n	80026cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800269e:	4b15      	ldr	r3, [pc, #84]	@ (80026f4 <HAL_RCC_OscConfig+0x248>)
 80026a0:	2201      	movs	r2, #1
 80026a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a4:	f7fe fe56 	bl	8001354 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026ac:	f7fe fe52 	bl	8001354 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e167      	b.n	800298e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026be:	4b0b      	ldr	r3, [pc, #44]	@ (80026ec <HAL_RCC_OscConfig+0x240>)
 80026c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0f0      	beq.n	80026ac <HAL_RCC_OscConfig+0x200>
 80026ca:	e01b      	b.n	8002704 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026cc:	4b09      	ldr	r3, [pc, #36]	@ (80026f4 <HAL_RCC_OscConfig+0x248>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026d2:	f7fe fe3f 	bl	8001354 <HAL_GetTick>
 80026d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026d8:	e00e      	b.n	80026f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026da:	f7fe fe3b 	bl	8001354 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d907      	bls.n	80026f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e150      	b.n	800298e <HAL_RCC_OscConfig+0x4e2>
 80026ec:	40023800 	.word	0x40023800
 80026f0:	42470000 	.word	0x42470000
 80026f4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026f8:	4b88      	ldr	r3, [pc, #544]	@ (800291c <HAL_RCC_OscConfig+0x470>)
 80026fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d1ea      	bne.n	80026da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0304 	and.w	r3, r3, #4
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 8097 	beq.w	8002840 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002712:	2300      	movs	r3, #0
 8002714:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002716:	4b81      	ldr	r3, [pc, #516]	@ (800291c <HAL_RCC_OscConfig+0x470>)
 8002718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10f      	bne.n	8002742 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002722:	2300      	movs	r3, #0
 8002724:	60bb      	str	r3, [r7, #8]
 8002726:	4b7d      	ldr	r3, [pc, #500]	@ (800291c <HAL_RCC_OscConfig+0x470>)
 8002728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800272a:	4a7c      	ldr	r2, [pc, #496]	@ (800291c <HAL_RCC_OscConfig+0x470>)
 800272c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002730:	6413      	str	r3, [r2, #64]	@ 0x40
 8002732:	4b7a      	ldr	r3, [pc, #488]	@ (800291c <HAL_RCC_OscConfig+0x470>)
 8002734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002736:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800273a:	60bb      	str	r3, [r7, #8]
 800273c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800273e:	2301      	movs	r3, #1
 8002740:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002742:	4b77      	ldr	r3, [pc, #476]	@ (8002920 <HAL_RCC_OscConfig+0x474>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800274a:	2b00      	cmp	r3, #0
 800274c:	d118      	bne.n	8002780 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800274e:	4b74      	ldr	r3, [pc, #464]	@ (8002920 <HAL_RCC_OscConfig+0x474>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a73      	ldr	r2, [pc, #460]	@ (8002920 <HAL_RCC_OscConfig+0x474>)
 8002754:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002758:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800275a:	f7fe fdfb 	bl	8001354 <HAL_GetTick>
 800275e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002760:	e008      	b.n	8002774 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002762:	f7fe fdf7 	bl	8001354 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d901      	bls.n	8002774 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e10c      	b.n	800298e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002774:	4b6a      	ldr	r3, [pc, #424]	@ (8002920 <HAL_RCC_OscConfig+0x474>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800277c:	2b00      	cmp	r3, #0
 800277e:	d0f0      	beq.n	8002762 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d106      	bne.n	8002796 <HAL_RCC_OscConfig+0x2ea>
 8002788:	4b64      	ldr	r3, [pc, #400]	@ (800291c <HAL_RCC_OscConfig+0x470>)
 800278a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800278c:	4a63      	ldr	r2, [pc, #396]	@ (800291c <HAL_RCC_OscConfig+0x470>)
 800278e:	f043 0301 	orr.w	r3, r3, #1
 8002792:	6713      	str	r3, [r2, #112]	@ 0x70
 8002794:	e01c      	b.n	80027d0 <HAL_RCC_OscConfig+0x324>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	2b05      	cmp	r3, #5
 800279c:	d10c      	bne.n	80027b8 <HAL_RCC_OscConfig+0x30c>
 800279e:	4b5f      	ldr	r3, [pc, #380]	@ (800291c <HAL_RCC_OscConfig+0x470>)
 80027a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027a2:	4a5e      	ldr	r2, [pc, #376]	@ (800291c <HAL_RCC_OscConfig+0x470>)
 80027a4:	f043 0304 	orr.w	r3, r3, #4
 80027a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80027aa:	4b5c      	ldr	r3, [pc, #368]	@ (800291c <HAL_RCC_OscConfig+0x470>)
 80027ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ae:	4a5b      	ldr	r2, [pc, #364]	@ (800291c <HAL_RCC_OscConfig+0x470>)
 80027b0:	f043 0301 	orr.w	r3, r3, #1
 80027b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80027b6:	e00b      	b.n	80027d0 <HAL_RCC_OscConfig+0x324>
 80027b8:	4b58      	ldr	r3, [pc, #352]	@ (800291c <HAL_RCC_OscConfig+0x470>)
 80027ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027bc:	4a57      	ldr	r2, [pc, #348]	@ (800291c <HAL_RCC_OscConfig+0x470>)
 80027be:	f023 0301 	bic.w	r3, r3, #1
 80027c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80027c4:	4b55      	ldr	r3, [pc, #340]	@ (800291c <HAL_RCC_OscConfig+0x470>)
 80027c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027c8:	4a54      	ldr	r2, [pc, #336]	@ (800291c <HAL_RCC_OscConfig+0x470>)
 80027ca:	f023 0304 	bic.w	r3, r3, #4
 80027ce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d015      	beq.n	8002804 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d8:	f7fe fdbc 	bl	8001354 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027de:	e00a      	b.n	80027f6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027e0:	f7fe fdb8 	bl	8001354 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e0cb      	b.n	800298e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027f6:	4b49      	ldr	r3, [pc, #292]	@ (800291c <HAL_RCC_OscConfig+0x470>)
 80027f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d0ee      	beq.n	80027e0 <HAL_RCC_OscConfig+0x334>
 8002802:	e014      	b.n	800282e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002804:	f7fe fda6 	bl	8001354 <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800280a:	e00a      	b.n	8002822 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800280c:	f7fe fda2 	bl	8001354 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	f241 3288 	movw	r2, #5000	@ 0x1388
 800281a:	4293      	cmp	r3, r2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e0b5      	b.n	800298e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002822:	4b3e      	ldr	r3, [pc, #248]	@ (800291c <HAL_RCC_OscConfig+0x470>)
 8002824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1ee      	bne.n	800280c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800282e:	7dfb      	ldrb	r3, [r7, #23]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d105      	bne.n	8002840 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002834:	4b39      	ldr	r3, [pc, #228]	@ (800291c <HAL_RCC_OscConfig+0x470>)
 8002836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002838:	4a38      	ldr	r2, [pc, #224]	@ (800291c <HAL_RCC_OscConfig+0x470>)
 800283a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800283e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	2b00      	cmp	r3, #0
 8002846:	f000 80a1 	beq.w	800298c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800284a:	4b34      	ldr	r3, [pc, #208]	@ (800291c <HAL_RCC_OscConfig+0x470>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 030c 	and.w	r3, r3, #12
 8002852:	2b08      	cmp	r3, #8
 8002854:	d05c      	beq.n	8002910 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	2b02      	cmp	r3, #2
 800285c:	d141      	bne.n	80028e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800285e:	4b31      	ldr	r3, [pc, #196]	@ (8002924 <HAL_RCC_OscConfig+0x478>)
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002864:	f7fe fd76 	bl	8001354 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800286c:	f7fe fd72 	bl	8001354 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e087      	b.n	800298e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800287e:	4b27      	ldr	r3, [pc, #156]	@ (800291c <HAL_RCC_OscConfig+0x470>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1f0      	bne.n	800286c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	69da      	ldr	r2, [r3, #28]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a1b      	ldr	r3, [r3, #32]
 8002892:	431a      	orrs	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002898:	019b      	lsls	r3, r3, #6
 800289a:	431a      	orrs	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a0:	085b      	lsrs	r3, r3, #1
 80028a2:	3b01      	subs	r3, #1
 80028a4:	041b      	lsls	r3, r3, #16
 80028a6:	431a      	orrs	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ac:	061b      	lsls	r3, r3, #24
 80028ae:	491b      	ldr	r1, [pc, #108]	@ (800291c <HAL_RCC_OscConfig+0x470>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002924 <HAL_RCC_OscConfig+0x478>)
 80028b6:	2201      	movs	r2, #1
 80028b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ba:	f7fe fd4b 	bl	8001354 <HAL_GetTick>
 80028be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028c0:	e008      	b.n	80028d4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028c2:	f7fe fd47 	bl	8001354 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d901      	bls.n	80028d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e05c      	b.n	800298e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028d4:	4b11      	ldr	r3, [pc, #68]	@ (800291c <HAL_RCC_OscConfig+0x470>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d0f0      	beq.n	80028c2 <HAL_RCC_OscConfig+0x416>
 80028e0:	e054      	b.n	800298c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028e2:	4b10      	ldr	r3, [pc, #64]	@ (8002924 <HAL_RCC_OscConfig+0x478>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e8:	f7fe fd34 	bl	8001354 <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f0:	f7fe fd30 	bl	8001354 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e045      	b.n	800298e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002902:	4b06      	ldr	r3, [pc, #24]	@ (800291c <HAL_RCC_OscConfig+0x470>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1f0      	bne.n	80028f0 <HAL_RCC_OscConfig+0x444>
 800290e:	e03d      	b.n	800298c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d107      	bne.n	8002928 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e038      	b.n	800298e <HAL_RCC_OscConfig+0x4e2>
 800291c:	40023800 	.word	0x40023800
 8002920:	40007000 	.word	0x40007000
 8002924:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002928:	4b1b      	ldr	r3, [pc, #108]	@ (8002998 <HAL_RCC_OscConfig+0x4ec>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d028      	beq.n	8002988 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002940:	429a      	cmp	r2, r3
 8002942:	d121      	bne.n	8002988 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800294e:	429a      	cmp	r2, r3
 8002950:	d11a      	bne.n	8002988 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002958:	4013      	ands	r3, r2
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800295e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002960:	4293      	cmp	r3, r2
 8002962:	d111      	bne.n	8002988 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800296e:	085b      	lsrs	r3, r3, #1
 8002970:	3b01      	subs	r3, #1
 8002972:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002974:	429a      	cmp	r2, r3
 8002976:	d107      	bne.n	8002988 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002982:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002984:	429a      	cmp	r2, r3
 8002986:	d001      	beq.n	800298c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e000      	b.n	800298e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3718      	adds	r7, #24
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	40023800 	.word	0x40023800

0800299c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d101      	bne.n	80029b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e0cc      	b.n	8002b4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029b0:	4b68      	ldr	r3, [pc, #416]	@ (8002b54 <HAL_RCC_ClockConfig+0x1b8>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0307 	and.w	r3, r3, #7
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d90c      	bls.n	80029d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029be:	4b65      	ldr	r3, [pc, #404]	@ (8002b54 <HAL_RCC_ClockConfig+0x1b8>)
 80029c0:	683a      	ldr	r2, [r7, #0]
 80029c2:	b2d2      	uxtb	r2, r2
 80029c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029c6:	4b63      	ldr	r3, [pc, #396]	@ (8002b54 <HAL_RCC_ClockConfig+0x1b8>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0307 	and.w	r3, r3, #7
 80029ce:	683a      	ldr	r2, [r7, #0]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d001      	beq.n	80029d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e0b8      	b.n	8002b4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d020      	beq.n	8002a26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0304 	and.w	r3, r3, #4
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d005      	beq.n	80029fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029f0:	4b59      	ldr	r3, [pc, #356]	@ (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	4a58      	ldr	r2, [pc, #352]	@ (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 80029f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80029fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0308 	and.w	r3, r3, #8
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d005      	beq.n	8002a14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a08:	4b53      	ldr	r3, [pc, #332]	@ (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	4a52      	ldr	r2, [pc, #328]	@ (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a14:	4b50      	ldr	r3, [pc, #320]	@ (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	494d      	ldr	r1, [pc, #308]	@ (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d044      	beq.n	8002abc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d107      	bne.n	8002a4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a3a:	4b47      	ldr	r3, [pc, #284]	@ (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d119      	bne.n	8002a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e07f      	b.n	8002b4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d003      	beq.n	8002a5a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a56:	2b03      	cmp	r3, #3
 8002a58:	d107      	bne.n	8002a6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a5a:	4b3f      	ldr	r3, [pc, #252]	@ (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d109      	bne.n	8002a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e06f      	b.n	8002b4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a6a:	4b3b      	ldr	r3, [pc, #236]	@ (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e067      	b.n	8002b4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a7a:	4b37      	ldr	r3, [pc, #220]	@ (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f023 0203 	bic.w	r2, r3, #3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	4934      	ldr	r1, [pc, #208]	@ (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a8c:	f7fe fc62 	bl	8001354 <HAL_GetTick>
 8002a90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a92:	e00a      	b.n	8002aaa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a94:	f7fe fc5e 	bl	8001354 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e04f      	b.n	8002b4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aaa:	4b2b      	ldr	r3, [pc, #172]	@ (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f003 020c 	and.w	r2, r3, #12
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d1eb      	bne.n	8002a94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002abc:	4b25      	ldr	r3, [pc, #148]	@ (8002b54 <HAL_RCC_ClockConfig+0x1b8>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0307 	and.w	r3, r3, #7
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d20c      	bcs.n	8002ae4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aca:	4b22      	ldr	r3, [pc, #136]	@ (8002b54 <HAL_RCC_ClockConfig+0x1b8>)
 8002acc:	683a      	ldr	r2, [r7, #0]
 8002ace:	b2d2      	uxtb	r2, r2
 8002ad0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ad2:	4b20      	ldr	r3, [pc, #128]	@ (8002b54 <HAL_RCC_ClockConfig+0x1b8>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0307 	and.w	r3, r3, #7
 8002ada:	683a      	ldr	r2, [r7, #0]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d001      	beq.n	8002ae4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e032      	b.n	8002b4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0304 	and.w	r3, r3, #4
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d008      	beq.n	8002b02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002af0:	4b19      	ldr	r3, [pc, #100]	@ (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	4916      	ldr	r1, [pc, #88]	@ (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0308 	and.w	r3, r3, #8
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d009      	beq.n	8002b22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b0e:	4b12      	ldr	r3, [pc, #72]	@ (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	490e      	ldr	r1, [pc, #56]	@ (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b22:	f000 f821 	bl	8002b68 <HAL_RCC_GetSysClockFreq>
 8002b26:	4602      	mov	r2, r0
 8002b28:	4b0b      	ldr	r3, [pc, #44]	@ (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	091b      	lsrs	r3, r3, #4
 8002b2e:	f003 030f 	and.w	r3, r3, #15
 8002b32:	490a      	ldr	r1, [pc, #40]	@ (8002b5c <HAL_RCC_ClockConfig+0x1c0>)
 8002b34:	5ccb      	ldrb	r3, [r1, r3]
 8002b36:	fa22 f303 	lsr.w	r3, r2, r3
 8002b3a:	4a09      	ldr	r2, [pc, #36]	@ (8002b60 <HAL_RCC_ClockConfig+0x1c4>)
 8002b3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002b3e:	4b09      	ldr	r3, [pc, #36]	@ (8002b64 <HAL_RCC_ClockConfig+0x1c8>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7fe fabc 	bl	80010c0 <HAL_InitTick>

  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	40023c00 	.word	0x40023c00
 8002b58:	40023800 	.word	0x40023800
 8002b5c:	08006c74 	.word	0x08006c74
 8002b60:	20000004 	.word	0x20000004
 8002b64:	20000008 	.word	0x20000008

08002b68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b6c:	b094      	sub	sp, #80	@ 0x50
 8002b6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b70:	2300      	movs	r3, #0
 8002b72:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002b74:	2300      	movs	r3, #0
 8002b76:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b80:	4b79      	ldr	r3, [pc, #484]	@ (8002d68 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f003 030c 	and.w	r3, r3, #12
 8002b88:	2b08      	cmp	r3, #8
 8002b8a:	d00d      	beq.n	8002ba8 <HAL_RCC_GetSysClockFreq+0x40>
 8002b8c:	2b08      	cmp	r3, #8
 8002b8e:	f200 80e1 	bhi.w	8002d54 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d002      	beq.n	8002b9c <HAL_RCC_GetSysClockFreq+0x34>
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	d003      	beq.n	8002ba2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b9a:	e0db      	b.n	8002d54 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b9c:	4b73      	ldr	r3, [pc, #460]	@ (8002d6c <HAL_RCC_GetSysClockFreq+0x204>)
 8002b9e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ba0:	e0db      	b.n	8002d5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ba2:	4b73      	ldr	r3, [pc, #460]	@ (8002d70 <HAL_RCC_GetSysClockFreq+0x208>)
 8002ba4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ba6:	e0d8      	b.n	8002d5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ba8:	4b6f      	ldr	r3, [pc, #444]	@ (8002d68 <HAL_RCC_GetSysClockFreq+0x200>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002bb0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bb2:	4b6d      	ldr	r3, [pc, #436]	@ (8002d68 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d063      	beq.n	8002c86 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bbe:	4b6a      	ldr	r3, [pc, #424]	@ (8002d68 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	099b      	lsrs	r3, r3, #6
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002bc8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bd0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bd6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002bda:	4622      	mov	r2, r4
 8002bdc:	462b      	mov	r3, r5
 8002bde:	f04f 0000 	mov.w	r0, #0
 8002be2:	f04f 0100 	mov.w	r1, #0
 8002be6:	0159      	lsls	r1, r3, #5
 8002be8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bec:	0150      	lsls	r0, r2, #5
 8002bee:	4602      	mov	r2, r0
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	4621      	mov	r1, r4
 8002bf4:	1a51      	subs	r1, r2, r1
 8002bf6:	6139      	str	r1, [r7, #16]
 8002bf8:	4629      	mov	r1, r5
 8002bfa:	eb63 0301 	sbc.w	r3, r3, r1
 8002bfe:	617b      	str	r3, [r7, #20]
 8002c00:	f04f 0200 	mov.w	r2, #0
 8002c04:	f04f 0300 	mov.w	r3, #0
 8002c08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c0c:	4659      	mov	r1, fp
 8002c0e:	018b      	lsls	r3, r1, #6
 8002c10:	4651      	mov	r1, sl
 8002c12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c16:	4651      	mov	r1, sl
 8002c18:	018a      	lsls	r2, r1, #6
 8002c1a:	4651      	mov	r1, sl
 8002c1c:	ebb2 0801 	subs.w	r8, r2, r1
 8002c20:	4659      	mov	r1, fp
 8002c22:	eb63 0901 	sbc.w	r9, r3, r1
 8002c26:	f04f 0200 	mov.w	r2, #0
 8002c2a:	f04f 0300 	mov.w	r3, #0
 8002c2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c3a:	4690      	mov	r8, r2
 8002c3c:	4699      	mov	r9, r3
 8002c3e:	4623      	mov	r3, r4
 8002c40:	eb18 0303 	adds.w	r3, r8, r3
 8002c44:	60bb      	str	r3, [r7, #8]
 8002c46:	462b      	mov	r3, r5
 8002c48:	eb49 0303 	adc.w	r3, r9, r3
 8002c4c:	60fb      	str	r3, [r7, #12]
 8002c4e:	f04f 0200 	mov.w	r2, #0
 8002c52:	f04f 0300 	mov.w	r3, #0
 8002c56:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c5a:	4629      	mov	r1, r5
 8002c5c:	024b      	lsls	r3, r1, #9
 8002c5e:	4621      	mov	r1, r4
 8002c60:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c64:	4621      	mov	r1, r4
 8002c66:	024a      	lsls	r2, r1, #9
 8002c68:	4610      	mov	r0, r2
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c6e:	2200      	movs	r2, #0
 8002c70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c78:	f7fd fb02 	bl	8000280 <__aeabi_uldivmod>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	460b      	mov	r3, r1
 8002c80:	4613      	mov	r3, r2
 8002c82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c84:	e058      	b.n	8002d38 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c86:	4b38      	ldr	r3, [pc, #224]	@ (8002d68 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	099b      	lsrs	r3, r3, #6
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	4618      	mov	r0, r3
 8002c90:	4611      	mov	r1, r2
 8002c92:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c96:	623b      	str	r3, [r7, #32]
 8002c98:	2300      	movs	r3, #0
 8002c9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c9c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ca0:	4642      	mov	r2, r8
 8002ca2:	464b      	mov	r3, r9
 8002ca4:	f04f 0000 	mov.w	r0, #0
 8002ca8:	f04f 0100 	mov.w	r1, #0
 8002cac:	0159      	lsls	r1, r3, #5
 8002cae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cb2:	0150      	lsls	r0, r2, #5
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	4641      	mov	r1, r8
 8002cba:	ebb2 0a01 	subs.w	sl, r2, r1
 8002cbe:	4649      	mov	r1, r9
 8002cc0:	eb63 0b01 	sbc.w	fp, r3, r1
 8002cc4:	f04f 0200 	mov.w	r2, #0
 8002cc8:	f04f 0300 	mov.w	r3, #0
 8002ccc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002cd0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002cd4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002cd8:	ebb2 040a 	subs.w	r4, r2, sl
 8002cdc:	eb63 050b 	sbc.w	r5, r3, fp
 8002ce0:	f04f 0200 	mov.w	r2, #0
 8002ce4:	f04f 0300 	mov.w	r3, #0
 8002ce8:	00eb      	lsls	r3, r5, #3
 8002cea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cee:	00e2      	lsls	r2, r4, #3
 8002cf0:	4614      	mov	r4, r2
 8002cf2:	461d      	mov	r5, r3
 8002cf4:	4643      	mov	r3, r8
 8002cf6:	18e3      	adds	r3, r4, r3
 8002cf8:	603b      	str	r3, [r7, #0]
 8002cfa:	464b      	mov	r3, r9
 8002cfc:	eb45 0303 	adc.w	r3, r5, r3
 8002d00:	607b      	str	r3, [r7, #4]
 8002d02:	f04f 0200 	mov.w	r2, #0
 8002d06:	f04f 0300 	mov.w	r3, #0
 8002d0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d0e:	4629      	mov	r1, r5
 8002d10:	028b      	lsls	r3, r1, #10
 8002d12:	4621      	mov	r1, r4
 8002d14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d18:	4621      	mov	r1, r4
 8002d1a:	028a      	lsls	r2, r1, #10
 8002d1c:	4610      	mov	r0, r2
 8002d1e:	4619      	mov	r1, r3
 8002d20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d22:	2200      	movs	r2, #0
 8002d24:	61bb      	str	r3, [r7, #24]
 8002d26:	61fa      	str	r2, [r7, #28]
 8002d28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d2c:	f7fd faa8 	bl	8000280 <__aeabi_uldivmod>
 8002d30:	4602      	mov	r2, r0
 8002d32:	460b      	mov	r3, r1
 8002d34:	4613      	mov	r3, r2
 8002d36:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002d38:	4b0b      	ldr	r3, [pc, #44]	@ (8002d68 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	0c1b      	lsrs	r3, r3, #16
 8002d3e:	f003 0303 	and.w	r3, r3, #3
 8002d42:	3301      	adds	r3, #1
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002d48:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d50:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d52:	e002      	b.n	8002d5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d54:	4b05      	ldr	r3, [pc, #20]	@ (8002d6c <HAL_RCC_GetSysClockFreq+0x204>)
 8002d56:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3750      	adds	r7, #80	@ 0x50
 8002d60:	46bd      	mov	sp, r7
 8002d62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d66:	bf00      	nop
 8002d68:	40023800 	.word	0x40023800
 8002d6c:	00f42400 	.word	0x00f42400
 8002d70:	007a1200 	.word	0x007a1200

08002d74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d78:	4b03      	ldr	r3, [pc, #12]	@ (8002d88 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	20000004 	.word	0x20000004

08002d8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d90:	f7ff fff0 	bl	8002d74 <HAL_RCC_GetHCLKFreq>
 8002d94:	4602      	mov	r2, r0
 8002d96:	4b05      	ldr	r3, [pc, #20]	@ (8002dac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	0a9b      	lsrs	r3, r3, #10
 8002d9c:	f003 0307 	and.w	r3, r3, #7
 8002da0:	4903      	ldr	r1, [pc, #12]	@ (8002db0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002da2:	5ccb      	ldrb	r3, [r1, r3]
 8002da4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40023800 	.word	0x40023800
 8002db0:	08006c84 	.word	0x08006c84

08002db4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002db8:	f7ff ffdc 	bl	8002d74 <HAL_RCC_GetHCLKFreq>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	4b05      	ldr	r3, [pc, #20]	@ (8002dd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	0b5b      	lsrs	r3, r3, #13
 8002dc4:	f003 0307 	and.w	r3, r3, #7
 8002dc8:	4903      	ldr	r1, [pc, #12]	@ (8002dd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dca:	5ccb      	ldrb	r3, [r1, r3]
 8002dcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	08006c84 	.word	0x08006c84

08002ddc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	220f      	movs	r2, #15
 8002dea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002dec:	4b12      	ldr	r3, [pc, #72]	@ (8002e38 <HAL_RCC_GetClockConfig+0x5c>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f003 0203 	and.w	r2, r3, #3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002df8:	4b0f      	ldr	r3, [pc, #60]	@ (8002e38 <HAL_RCC_GetClockConfig+0x5c>)
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002e04:	4b0c      	ldr	r3, [pc, #48]	@ (8002e38 <HAL_RCC_GetClockConfig+0x5c>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002e10:	4b09      	ldr	r3, [pc, #36]	@ (8002e38 <HAL_RCC_GetClockConfig+0x5c>)
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	08db      	lsrs	r3, r3, #3
 8002e16:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002e1e:	4b07      	ldr	r3, [pc, #28]	@ (8002e3c <HAL_RCC_GetClockConfig+0x60>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0207 	and.w	r2, r3, #7
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	601a      	str	r2, [r3, #0]
}
 8002e2a:	bf00      	nop
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	40023c00 	.word	0x40023c00

08002e40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e041      	b.n	8002ed6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d106      	bne.n	8002e6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 f839 	bl	8002ede <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2202      	movs	r2, #2
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	3304      	adds	r3, #4
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	4610      	mov	r0, r2
 8002e80:	f000 f9c0 	bl	8003204 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b083      	sub	sp, #12
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002ee6:	bf00      	nop
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
	...

08002ef4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d001      	beq.n	8002f0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e04e      	b.n	8002faa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2202      	movs	r2, #2
 8002f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68da      	ldr	r2, [r3, #12]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f042 0201 	orr.w	r2, r2, #1
 8002f22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a23      	ldr	r2, [pc, #140]	@ (8002fb8 <HAL_TIM_Base_Start_IT+0xc4>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d022      	beq.n	8002f74 <HAL_TIM_Base_Start_IT+0x80>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f36:	d01d      	beq.n	8002f74 <HAL_TIM_Base_Start_IT+0x80>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a1f      	ldr	r2, [pc, #124]	@ (8002fbc <HAL_TIM_Base_Start_IT+0xc8>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d018      	beq.n	8002f74 <HAL_TIM_Base_Start_IT+0x80>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a1e      	ldr	r2, [pc, #120]	@ (8002fc0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d013      	beq.n	8002f74 <HAL_TIM_Base_Start_IT+0x80>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a1c      	ldr	r2, [pc, #112]	@ (8002fc4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d00e      	beq.n	8002f74 <HAL_TIM_Base_Start_IT+0x80>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a1b      	ldr	r2, [pc, #108]	@ (8002fc8 <HAL_TIM_Base_Start_IT+0xd4>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d009      	beq.n	8002f74 <HAL_TIM_Base_Start_IT+0x80>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a19      	ldr	r2, [pc, #100]	@ (8002fcc <HAL_TIM_Base_Start_IT+0xd8>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d004      	beq.n	8002f74 <HAL_TIM_Base_Start_IT+0x80>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a18      	ldr	r2, [pc, #96]	@ (8002fd0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d111      	bne.n	8002f98 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f003 0307 	and.w	r3, r3, #7
 8002f7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2b06      	cmp	r3, #6
 8002f84:	d010      	beq.n	8002fa8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f042 0201 	orr.w	r2, r2, #1
 8002f94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f96:	e007      	b.n	8002fa8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f042 0201 	orr.w	r2, r2, #1
 8002fa6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3714      	adds	r7, #20
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	40010000 	.word	0x40010000
 8002fbc:	40000400 	.word	0x40000400
 8002fc0:	40000800 	.word	0x40000800
 8002fc4:	40000c00 	.word	0x40000c00
 8002fc8:	40010400 	.word	0x40010400
 8002fcc:	40014000 	.word	0x40014000
 8002fd0:	40001800 	.word	0x40001800

08002fd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d020      	beq.n	8003038 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f003 0302 	and.w	r3, r3, #2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d01b      	beq.n	8003038 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f06f 0202 	mvn.w	r2, #2
 8003008:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2201      	movs	r2, #1
 800300e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	f003 0303 	and.w	r3, r3, #3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f8d2 	bl	80031c8 <HAL_TIM_IC_CaptureCallback>
 8003024:	e005      	b.n	8003032 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 f8c4 	bl	80031b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 f8d5 	bl	80031dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	f003 0304 	and.w	r3, r3, #4
 800303e:	2b00      	cmp	r3, #0
 8003040:	d020      	beq.n	8003084 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f003 0304 	and.w	r3, r3, #4
 8003048:	2b00      	cmp	r3, #0
 800304a:	d01b      	beq.n	8003084 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f06f 0204 	mvn.w	r2, #4
 8003054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2202      	movs	r2, #2
 800305a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 f8ac 	bl	80031c8 <HAL_TIM_IC_CaptureCallback>
 8003070:	e005      	b.n	800307e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f89e 	bl	80031b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 f8af 	bl	80031dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	f003 0308 	and.w	r3, r3, #8
 800308a:	2b00      	cmp	r3, #0
 800308c:	d020      	beq.n	80030d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f003 0308 	and.w	r3, r3, #8
 8003094:	2b00      	cmp	r3, #0
 8003096:	d01b      	beq.n	80030d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f06f 0208 	mvn.w	r2, #8
 80030a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2204      	movs	r2, #4
 80030a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	69db      	ldr	r3, [r3, #28]
 80030ae:	f003 0303 	and.w	r3, r3, #3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d003      	beq.n	80030be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 f886 	bl	80031c8 <HAL_TIM_IC_CaptureCallback>
 80030bc:	e005      	b.n	80030ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 f878 	bl	80031b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 f889 	bl	80031dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	f003 0310 	and.w	r3, r3, #16
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d020      	beq.n	800311c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f003 0310 	and.w	r3, r3, #16
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d01b      	beq.n	800311c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f06f 0210 	mvn.w	r2, #16
 80030ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2208      	movs	r2, #8
 80030f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	69db      	ldr	r3, [r3, #28]
 80030fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d003      	beq.n	800310a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 f860 	bl	80031c8 <HAL_TIM_IC_CaptureCallback>
 8003108:	e005      	b.n	8003116 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 f852 	bl	80031b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 f863 	bl	80031dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00c      	beq.n	8003140 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f003 0301 	and.w	r3, r3, #1
 800312c:	2b00      	cmp	r3, #0
 800312e:	d007      	beq.n	8003140 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f06f 0201 	mvn.w	r2, #1
 8003138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f7fd fef0 	bl	8000f20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00c      	beq.n	8003164 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003150:	2b00      	cmp	r3, #0
 8003152:	d007      	beq.n	8003164 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800315c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 f900 	bl	8003364 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00c      	beq.n	8003188 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003174:	2b00      	cmp	r3, #0
 8003176:	d007      	beq.n	8003188 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 f834 	bl	80031f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	f003 0320 	and.w	r3, r3, #32
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00c      	beq.n	80031ac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f003 0320 	and.w	r3, r3, #32
 8003198:	2b00      	cmp	r3, #0
 800319a:	d007      	beq.n	80031ac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f06f 0220 	mvn.w	r2, #32
 80031a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 f8d2 	bl	8003350 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031ac:	bf00      	nop
 80031ae:	3710      	adds	r7, #16
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a43      	ldr	r2, [pc, #268]	@ (8003324 <TIM_Base_SetConfig+0x120>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d013      	beq.n	8003244 <TIM_Base_SetConfig+0x40>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003222:	d00f      	beq.n	8003244 <TIM_Base_SetConfig+0x40>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a40      	ldr	r2, [pc, #256]	@ (8003328 <TIM_Base_SetConfig+0x124>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d00b      	beq.n	8003244 <TIM_Base_SetConfig+0x40>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a3f      	ldr	r2, [pc, #252]	@ (800332c <TIM_Base_SetConfig+0x128>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d007      	beq.n	8003244 <TIM_Base_SetConfig+0x40>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a3e      	ldr	r2, [pc, #248]	@ (8003330 <TIM_Base_SetConfig+0x12c>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d003      	beq.n	8003244 <TIM_Base_SetConfig+0x40>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a3d      	ldr	r2, [pc, #244]	@ (8003334 <TIM_Base_SetConfig+0x130>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d108      	bne.n	8003256 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800324a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	4313      	orrs	r3, r2
 8003254:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a32      	ldr	r2, [pc, #200]	@ (8003324 <TIM_Base_SetConfig+0x120>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d02b      	beq.n	80032b6 <TIM_Base_SetConfig+0xb2>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003264:	d027      	beq.n	80032b6 <TIM_Base_SetConfig+0xb2>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a2f      	ldr	r2, [pc, #188]	@ (8003328 <TIM_Base_SetConfig+0x124>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d023      	beq.n	80032b6 <TIM_Base_SetConfig+0xb2>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a2e      	ldr	r2, [pc, #184]	@ (800332c <TIM_Base_SetConfig+0x128>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d01f      	beq.n	80032b6 <TIM_Base_SetConfig+0xb2>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a2d      	ldr	r2, [pc, #180]	@ (8003330 <TIM_Base_SetConfig+0x12c>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d01b      	beq.n	80032b6 <TIM_Base_SetConfig+0xb2>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a2c      	ldr	r2, [pc, #176]	@ (8003334 <TIM_Base_SetConfig+0x130>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d017      	beq.n	80032b6 <TIM_Base_SetConfig+0xb2>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a2b      	ldr	r2, [pc, #172]	@ (8003338 <TIM_Base_SetConfig+0x134>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d013      	beq.n	80032b6 <TIM_Base_SetConfig+0xb2>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a2a      	ldr	r2, [pc, #168]	@ (800333c <TIM_Base_SetConfig+0x138>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d00f      	beq.n	80032b6 <TIM_Base_SetConfig+0xb2>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a29      	ldr	r2, [pc, #164]	@ (8003340 <TIM_Base_SetConfig+0x13c>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d00b      	beq.n	80032b6 <TIM_Base_SetConfig+0xb2>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a28      	ldr	r2, [pc, #160]	@ (8003344 <TIM_Base_SetConfig+0x140>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d007      	beq.n	80032b6 <TIM_Base_SetConfig+0xb2>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a27      	ldr	r2, [pc, #156]	@ (8003348 <TIM_Base_SetConfig+0x144>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d003      	beq.n	80032b6 <TIM_Base_SetConfig+0xb2>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a26      	ldr	r2, [pc, #152]	@ (800334c <TIM_Base_SetConfig+0x148>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d108      	bne.n	80032c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	689a      	ldr	r2, [r3, #8]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a0e      	ldr	r2, [pc, #56]	@ (8003324 <TIM_Base_SetConfig+0x120>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d003      	beq.n	80032f6 <TIM_Base_SetConfig+0xf2>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a10      	ldr	r2, [pc, #64]	@ (8003334 <TIM_Base_SetConfig+0x130>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d103      	bne.n	80032fe <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	691a      	ldr	r2, [r3, #16]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f043 0204 	orr.w	r2, r3, #4
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2201      	movs	r2, #1
 800330e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	601a      	str	r2, [r3, #0]
}
 8003316:	bf00      	nop
 8003318:	3714      	adds	r7, #20
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	40010000 	.word	0x40010000
 8003328:	40000400 	.word	0x40000400
 800332c:	40000800 	.word	0x40000800
 8003330:	40000c00 	.word	0x40000c00
 8003334:	40010400 	.word	0x40010400
 8003338:	40014000 	.word	0x40014000
 800333c:	40014400 	.word	0x40014400
 8003340:	40014800 	.word	0x40014800
 8003344:	40001800 	.word	0x40001800
 8003348:	40001c00 	.word	0x40001c00
 800334c:	40002000 	.word	0x40002000

08003350 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e042      	b.n	8003410 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	d106      	bne.n	80033a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7fd fe46 	bl	8001030 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2224      	movs	r2, #36	@ 0x24
 80033a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68da      	ldr	r2, [r3, #12]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80033ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 f973 	bl	80036a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	691a      	ldr	r2, [r3, #16]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80033d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	695a      	ldr	r2, [r3, #20]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80033e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68da      	ldr	r2, [r3, #12]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80033f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2220      	movs	r2, #32
 80033fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2220      	movs	r2, #32
 8003404:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800340e:	2300      	movs	r3, #0
}
 8003410:	4618      	mov	r0, r3
 8003412:	3708      	adds	r7, #8
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b08a      	sub	sp, #40	@ 0x28
 800341c:	af02      	add	r7, sp, #8
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	603b      	str	r3, [r7, #0]
 8003424:	4613      	mov	r3, r2
 8003426:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003428:	2300      	movs	r3, #0
 800342a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003432:	b2db      	uxtb	r3, r3
 8003434:	2b20      	cmp	r3, #32
 8003436:	d175      	bne.n	8003524 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d002      	beq.n	8003444 <HAL_UART_Transmit+0x2c>
 800343e:	88fb      	ldrh	r3, [r7, #6]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e06e      	b.n	8003526 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2221      	movs	r2, #33	@ 0x21
 8003452:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003456:	f7fd ff7d 	bl	8001354 <HAL_GetTick>
 800345a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	88fa      	ldrh	r2, [r7, #6]
 8003460:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	88fa      	ldrh	r2, [r7, #6]
 8003466:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003470:	d108      	bne.n	8003484 <HAL_UART_Transmit+0x6c>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d104      	bne.n	8003484 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800347a:	2300      	movs	r3, #0
 800347c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	61bb      	str	r3, [r7, #24]
 8003482:	e003      	b.n	800348c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003488:	2300      	movs	r3, #0
 800348a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800348c:	e02e      	b.n	80034ec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	9300      	str	r3, [sp, #0]
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	2200      	movs	r2, #0
 8003496:	2180      	movs	r1, #128	@ 0x80
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f000 f848 	bl	800352e <UART_WaitOnFlagUntilTimeout>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d005      	beq.n	80034b0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2220      	movs	r2, #32
 80034a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e03a      	b.n	8003526 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10b      	bne.n	80034ce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	881b      	ldrh	r3, [r3, #0]
 80034ba:	461a      	mov	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	3302      	adds	r3, #2
 80034ca:	61bb      	str	r3, [r7, #24]
 80034cc:	e007      	b.n	80034de <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	781a      	ldrb	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	3301      	adds	r3, #1
 80034dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	3b01      	subs	r3, #1
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1cb      	bne.n	800348e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	9300      	str	r3, [sp, #0]
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	2200      	movs	r2, #0
 80034fe:	2140      	movs	r1, #64	@ 0x40
 8003500:	68f8      	ldr	r0, [r7, #12]
 8003502:	f000 f814 	bl	800352e <UART_WaitOnFlagUntilTimeout>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d005      	beq.n	8003518 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2220      	movs	r2, #32
 8003510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e006      	b.n	8003526 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2220      	movs	r2, #32
 800351c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003520:	2300      	movs	r3, #0
 8003522:	e000      	b.n	8003526 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003524:	2302      	movs	r3, #2
  }
}
 8003526:	4618      	mov	r0, r3
 8003528:	3720      	adds	r7, #32
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b086      	sub	sp, #24
 8003532:	af00      	add	r7, sp, #0
 8003534:	60f8      	str	r0, [r7, #12]
 8003536:	60b9      	str	r1, [r7, #8]
 8003538:	603b      	str	r3, [r7, #0]
 800353a:	4613      	mov	r3, r2
 800353c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800353e:	e03b      	b.n	80035b8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003540:	6a3b      	ldr	r3, [r7, #32]
 8003542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003546:	d037      	beq.n	80035b8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003548:	f7fd ff04 	bl	8001354 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	6a3a      	ldr	r2, [r7, #32]
 8003554:	429a      	cmp	r2, r3
 8003556:	d302      	bcc.n	800355e <UART_WaitOnFlagUntilTimeout+0x30>
 8003558:	6a3b      	ldr	r3, [r7, #32]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e03a      	b.n	80035d8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	2b00      	cmp	r3, #0
 800356e:	d023      	beq.n	80035b8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	2b80      	cmp	r3, #128	@ 0x80
 8003574:	d020      	beq.n	80035b8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	2b40      	cmp	r3, #64	@ 0x40
 800357a:	d01d      	beq.n	80035b8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0308 	and.w	r3, r3, #8
 8003586:	2b08      	cmp	r3, #8
 8003588:	d116      	bne.n	80035b8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800358a:	2300      	movs	r3, #0
 800358c:	617b      	str	r3, [r7, #20]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	617b      	str	r3, [r7, #20]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	617b      	str	r3, [r7, #20]
 800359e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f000 f81d 	bl	80035e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2208      	movs	r2, #8
 80035aa:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e00f      	b.n	80035d8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	4013      	ands	r3, r2
 80035c2:	68ba      	ldr	r2, [r7, #8]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	bf0c      	ite	eq
 80035c8:	2301      	moveq	r3, #1
 80035ca:	2300      	movne	r3, #0
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	461a      	mov	r2, r3
 80035d0:	79fb      	ldrb	r3, [r7, #7]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d0b4      	beq.n	8003540 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3718      	adds	r7, #24
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b095      	sub	sp, #84	@ 0x54
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	330c      	adds	r3, #12
 80035ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035f2:	e853 3f00 	ldrex	r3, [r3]
 80035f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80035f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	330c      	adds	r3, #12
 8003606:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003608:	643a      	str	r2, [r7, #64]	@ 0x40
 800360a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800360c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800360e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003610:	e841 2300 	strex	r3, r2, [r1]
 8003614:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1e5      	bne.n	80035e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	3314      	adds	r3, #20
 8003622:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003624:	6a3b      	ldr	r3, [r7, #32]
 8003626:	e853 3f00 	ldrex	r3, [r3]
 800362a:	61fb      	str	r3, [r7, #28]
   return(result);
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	f023 0301 	bic.w	r3, r3, #1
 8003632:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	3314      	adds	r3, #20
 800363a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800363c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800363e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003640:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003642:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003644:	e841 2300 	strex	r3, r2, [r1]
 8003648:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800364a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1e5      	bne.n	800361c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003654:	2b01      	cmp	r3, #1
 8003656:	d119      	bne.n	800368c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	330c      	adds	r3, #12
 800365e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	e853 3f00 	ldrex	r3, [r3]
 8003666:	60bb      	str	r3, [r7, #8]
   return(result);
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	f023 0310 	bic.w	r3, r3, #16
 800366e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	330c      	adds	r3, #12
 8003676:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003678:	61ba      	str	r2, [r7, #24]
 800367a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800367c:	6979      	ldr	r1, [r7, #20]
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	e841 2300 	strex	r3, r2, [r1]
 8003684:	613b      	str	r3, [r7, #16]
   return(result);
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1e5      	bne.n	8003658 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2220      	movs	r2, #32
 8003690:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800369a:	bf00      	nop
 800369c:	3754      	adds	r7, #84	@ 0x54
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
	...

080036a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036ac:	b0c0      	sub	sp, #256	@ 0x100
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80036c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036c4:	68d9      	ldr	r1, [r3, #12]
 80036c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	ea40 0301 	orr.w	r3, r0, r1
 80036d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036d6:	689a      	ldr	r2, [r3, #8]
 80036d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	431a      	orrs	r2, r3
 80036e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	431a      	orrs	r2, r3
 80036e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036ec:	69db      	ldr	r3, [r3, #28]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80036f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003700:	f021 010c 	bic.w	r1, r1, #12
 8003704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800370e:	430b      	orrs	r3, r1
 8003710:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800371e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003722:	6999      	ldr	r1, [r3, #24]
 8003724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	ea40 0301 	orr.w	r3, r0, r1
 800372e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	4b8f      	ldr	r3, [pc, #572]	@ (8003974 <UART_SetConfig+0x2cc>)
 8003738:	429a      	cmp	r2, r3
 800373a:	d005      	beq.n	8003748 <UART_SetConfig+0xa0>
 800373c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	4b8d      	ldr	r3, [pc, #564]	@ (8003978 <UART_SetConfig+0x2d0>)
 8003744:	429a      	cmp	r2, r3
 8003746:	d104      	bne.n	8003752 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003748:	f7ff fb34 	bl	8002db4 <HAL_RCC_GetPCLK2Freq>
 800374c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003750:	e003      	b.n	800375a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003752:	f7ff fb1b 	bl	8002d8c <HAL_RCC_GetPCLK1Freq>
 8003756:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800375a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800375e:	69db      	ldr	r3, [r3, #28]
 8003760:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003764:	f040 810c 	bne.w	8003980 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003768:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800376c:	2200      	movs	r2, #0
 800376e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003772:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003776:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800377a:	4622      	mov	r2, r4
 800377c:	462b      	mov	r3, r5
 800377e:	1891      	adds	r1, r2, r2
 8003780:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003782:	415b      	adcs	r3, r3
 8003784:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003786:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800378a:	4621      	mov	r1, r4
 800378c:	eb12 0801 	adds.w	r8, r2, r1
 8003790:	4629      	mov	r1, r5
 8003792:	eb43 0901 	adc.w	r9, r3, r1
 8003796:	f04f 0200 	mov.w	r2, #0
 800379a:	f04f 0300 	mov.w	r3, #0
 800379e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037aa:	4690      	mov	r8, r2
 80037ac:	4699      	mov	r9, r3
 80037ae:	4623      	mov	r3, r4
 80037b0:	eb18 0303 	adds.w	r3, r8, r3
 80037b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80037b8:	462b      	mov	r3, r5
 80037ba:	eb49 0303 	adc.w	r3, r9, r3
 80037be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80037c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80037ce:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80037d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80037d6:	460b      	mov	r3, r1
 80037d8:	18db      	adds	r3, r3, r3
 80037da:	653b      	str	r3, [r7, #80]	@ 0x50
 80037dc:	4613      	mov	r3, r2
 80037de:	eb42 0303 	adc.w	r3, r2, r3
 80037e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80037e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80037e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80037ec:	f7fc fd48 	bl	8000280 <__aeabi_uldivmod>
 80037f0:	4602      	mov	r2, r0
 80037f2:	460b      	mov	r3, r1
 80037f4:	4b61      	ldr	r3, [pc, #388]	@ (800397c <UART_SetConfig+0x2d4>)
 80037f6:	fba3 2302 	umull	r2, r3, r3, r2
 80037fa:	095b      	lsrs	r3, r3, #5
 80037fc:	011c      	lsls	r4, r3, #4
 80037fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003802:	2200      	movs	r2, #0
 8003804:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003808:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800380c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003810:	4642      	mov	r2, r8
 8003812:	464b      	mov	r3, r9
 8003814:	1891      	adds	r1, r2, r2
 8003816:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003818:	415b      	adcs	r3, r3
 800381a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800381c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003820:	4641      	mov	r1, r8
 8003822:	eb12 0a01 	adds.w	sl, r2, r1
 8003826:	4649      	mov	r1, r9
 8003828:	eb43 0b01 	adc.w	fp, r3, r1
 800382c:	f04f 0200 	mov.w	r2, #0
 8003830:	f04f 0300 	mov.w	r3, #0
 8003834:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003838:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800383c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003840:	4692      	mov	sl, r2
 8003842:	469b      	mov	fp, r3
 8003844:	4643      	mov	r3, r8
 8003846:	eb1a 0303 	adds.w	r3, sl, r3
 800384a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800384e:	464b      	mov	r3, r9
 8003850:	eb4b 0303 	adc.w	r3, fp, r3
 8003854:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003864:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003868:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800386c:	460b      	mov	r3, r1
 800386e:	18db      	adds	r3, r3, r3
 8003870:	643b      	str	r3, [r7, #64]	@ 0x40
 8003872:	4613      	mov	r3, r2
 8003874:	eb42 0303 	adc.w	r3, r2, r3
 8003878:	647b      	str	r3, [r7, #68]	@ 0x44
 800387a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800387e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003882:	f7fc fcfd 	bl	8000280 <__aeabi_uldivmod>
 8003886:	4602      	mov	r2, r0
 8003888:	460b      	mov	r3, r1
 800388a:	4611      	mov	r1, r2
 800388c:	4b3b      	ldr	r3, [pc, #236]	@ (800397c <UART_SetConfig+0x2d4>)
 800388e:	fba3 2301 	umull	r2, r3, r3, r1
 8003892:	095b      	lsrs	r3, r3, #5
 8003894:	2264      	movs	r2, #100	@ 0x64
 8003896:	fb02 f303 	mul.w	r3, r2, r3
 800389a:	1acb      	subs	r3, r1, r3
 800389c:	00db      	lsls	r3, r3, #3
 800389e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80038a2:	4b36      	ldr	r3, [pc, #216]	@ (800397c <UART_SetConfig+0x2d4>)
 80038a4:	fba3 2302 	umull	r2, r3, r3, r2
 80038a8:	095b      	lsrs	r3, r3, #5
 80038aa:	005b      	lsls	r3, r3, #1
 80038ac:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80038b0:	441c      	add	r4, r3
 80038b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038b6:	2200      	movs	r2, #0
 80038b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80038bc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80038c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80038c4:	4642      	mov	r2, r8
 80038c6:	464b      	mov	r3, r9
 80038c8:	1891      	adds	r1, r2, r2
 80038ca:	63b9      	str	r1, [r7, #56]	@ 0x38
 80038cc:	415b      	adcs	r3, r3
 80038ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80038d4:	4641      	mov	r1, r8
 80038d6:	1851      	adds	r1, r2, r1
 80038d8:	6339      	str	r1, [r7, #48]	@ 0x30
 80038da:	4649      	mov	r1, r9
 80038dc:	414b      	adcs	r3, r1
 80038de:	637b      	str	r3, [r7, #52]	@ 0x34
 80038e0:	f04f 0200 	mov.w	r2, #0
 80038e4:	f04f 0300 	mov.w	r3, #0
 80038e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80038ec:	4659      	mov	r1, fp
 80038ee:	00cb      	lsls	r3, r1, #3
 80038f0:	4651      	mov	r1, sl
 80038f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038f6:	4651      	mov	r1, sl
 80038f8:	00ca      	lsls	r2, r1, #3
 80038fa:	4610      	mov	r0, r2
 80038fc:	4619      	mov	r1, r3
 80038fe:	4603      	mov	r3, r0
 8003900:	4642      	mov	r2, r8
 8003902:	189b      	adds	r3, r3, r2
 8003904:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003908:	464b      	mov	r3, r9
 800390a:	460a      	mov	r2, r1
 800390c:	eb42 0303 	adc.w	r3, r2, r3
 8003910:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003920:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003924:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003928:	460b      	mov	r3, r1
 800392a:	18db      	adds	r3, r3, r3
 800392c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800392e:	4613      	mov	r3, r2
 8003930:	eb42 0303 	adc.w	r3, r2, r3
 8003934:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003936:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800393a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800393e:	f7fc fc9f 	bl	8000280 <__aeabi_uldivmod>
 8003942:	4602      	mov	r2, r0
 8003944:	460b      	mov	r3, r1
 8003946:	4b0d      	ldr	r3, [pc, #52]	@ (800397c <UART_SetConfig+0x2d4>)
 8003948:	fba3 1302 	umull	r1, r3, r3, r2
 800394c:	095b      	lsrs	r3, r3, #5
 800394e:	2164      	movs	r1, #100	@ 0x64
 8003950:	fb01 f303 	mul.w	r3, r1, r3
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	3332      	adds	r3, #50	@ 0x32
 800395a:	4a08      	ldr	r2, [pc, #32]	@ (800397c <UART_SetConfig+0x2d4>)
 800395c:	fba2 2303 	umull	r2, r3, r2, r3
 8003960:	095b      	lsrs	r3, r3, #5
 8003962:	f003 0207 	and.w	r2, r3, #7
 8003966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4422      	add	r2, r4
 800396e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003970:	e106      	b.n	8003b80 <UART_SetConfig+0x4d8>
 8003972:	bf00      	nop
 8003974:	40011000 	.word	0x40011000
 8003978:	40011400 	.word	0x40011400
 800397c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003980:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003984:	2200      	movs	r2, #0
 8003986:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800398a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800398e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003992:	4642      	mov	r2, r8
 8003994:	464b      	mov	r3, r9
 8003996:	1891      	adds	r1, r2, r2
 8003998:	6239      	str	r1, [r7, #32]
 800399a:	415b      	adcs	r3, r3
 800399c:	627b      	str	r3, [r7, #36]	@ 0x24
 800399e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80039a2:	4641      	mov	r1, r8
 80039a4:	1854      	adds	r4, r2, r1
 80039a6:	4649      	mov	r1, r9
 80039a8:	eb43 0501 	adc.w	r5, r3, r1
 80039ac:	f04f 0200 	mov.w	r2, #0
 80039b0:	f04f 0300 	mov.w	r3, #0
 80039b4:	00eb      	lsls	r3, r5, #3
 80039b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039ba:	00e2      	lsls	r2, r4, #3
 80039bc:	4614      	mov	r4, r2
 80039be:	461d      	mov	r5, r3
 80039c0:	4643      	mov	r3, r8
 80039c2:	18e3      	adds	r3, r4, r3
 80039c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80039c8:	464b      	mov	r3, r9
 80039ca:	eb45 0303 	adc.w	r3, r5, r3
 80039ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80039d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80039de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80039e2:	f04f 0200 	mov.w	r2, #0
 80039e6:	f04f 0300 	mov.w	r3, #0
 80039ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80039ee:	4629      	mov	r1, r5
 80039f0:	008b      	lsls	r3, r1, #2
 80039f2:	4621      	mov	r1, r4
 80039f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039f8:	4621      	mov	r1, r4
 80039fa:	008a      	lsls	r2, r1, #2
 80039fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003a00:	f7fc fc3e 	bl	8000280 <__aeabi_uldivmod>
 8003a04:	4602      	mov	r2, r0
 8003a06:	460b      	mov	r3, r1
 8003a08:	4b60      	ldr	r3, [pc, #384]	@ (8003b8c <UART_SetConfig+0x4e4>)
 8003a0a:	fba3 2302 	umull	r2, r3, r3, r2
 8003a0e:	095b      	lsrs	r3, r3, #5
 8003a10:	011c      	lsls	r4, r3, #4
 8003a12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a16:	2200      	movs	r2, #0
 8003a18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003a1c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003a20:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003a24:	4642      	mov	r2, r8
 8003a26:	464b      	mov	r3, r9
 8003a28:	1891      	adds	r1, r2, r2
 8003a2a:	61b9      	str	r1, [r7, #24]
 8003a2c:	415b      	adcs	r3, r3
 8003a2e:	61fb      	str	r3, [r7, #28]
 8003a30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a34:	4641      	mov	r1, r8
 8003a36:	1851      	adds	r1, r2, r1
 8003a38:	6139      	str	r1, [r7, #16]
 8003a3a:	4649      	mov	r1, r9
 8003a3c:	414b      	adcs	r3, r1
 8003a3e:	617b      	str	r3, [r7, #20]
 8003a40:	f04f 0200 	mov.w	r2, #0
 8003a44:	f04f 0300 	mov.w	r3, #0
 8003a48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a4c:	4659      	mov	r1, fp
 8003a4e:	00cb      	lsls	r3, r1, #3
 8003a50:	4651      	mov	r1, sl
 8003a52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a56:	4651      	mov	r1, sl
 8003a58:	00ca      	lsls	r2, r1, #3
 8003a5a:	4610      	mov	r0, r2
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	4603      	mov	r3, r0
 8003a60:	4642      	mov	r2, r8
 8003a62:	189b      	adds	r3, r3, r2
 8003a64:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003a68:	464b      	mov	r3, r9
 8003a6a:	460a      	mov	r2, r1
 8003a6c:	eb42 0303 	adc.w	r3, r2, r3
 8003a70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003a7e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003a80:	f04f 0200 	mov.w	r2, #0
 8003a84:	f04f 0300 	mov.w	r3, #0
 8003a88:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003a8c:	4649      	mov	r1, r9
 8003a8e:	008b      	lsls	r3, r1, #2
 8003a90:	4641      	mov	r1, r8
 8003a92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a96:	4641      	mov	r1, r8
 8003a98:	008a      	lsls	r2, r1, #2
 8003a9a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003a9e:	f7fc fbef 	bl	8000280 <__aeabi_uldivmod>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	4611      	mov	r1, r2
 8003aa8:	4b38      	ldr	r3, [pc, #224]	@ (8003b8c <UART_SetConfig+0x4e4>)
 8003aaa:	fba3 2301 	umull	r2, r3, r3, r1
 8003aae:	095b      	lsrs	r3, r3, #5
 8003ab0:	2264      	movs	r2, #100	@ 0x64
 8003ab2:	fb02 f303 	mul.w	r3, r2, r3
 8003ab6:	1acb      	subs	r3, r1, r3
 8003ab8:	011b      	lsls	r3, r3, #4
 8003aba:	3332      	adds	r3, #50	@ 0x32
 8003abc:	4a33      	ldr	r2, [pc, #204]	@ (8003b8c <UART_SetConfig+0x4e4>)
 8003abe:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac2:	095b      	lsrs	r3, r3, #5
 8003ac4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ac8:	441c      	add	r4, r3
 8003aca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ace:	2200      	movs	r2, #0
 8003ad0:	673b      	str	r3, [r7, #112]	@ 0x70
 8003ad2:	677a      	str	r2, [r7, #116]	@ 0x74
 8003ad4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003ad8:	4642      	mov	r2, r8
 8003ada:	464b      	mov	r3, r9
 8003adc:	1891      	adds	r1, r2, r2
 8003ade:	60b9      	str	r1, [r7, #8]
 8003ae0:	415b      	adcs	r3, r3
 8003ae2:	60fb      	str	r3, [r7, #12]
 8003ae4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ae8:	4641      	mov	r1, r8
 8003aea:	1851      	adds	r1, r2, r1
 8003aec:	6039      	str	r1, [r7, #0]
 8003aee:	4649      	mov	r1, r9
 8003af0:	414b      	adcs	r3, r1
 8003af2:	607b      	str	r3, [r7, #4]
 8003af4:	f04f 0200 	mov.w	r2, #0
 8003af8:	f04f 0300 	mov.w	r3, #0
 8003afc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003b00:	4659      	mov	r1, fp
 8003b02:	00cb      	lsls	r3, r1, #3
 8003b04:	4651      	mov	r1, sl
 8003b06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b0a:	4651      	mov	r1, sl
 8003b0c:	00ca      	lsls	r2, r1, #3
 8003b0e:	4610      	mov	r0, r2
 8003b10:	4619      	mov	r1, r3
 8003b12:	4603      	mov	r3, r0
 8003b14:	4642      	mov	r2, r8
 8003b16:	189b      	adds	r3, r3, r2
 8003b18:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b1a:	464b      	mov	r3, r9
 8003b1c:	460a      	mov	r2, r1
 8003b1e:	eb42 0303 	adc.w	r3, r2, r3
 8003b22:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b2e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003b30:	f04f 0200 	mov.w	r2, #0
 8003b34:	f04f 0300 	mov.w	r3, #0
 8003b38:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003b3c:	4649      	mov	r1, r9
 8003b3e:	008b      	lsls	r3, r1, #2
 8003b40:	4641      	mov	r1, r8
 8003b42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b46:	4641      	mov	r1, r8
 8003b48:	008a      	lsls	r2, r1, #2
 8003b4a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003b4e:	f7fc fb97 	bl	8000280 <__aeabi_uldivmod>
 8003b52:	4602      	mov	r2, r0
 8003b54:	460b      	mov	r3, r1
 8003b56:	4b0d      	ldr	r3, [pc, #52]	@ (8003b8c <UART_SetConfig+0x4e4>)
 8003b58:	fba3 1302 	umull	r1, r3, r3, r2
 8003b5c:	095b      	lsrs	r3, r3, #5
 8003b5e:	2164      	movs	r1, #100	@ 0x64
 8003b60:	fb01 f303 	mul.w	r3, r1, r3
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	011b      	lsls	r3, r3, #4
 8003b68:	3332      	adds	r3, #50	@ 0x32
 8003b6a:	4a08      	ldr	r2, [pc, #32]	@ (8003b8c <UART_SetConfig+0x4e4>)
 8003b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b70:	095b      	lsrs	r3, r3, #5
 8003b72:	f003 020f 	and.w	r2, r3, #15
 8003b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4422      	add	r2, r4
 8003b7e:	609a      	str	r2, [r3, #8]
}
 8003b80:	bf00      	nop
 8003b82:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003b86:	46bd      	mov	sp, r7
 8003b88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b8c:	51eb851f 	.word	0x51eb851f

08003b90 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f103 0208 	add.w	r2, r3, #8
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ba8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f103 0208 	add.w	r2, r3, #8
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f103 0208 	add.w	r2, r3, #8
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003bde:	bf00      	nop
 8003be0:	370c      	adds	r7, #12
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr

08003bea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003bea:	b480      	push	{r7}
 8003bec:	b085      	sub	sp, #20
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
 8003bf2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	689a      	ldr	r2, [r3, #8]
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	683a      	ldr	r2, [r7, #0]
 8003c0e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	683a      	ldr	r2, [r7, #0]
 8003c14:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	1c5a      	adds	r2, r3, #1
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	601a      	str	r2, [r3, #0]
}
 8003c26:	bf00      	nop
 8003c28:	3714      	adds	r7, #20
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr

08003c32 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c32:	b480      	push	{r7}
 8003c34:	b085      	sub	sp, #20
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
 8003c3a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c48:	d103      	bne.n	8003c52 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	60fb      	str	r3, [r7, #12]
 8003c50:	e00c      	b.n	8003c6c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	3308      	adds	r3, #8
 8003c56:	60fb      	str	r3, [r7, #12]
 8003c58:	e002      	b.n	8003c60 <vListInsert+0x2e>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	60fb      	str	r3, [r7, #12]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68ba      	ldr	r2, [r7, #8]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d2f6      	bcs.n	8003c5a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	685a      	ldr	r2, [r3, #4]
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	683a      	ldr	r2, [r7, #0]
 8003c7a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	1c5a      	adds	r2, r3, #1
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	601a      	str	r2, [r3, #0]
}
 8003c98:	bf00      	nop
 8003c9a:	3714      	adds	r7, #20
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	6892      	ldr	r2, [r2, #8]
 8003cba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	6852      	ldr	r2, [r2, #4]
 8003cc4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d103      	bne.n	8003cd8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689a      	ldr	r2, [r3, #8]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	1e5a      	subs	r2, r3, #1
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3714      	adds	r7, #20
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d10b      	bne.n	8003d24 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003d0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d10:	f383 8811 	msr	BASEPRI, r3
 8003d14:	f3bf 8f6f 	isb	sy
 8003d18:	f3bf 8f4f 	dsb	sy
 8003d1c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003d1e:	bf00      	nop
 8003d20:	bf00      	nop
 8003d22:	e7fd      	b.n	8003d20 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003d24:	f001 ff80 	bl	8005c28 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d30:	68f9      	ldr	r1, [r7, #12]
 8003d32:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003d34:	fb01 f303 	mul.w	r3, r1, r3
 8003d38:	441a      	add	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2200      	movs	r2, #0
 8003d42:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d54:	3b01      	subs	r3, #1
 8003d56:	68f9      	ldr	r1, [r7, #12]
 8003d58:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003d5a:	fb01 f303 	mul.w	r3, r1, r3
 8003d5e:	441a      	add	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	22ff      	movs	r2, #255	@ 0xff
 8003d68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	22ff      	movs	r2, #255	@ 0xff
 8003d70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d114      	bne.n	8003da4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d01a      	beq.n	8003db8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	3310      	adds	r3, #16
 8003d86:	4618      	mov	r0, r3
 8003d88:	f001 f856 	bl	8004e38 <xTaskRemoveFromEventList>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d012      	beq.n	8003db8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003d92:	4b0d      	ldr	r3, [pc, #52]	@ (8003dc8 <xQueueGenericReset+0xd0>)
 8003d94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d98:	601a      	str	r2, [r3, #0]
 8003d9a:	f3bf 8f4f 	dsb	sy
 8003d9e:	f3bf 8f6f 	isb	sy
 8003da2:	e009      	b.n	8003db8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	3310      	adds	r3, #16
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7ff fef1 	bl	8003b90 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	3324      	adds	r3, #36	@ 0x24
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7ff feec 	bl	8003b90 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003db8:	f001 ff68 	bl	8005c8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003dbc:	2301      	movs	r3, #1
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	e000ed04 	.word	0xe000ed04

08003dcc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b08a      	sub	sp, #40	@ 0x28
 8003dd0:	af02      	add	r7, sp, #8
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d10b      	bne.n	8003df8 <xQueueGenericCreate+0x2c>
	__asm volatile
 8003de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003de4:	f383 8811 	msr	BASEPRI, r3
 8003de8:	f3bf 8f6f 	isb	sy
 8003dec:	f3bf 8f4f 	dsb	sy
 8003df0:	613b      	str	r3, [r7, #16]
}
 8003df2:	bf00      	nop
 8003df4:	bf00      	nop
 8003df6:	e7fd      	b.n	8003df4 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d102      	bne.n	8003e04 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	61fb      	str	r3, [r7, #28]
 8003e02:	e004      	b.n	8003e0e <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	68ba      	ldr	r2, [r7, #8]
 8003e08:	fb02 f303 	mul.w	r3, r2, r3
 8003e0c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	3350      	adds	r3, #80	@ 0x50
 8003e12:	4618      	mov	r0, r3
 8003e14:	f002 f82a 	bl	8005e6c <pvPortMalloc>
 8003e18:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d00d      	beq.n	8003e3c <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	3350      	adds	r3, #80	@ 0x50
 8003e28:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003e2a:	79fa      	ldrb	r2, [r7, #7]
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	9300      	str	r3, [sp, #0]
 8003e30:	4613      	mov	r3, r2
 8003e32:	697a      	ldr	r2, [r7, #20]
 8003e34:	68b9      	ldr	r1, [r7, #8]
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	f000 f805 	bl	8003e46 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003e3c:	69bb      	ldr	r3, [r7, #24]
	}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3720      	adds	r7, #32
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b084      	sub	sp, #16
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	60f8      	str	r0, [r7, #12]
 8003e4e:	60b9      	str	r1, [r7, #8]
 8003e50:	607a      	str	r2, [r7, #4]
 8003e52:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d103      	bne.n	8003e62 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	69ba      	ldr	r2, [r7, #24]
 8003e5e:	601a      	str	r2, [r3, #0]
 8003e60:	e002      	b.n	8003e68 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	68ba      	ldr	r2, [r7, #8]
 8003e72:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003e74:	2101      	movs	r1, #1
 8003e76:	69b8      	ldr	r0, [r7, #24]
 8003e78:	f7ff ff3e 	bl	8003cf8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	78fa      	ldrb	r2, [r7, #3]
 8003e80:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003e84:	bf00      	nop
 8003e86:	3710      	adds	r7, #16
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b08e      	sub	sp, #56	@ 0x38
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
 8003e98:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d10b      	bne.n	8003ec0 <xQueueGenericSend+0x34>
	__asm volatile
 8003ea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eac:	f383 8811 	msr	BASEPRI, r3
 8003eb0:	f3bf 8f6f 	isb	sy
 8003eb4:	f3bf 8f4f 	dsb	sy
 8003eb8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003eba:	bf00      	nop
 8003ebc:	bf00      	nop
 8003ebe:	e7fd      	b.n	8003ebc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d103      	bne.n	8003ece <xQueueGenericSend+0x42>
 8003ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <xQueueGenericSend+0x46>
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e000      	b.n	8003ed4 <xQueueGenericSend+0x48>
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d10b      	bne.n	8003ef0 <xQueueGenericSend+0x64>
	__asm volatile
 8003ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003edc:	f383 8811 	msr	BASEPRI, r3
 8003ee0:	f3bf 8f6f 	isb	sy
 8003ee4:	f3bf 8f4f 	dsb	sy
 8003ee8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003eea:	bf00      	nop
 8003eec:	bf00      	nop
 8003eee:	e7fd      	b.n	8003eec <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d103      	bne.n	8003efe <xQueueGenericSend+0x72>
 8003ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ef8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d101      	bne.n	8003f02 <xQueueGenericSend+0x76>
 8003efe:	2301      	movs	r3, #1
 8003f00:	e000      	b.n	8003f04 <xQueueGenericSend+0x78>
 8003f02:	2300      	movs	r3, #0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d10b      	bne.n	8003f20 <xQueueGenericSend+0x94>
	__asm volatile
 8003f08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f0c:	f383 8811 	msr	BASEPRI, r3
 8003f10:	f3bf 8f6f 	isb	sy
 8003f14:	f3bf 8f4f 	dsb	sy
 8003f18:	623b      	str	r3, [r7, #32]
}
 8003f1a:	bf00      	nop
 8003f1c:	bf00      	nop
 8003f1e:	e7fd      	b.n	8003f1c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f20:	f001 f92a 	bl	8005178 <xTaskGetSchedulerState>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d102      	bne.n	8003f30 <xQueueGenericSend+0xa4>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d101      	bne.n	8003f34 <xQueueGenericSend+0xa8>
 8003f30:	2301      	movs	r3, #1
 8003f32:	e000      	b.n	8003f36 <xQueueGenericSend+0xaa>
 8003f34:	2300      	movs	r3, #0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d10b      	bne.n	8003f52 <xQueueGenericSend+0xc6>
	__asm volatile
 8003f3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f3e:	f383 8811 	msr	BASEPRI, r3
 8003f42:	f3bf 8f6f 	isb	sy
 8003f46:	f3bf 8f4f 	dsb	sy
 8003f4a:	61fb      	str	r3, [r7, #28]
}
 8003f4c:	bf00      	nop
 8003f4e:	bf00      	nop
 8003f50:	e7fd      	b.n	8003f4e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003f52:	f001 fe69 	bl	8005c28 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d302      	bcc.n	8003f68 <xQueueGenericSend+0xdc>
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d129      	bne.n	8003fbc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003f68:	683a      	ldr	r2, [r7, #0]
 8003f6a:	68b9      	ldr	r1, [r7, #8]
 8003f6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003f6e:	f000 fa0d 	bl	800438c <prvCopyDataToQueue>
 8003f72:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d010      	beq.n	8003f9e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f7e:	3324      	adds	r3, #36	@ 0x24
 8003f80:	4618      	mov	r0, r3
 8003f82:	f000 ff59 	bl	8004e38 <xTaskRemoveFromEventList>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d013      	beq.n	8003fb4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003f8c:	4b3f      	ldr	r3, [pc, #252]	@ (800408c <xQueueGenericSend+0x200>)
 8003f8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f92:	601a      	str	r2, [r3, #0]
 8003f94:	f3bf 8f4f 	dsb	sy
 8003f98:	f3bf 8f6f 	isb	sy
 8003f9c:	e00a      	b.n	8003fb4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003f9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d007      	beq.n	8003fb4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003fa4:	4b39      	ldr	r3, [pc, #228]	@ (800408c <xQueueGenericSend+0x200>)
 8003fa6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003faa:	601a      	str	r2, [r3, #0]
 8003fac:	f3bf 8f4f 	dsb	sy
 8003fb0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003fb4:	f001 fe6a 	bl	8005c8c <vPortExitCritical>
				return pdPASS;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e063      	b.n	8004084 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d103      	bne.n	8003fca <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003fc2:	f001 fe63 	bl	8005c8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	e05c      	b.n	8004084 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003fca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d106      	bne.n	8003fde <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003fd0:	f107 0314 	add.w	r3, r7, #20
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f000 ff93 	bl	8004f00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003fde:	f001 fe55 	bl	8005c8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003fe2:	f000 fd05 	bl	80049f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003fe6:	f001 fe1f 	bl	8005c28 <vPortEnterCritical>
 8003fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003ff0:	b25b      	sxtb	r3, r3
 8003ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff6:	d103      	bne.n	8004000 <xQueueGenericSend+0x174>
 8003ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004002:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004006:	b25b      	sxtb	r3, r3
 8004008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800400c:	d103      	bne.n	8004016 <xQueueGenericSend+0x18a>
 800400e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004010:	2200      	movs	r2, #0
 8004012:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004016:	f001 fe39 	bl	8005c8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800401a:	1d3a      	adds	r2, r7, #4
 800401c:	f107 0314 	add.w	r3, r7, #20
 8004020:	4611      	mov	r1, r2
 8004022:	4618      	mov	r0, r3
 8004024:	f000 ff82 	bl	8004f2c <xTaskCheckForTimeOut>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d124      	bne.n	8004078 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800402e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004030:	f000 faa4 	bl	800457c <prvIsQueueFull>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d018      	beq.n	800406c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800403a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800403c:	3310      	adds	r3, #16
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	4611      	mov	r1, r2
 8004042:	4618      	mov	r0, r3
 8004044:	f000 fea6 	bl	8004d94 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004048:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800404a:	f000 fa2f 	bl	80044ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800404e:	f000 fcdd 	bl	8004a0c <xTaskResumeAll>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	f47f af7c 	bne.w	8003f52 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800405a:	4b0c      	ldr	r3, [pc, #48]	@ (800408c <xQueueGenericSend+0x200>)
 800405c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004060:	601a      	str	r2, [r3, #0]
 8004062:	f3bf 8f4f 	dsb	sy
 8004066:	f3bf 8f6f 	isb	sy
 800406a:	e772      	b.n	8003f52 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800406c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800406e:	f000 fa1d 	bl	80044ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004072:	f000 fccb 	bl	8004a0c <xTaskResumeAll>
 8004076:	e76c      	b.n	8003f52 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004078:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800407a:	f000 fa17 	bl	80044ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800407e:	f000 fcc5 	bl	8004a0c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004082:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004084:	4618      	mov	r0, r3
 8004086:	3738      	adds	r7, #56	@ 0x38
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	e000ed04 	.word	0xe000ed04

08004090 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b08e      	sub	sp, #56	@ 0x38
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
 800409c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80040a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d10b      	bne.n	80040c0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80040a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040ac:	f383 8811 	msr	BASEPRI, r3
 80040b0:	f3bf 8f6f 	isb	sy
 80040b4:	f3bf 8f4f 	dsb	sy
 80040b8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80040ba:	bf00      	nop
 80040bc:	bf00      	nop
 80040be:	e7fd      	b.n	80040bc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d103      	bne.n	80040ce <xQueueGenericSendFromISR+0x3e>
 80040c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <xQueueGenericSendFromISR+0x42>
 80040ce:	2301      	movs	r3, #1
 80040d0:	e000      	b.n	80040d4 <xQueueGenericSendFromISR+0x44>
 80040d2:	2300      	movs	r3, #0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d10b      	bne.n	80040f0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80040d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040dc:	f383 8811 	msr	BASEPRI, r3
 80040e0:	f3bf 8f6f 	isb	sy
 80040e4:	f3bf 8f4f 	dsb	sy
 80040e8:	623b      	str	r3, [r7, #32]
}
 80040ea:	bf00      	nop
 80040ec:	bf00      	nop
 80040ee:	e7fd      	b.n	80040ec <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d103      	bne.n	80040fe <xQueueGenericSendFromISR+0x6e>
 80040f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d101      	bne.n	8004102 <xQueueGenericSendFromISR+0x72>
 80040fe:	2301      	movs	r3, #1
 8004100:	e000      	b.n	8004104 <xQueueGenericSendFromISR+0x74>
 8004102:	2300      	movs	r3, #0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d10b      	bne.n	8004120 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800410c:	f383 8811 	msr	BASEPRI, r3
 8004110:	f3bf 8f6f 	isb	sy
 8004114:	f3bf 8f4f 	dsb	sy
 8004118:	61fb      	str	r3, [r7, #28]
}
 800411a:	bf00      	nop
 800411c:	bf00      	nop
 800411e:	e7fd      	b.n	800411c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004120:	f001 fe62 	bl	8005de8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004124:	f3ef 8211 	mrs	r2, BASEPRI
 8004128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800412c:	f383 8811 	msr	BASEPRI, r3
 8004130:	f3bf 8f6f 	isb	sy
 8004134:	f3bf 8f4f 	dsb	sy
 8004138:	61ba      	str	r2, [r7, #24]
 800413a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800413c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800413e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004142:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004146:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004148:	429a      	cmp	r2, r3
 800414a:	d302      	bcc.n	8004152 <xQueueGenericSendFromISR+0xc2>
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	2b02      	cmp	r3, #2
 8004150:	d12c      	bne.n	80041ac <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004154:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004158:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800415c:	683a      	ldr	r2, [r7, #0]
 800415e:	68b9      	ldr	r1, [r7, #8]
 8004160:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004162:	f000 f913 	bl	800438c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004166:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800416a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800416e:	d112      	bne.n	8004196 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004174:	2b00      	cmp	r3, #0
 8004176:	d016      	beq.n	80041a6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800417a:	3324      	adds	r3, #36	@ 0x24
 800417c:	4618      	mov	r0, r3
 800417e:	f000 fe5b 	bl	8004e38 <xTaskRemoveFromEventList>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d00e      	beq.n	80041a6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00b      	beq.n	80041a6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2201      	movs	r2, #1
 8004192:	601a      	str	r2, [r3, #0]
 8004194:	e007      	b.n	80041a6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004196:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800419a:	3301      	adds	r3, #1
 800419c:	b2db      	uxtb	r3, r3
 800419e:	b25a      	sxtb	r2, r3
 80041a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80041a6:	2301      	movs	r3, #1
 80041a8:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80041aa:	e001      	b.n	80041b0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80041ac:	2300      	movs	r3, #0
 80041ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80041b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041b2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80041ba:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80041bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3738      	adds	r7, #56	@ 0x38
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
	...

080041c8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b08c      	sub	sp, #48	@ 0x30
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80041d4:	2300      	movs	r3, #0
 80041d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80041dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10b      	bne.n	80041fa <xQueueReceive+0x32>
	__asm volatile
 80041e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041e6:	f383 8811 	msr	BASEPRI, r3
 80041ea:	f3bf 8f6f 	isb	sy
 80041ee:	f3bf 8f4f 	dsb	sy
 80041f2:	623b      	str	r3, [r7, #32]
}
 80041f4:	bf00      	nop
 80041f6:	bf00      	nop
 80041f8:	e7fd      	b.n	80041f6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d103      	bne.n	8004208 <xQueueReceive+0x40>
 8004200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004204:	2b00      	cmp	r3, #0
 8004206:	d101      	bne.n	800420c <xQueueReceive+0x44>
 8004208:	2301      	movs	r3, #1
 800420a:	e000      	b.n	800420e <xQueueReceive+0x46>
 800420c:	2300      	movs	r3, #0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10b      	bne.n	800422a <xQueueReceive+0x62>
	__asm volatile
 8004212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004216:	f383 8811 	msr	BASEPRI, r3
 800421a:	f3bf 8f6f 	isb	sy
 800421e:	f3bf 8f4f 	dsb	sy
 8004222:	61fb      	str	r3, [r7, #28]
}
 8004224:	bf00      	nop
 8004226:	bf00      	nop
 8004228:	e7fd      	b.n	8004226 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800422a:	f000 ffa5 	bl	8005178 <xTaskGetSchedulerState>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d102      	bne.n	800423a <xQueueReceive+0x72>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d101      	bne.n	800423e <xQueueReceive+0x76>
 800423a:	2301      	movs	r3, #1
 800423c:	e000      	b.n	8004240 <xQueueReceive+0x78>
 800423e:	2300      	movs	r3, #0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d10b      	bne.n	800425c <xQueueReceive+0x94>
	__asm volatile
 8004244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004248:	f383 8811 	msr	BASEPRI, r3
 800424c:	f3bf 8f6f 	isb	sy
 8004250:	f3bf 8f4f 	dsb	sy
 8004254:	61bb      	str	r3, [r7, #24]
}
 8004256:	bf00      	nop
 8004258:	bf00      	nop
 800425a:	e7fd      	b.n	8004258 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800425c:	f001 fce4 	bl	8005c28 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004264:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004268:	2b00      	cmp	r3, #0
 800426a:	d01f      	beq.n	80042ac <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800426c:	68b9      	ldr	r1, [r7, #8]
 800426e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004270:	f000 f8f6 	bl	8004460 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004276:	1e5a      	subs	r2, r3, #1
 8004278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800427a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800427c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00f      	beq.n	80042a4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004286:	3310      	adds	r3, #16
 8004288:	4618      	mov	r0, r3
 800428a:	f000 fdd5 	bl	8004e38 <xTaskRemoveFromEventList>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d007      	beq.n	80042a4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004294:	4b3c      	ldr	r3, [pc, #240]	@ (8004388 <xQueueReceive+0x1c0>)
 8004296:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800429a:	601a      	str	r2, [r3, #0]
 800429c:	f3bf 8f4f 	dsb	sy
 80042a0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80042a4:	f001 fcf2 	bl	8005c8c <vPortExitCritical>
				return pdPASS;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e069      	b.n	8004380 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d103      	bne.n	80042ba <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80042b2:	f001 fceb 	bl	8005c8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80042b6:	2300      	movs	r3, #0
 80042b8:	e062      	b.n	8004380 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80042ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d106      	bne.n	80042ce <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80042c0:	f107 0310 	add.w	r3, r7, #16
 80042c4:	4618      	mov	r0, r3
 80042c6:	f000 fe1b 	bl	8004f00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80042ca:	2301      	movs	r3, #1
 80042cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80042ce:	f001 fcdd 	bl	8005c8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80042d2:	f000 fb8d 	bl	80049f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80042d6:	f001 fca7 	bl	8005c28 <vPortEnterCritical>
 80042da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80042e0:	b25b      	sxtb	r3, r3
 80042e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e6:	d103      	bne.n	80042f0 <xQueueReceive+0x128>
 80042e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80042f6:	b25b      	sxtb	r3, r3
 80042f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042fc:	d103      	bne.n	8004306 <xQueueReceive+0x13e>
 80042fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004300:	2200      	movs	r2, #0
 8004302:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004306:	f001 fcc1 	bl	8005c8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800430a:	1d3a      	adds	r2, r7, #4
 800430c:	f107 0310 	add.w	r3, r7, #16
 8004310:	4611      	mov	r1, r2
 8004312:	4618      	mov	r0, r3
 8004314:	f000 fe0a 	bl	8004f2c <xTaskCheckForTimeOut>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d123      	bne.n	8004366 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800431e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004320:	f000 f916 	bl	8004550 <prvIsQueueEmpty>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d017      	beq.n	800435a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800432a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800432c:	3324      	adds	r3, #36	@ 0x24
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	4611      	mov	r1, r2
 8004332:	4618      	mov	r0, r3
 8004334:	f000 fd2e 	bl	8004d94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004338:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800433a:	f000 f8b7 	bl	80044ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800433e:	f000 fb65 	bl	8004a0c <xTaskResumeAll>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d189      	bne.n	800425c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004348:	4b0f      	ldr	r3, [pc, #60]	@ (8004388 <xQueueReceive+0x1c0>)
 800434a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800434e:	601a      	str	r2, [r3, #0]
 8004350:	f3bf 8f4f 	dsb	sy
 8004354:	f3bf 8f6f 	isb	sy
 8004358:	e780      	b.n	800425c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800435a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800435c:	f000 f8a6 	bl	80044ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004360:	f000 fb54 	bl	8004a0c <xTaskResumeAll>
 8004364:	e77a      	b.n	800425c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004366:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004368:	f000 f8a0 	bl	80044ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800436c:	f000 fb4e 	bl	8004a0c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004370:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004372:	f000 f8ed 	bl	8004550 <prvIsQueueEmpty>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	f43f af6f 	beq.w	800425c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800437e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004380:	4618      	mov	r0, r3
 8004382:	3730      	adds	r7, #48	@ 0x30
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	e000ed04 	.word	0xe000ed04

0800438c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b086      	sub	sp, #24
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004398:	2300      	movs	r3, #0
 800439a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043a0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d10d      	bne.n	80043c6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d14d      	bne.n	800444e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	4618      	mov	r0, r3
 80043b8:	f000 fefc 	bl	80051b4 <xTaskPriorityDisinherit>
 80043bc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	609a      	str	r2, [r3, #8]
 80043c4:	e043      	b.n	800444e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d119      	bne.n	8004400 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6858      	ldr	r0, [r3, #4]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d4:	461a      	mov	r2, r3
 80043d6:	68b9      	ldr	r1, [r7, #8]
 80043d8:	f001 ff7c 	bl	80062d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	685a      	ldr	r2, [r3, #4]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e4:	441a      	add	r2, r3
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d32b      	bcc.n	800444e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	605a      	str	r2, [r3, #4]
 80043fe:	e026      	b.n	800444e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	68d8      	ldr	r0, [r3, #12]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004408:	461a      	mov	r2, r3
 800440a:	68b9      	ldr	r1, [r7, #8]
 800440c:	f001 ff62 	bl	80062d4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	68da      	ldr	r2, [r3, #12]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004418:	425b      	negs	r3, r3
 800441a:	441a      	add	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	68da      	ldr	r2, [r3, #12]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	429a      	cmp	r2, r3
 800442a:	d207      	bcs.n	800443c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	689a      	ldr	r2, [r3, #8]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004434:	425b      	negs	r3, r3
 8004436:	441a      	add	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2b02      	cmp	r3, #2
 8004440:	d105      	bne.n	800444e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d002      	beq.n	800444e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	3b01      	subs	r3, #1
 800444c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	1c5a      	adds	r2, r3, #1
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004456:	697b      	ldr	r3, [r7, #20]
}
 8004458:	4618      	mov	r0, r3
 800445a:	3718      	adds	r7, #24
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800446e:	2b00      	cmp	r3, #0
 8004470:	d018      	beq.n	80044a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	68da      	ldr	r2, [r3, #12]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800447a:	441a      	add	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	68da      	ldr	r2, [r3, #12]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	429a      	cmp	r2, r3
 800448a:	d303      	bcc.n	8004494 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	68d9      	ldr	r1, [r3, #12]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800449c:	461a      	mov	r2, r3
 800449e:	6838      	ldr	r0, [r7, #0]
 80044a0:	f001 ff18 	bl	80062d4 <memcpy>
	}
}
 80044a4:	bf00      	nop
 80044a6:	3708      	adds	r7, #8
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80044b4:	f001 fbb8 	bl	8005c28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80044be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80044c0:	e011      	b.n	80044e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d012      	beq.n	80044f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	3324      	adds	r3, #36	@ 0x24
 80044ce:	4618      	mov	r0, r3
 80044d0:	f000 fcb2 	bl	8004e38 <xTaskRemoveFromEventList>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d001      	beq.n	80044de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80044da:	f000 fd8b 	bl	8004ff4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80044de:	7bfb      	ldrb	r3, [r7, #15]
 80044e0:	3b01      	subs	r3, #1
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80044e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	dce9      	bgt.n	80044c2 <prvUnlockQueue+0x16>
 80044ee:	e000      	b.n	80044f2 <prvUnlockQueue+0x46>
					break;
 80044f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	22ff      	movs	r2, #255	@ 0xff
 80044f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80044fa:	f001 fbc7 	bl	8005c8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80044fe:	f001 fb93 	bl	8005c28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004508:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800450a:	e011      	b.n	8004530 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d012      	beq.n	800453a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	3310      	adds	r3, #16
 8004518:	4618      	mov	r0, r3
 800451a:	f000 fc8d 	bl	8004e38 <xTaskRemoveFromEventList>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d001      	beq.n	8004528 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004524:	f000 fd66 	bl	8004ff4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004528:	7bbb      	ldrb	r3, [r7, #14]
 800452a:	3b01      	subs	r3, #1
 800452c:	b2db      	uxtb	r3, r3
 800452e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004530:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004534:	2b00      	cmp	r3, #0
 8004536:	dce9      	bgt.n	800450c <prvUnlockQueue+0x60>
 8004538:	e000      	b.n	800453c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800453a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	22ff      	movs	r2, #255	@ 0xff
 8004540:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004544:	f001 fba2 	bl	8005c8c <vPortExitCritical>
}
 8004548:	bf00      	nop
 800454a:	3710      	adds	r7, #16
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004558:	f001 fb66 	bl	8005c28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004560:	2b00      	cmp	r3, #0
 8004562:	d102      	bne.n	800456a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004564:	2301      	movs	r3, #1
 8004566:	60fb      	str	r3, [r7, #12]
 8004568:	e001      	b.n	800456e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800456a:	2300      	movs	r3, #0
 800456c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800456e:	f001 fb8d 	bl	8005c8c <vPortExitCritical>

	return xReturn;
 8004572:	68fb      	ldr	r3, [r7, #12]
}
 8004574:	4618      	mov	r0, r3
 8004576:	3710      	adds	r7, #16
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004584:	f001 fb50 	bl	8005c28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004590:	429a      	cmp	r2, r3
 8004592:	d102      	bne.n	800459a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004594:	2301      	movs	r3, #1
 8004596:	60fb      	str	r3, [r7, #12]
 8004598:	e001      	b.n	800459e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800459a:	2300      	movs	r3, #0
 800459c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800459e:	f001 fb75 	bl	8005c8c <vPortExitCritical>

	return xReturn;
 80045a2:	68fb      	ldr	r3, [r7, #12]
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3710      	adds	r7, #16
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80045b6:	2300      	movs	r3, #0
 80045b8:	60fb      	str	r3, [r7, #12]
 80045ba:	e014      	b.n	80045e6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80045bc:	4a0f      	ldr	r2, [pc, #60]	@ (80045fc <vQueueAddToRegistry+0x50>)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d10b      	bne.n	80045e0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80045c8:	490c      	ldr	r1, [pc, #48]	@ (80045fc <vQueueAddToRegistry+0x50>)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	683a      	ldr	r2, [r7, #0]
 80045ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80045d2:	4a0a      	ldr	r2, [pc, #40]	@ (80045fc <vQueueAddToRegistry+0x50>)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	00db      	lsls	r3, r3, #3
 80045d8:	4413      	add	r3, r2
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80045de:	e006      	b.n	80045ee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	3301      	adds	r3, #1
 80045e4:	60fb      	str	r3, [r7, #12]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2b07      	cmp	r3, #7
 80045ea:	d9e7      	bls.n	80045bc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80045ec:	bf00      	nop
 80045ee:	bf00      	nop
 80045f0:	3714      	adds	r7, #20
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	200001e8 	.word	0x200001e8

08004600 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004600:	b580      	push	{r7, lr}
 8004602:	b086      	sub	sp, #24
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004610:	f001 fb0a 	bl	8005c28 <vPortEnterCritical>
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800461a:	b25b      	sxtb	r3, r3
 800461c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004620:	d103      	bne.n	800462a <vQueueWaitForMessageRestricted+0x2a>
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004630:	b25b      	sxtb	r3, r3
 8004632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004636:	d103      	bne.n	8004640 <vQueueWaitForMessageRestricted+0x40>
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004640:	f001 fb24 	bl	8005c8c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004648:	2b00      	cmp	r3, #0
 800464a:	d106      	bne.n	800465a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	3324      	adds	r3, #36	@ 0x24
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	68b9      	ldr	r1, [r7, #8]
 8004654:	4618      	mov	r0, r3
 8004656:	f000 fbc3 	bl	8004de0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800465a:	6978      	ldr	r0, [r7, #20]
 800465c:	f7ff ff26 	bl	80044ac <prvUnlockQueue>
	}
 8004660:	bf00      	nop
 8004662:	3718      	adds	r7, #24
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004668:	b580      	push	{r7, lr}
 800466a:	b08c      	sub	sp, #48	@ 0x30
 800466c:	af04      	add	r7, sp, #16
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	603b      	str	r3, [r7, #0]
 8004674:	4613      	mov	r3, r2
 8004676:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004678:	88fb      	ldrh	r3, [r7, #6]
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	4618      	mov	r0, r3
 800467e:	f001 fbf5 	bl	8005e6c <pvPortMalloc>
 8004682:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00e      	beq.n	80046a8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800468a:	2058      	movs	r0, #88	@ 0x58
 800468c:	f001 fbee 	bl	8005e6c <pvPortMalloc>
 8004690:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d003      	beq.n	80046a0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	697a      	ldr	r2, [r7, #20]
 800469c:	631a      	str	r2, [r3, #48]	@ 0x30
 800469e:	e005      	b.n	80046ac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80046a0:	6978      	ldr	r0, [r7, #20]
 80046a2:	f001 fcab 	bl	8005ffc <vPortFree>
 80046a6:	e001      	b.n	80046ac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80046a8:	2300      	movs	r3, #0
 80046aa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d013      	beq.n	80046da <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80046b2:	88fa      	ldrh	r2, [r7, #6]
 80046b4:	2300      	movs	r3, #0
 80046b6:	9303      	str	r3, [sp, #12]
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	9302      	str	r3, [sp, #8]
 80046bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046be:	9301      	str	r3, [sp, #4]
 80046c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046c2:	9300      	str	r3, [sp, #0]
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	68b9      	ldr	r1, [r7, #8]
 80046c8:	68f8      	ldr	r0, [r7, #12]
 80046ca:	f000 f80e 	bl	80046ea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80046ce:	69f8      	ldr	r0, [r7, #28]
 80046d0:	f000 f89c 	bl	800480c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80046d4:	2301      	movs	r3, #1
 80046d6:	61bb      	str	r3, [r7, #24]
 80046d8:	e002      	b.n	80046e0 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80046da:	f04f 33ff 	mov.w	r3, #4294967295
 80046de:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80046e0:	69bb      	ldr	r3, [r7, #24]
	}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3720      	adds	r7, #32
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b088      	sub	sp, #32
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	60f8      	str	r0, [r7, #12]
 80046f2:	60b9      	str	r1, [r7, #8]
 80046f4:	607a      	str	r2, [r7, #4]
 80046f6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80046f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046fa:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	461a      	mov	r2, r3
 8004702:	21a5      	movs	r1, #165	@ 0xa5
 8004704:	f001 fdb2 	bl	800626c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800470a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004712:	3b01      	subs	r3, #1
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	4413      	add	r3, r2
 8004718:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	f023 0307 	bic.w	r3, r3, #7
 8004720:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	f003 0307 	and.w	r3, r3, #7
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00b      	beq.n	8004744 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800472c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004730:	f383 8811 	msr	BASEPRI, r3
 8004734:	f3bf 8f6f 	isb	sy
 8004738:	f3bf 8f4f 	dsb	sy
 800473c:	617b      	str	r3, [r7, #20]
}
 800473e:	bf00      	nop
 8004740:	bf00      	nop
 8004742:	e7fd      	b.n	8004740 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d01f      	beq.n	800478a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800474a:	2300      	movs	r3, #0
 800474c:	61fb      	str	r3, [r7, #28]
 800474e:	e012      	b.n	8004776 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004750:	68ba      	ldr	r2, [r7, #8]
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	4413      	add	r3, r2
 8004756:	7819      	ldrb	r1, [r3, #0]
 8004758:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	4413      	add	r3, r2
 800475e:	3334      	adds	r3, #52	@ 0x34
 8004760:	460a      	mov	r2, r1
 8004762:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004764:	68ba      	ldr	r2, [r7, #8]
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	4413      	add	r3, r2
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d006      	beq.n	800477e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	3301      	adds	r3, #1
 8004774:	61fb      	str	r3, [r7, #28]
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	2b09      	cmp	r3, #9
 800477a:	d9e9      	bls.n	8004750 <prvInitialiseNewTask+0x66>
 800477c:	e000      	b.n	8004780 <prvInitialiseNewTask+0x96>
			{
				break;
 800477e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004782:	2200      	movs	r2, #0
 8004784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004788:	e003      	b.n	8004792 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800478a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004794:	2b04      	cmp	r3, #4
 8004796:	d901      	bls.n	800479c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004798:	2304      	movs	r3, #4
 800479a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800479c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800479e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80047a0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80047a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80047a6:	649a      	str	r2, [r3, #72]	@ 0x48
		pxNewTCB->uxMutexesHeld = 0;
 80047a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047aa:	2200      	movs	r2, #0
 80047ac:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80047ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047b0:	3304      	adds	r3, #4
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7ff fa0c 	bl	8003bd0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80047b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ba:	3318      	adds	r3, #24
 80047bc:	4618      	mov	r0, r3
 80047be:	f7ff fa07 	bl	8003bd0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80047c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047c6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ca:	f1c3 0205 	rsb	r2, r3, #5
 80047ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047d0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80047d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047d6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80047d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047da:	2200      	movs	r2, #0
 80047dc:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80047de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80047e6:	683a      	ldr	r2, [r7, #0]
 80047e8:	68f9      	ldr	r1, [r7, #12]
 80047ea:	69b8      	ldr	r0, [r7, #24]
 80047ec:	f001 f8ee 	bl	80059cc <pxPortInitialiseStack>
 80047f0:	4602      	mov	r2, r0
 80047f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047f4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80047f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d002      	beq.n	8004802 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80047fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004800:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004802:	bf00      	nop
 8004804:	3720      	adds	r7, #32
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
	...

0800480c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004814:	f001 fa08 	bl	8005c28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004818:	4b2c      	ldr	r3, [pc, #176]	@ (80048cc <prvAddNewTaskToReadyList+0xc0>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	3301      	adds	r3, #1
 800481e:	4a2b      	ldr	r2, [pc, #172]	@ (80048cc <prvAddNewTaskToReadyList+0xc0>)
 8004820:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004822:	4b2b      	ldr	r3, [pc, #172]	@ (80048d0 <prvAddNewTaskToReadyList+0xc4>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d109      	bne.n	800483e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800482a:	4a29      	ldr	r2, [pc, #164]	@ (80048d0 <prvAddNewTaskToReadyList+0xc4>)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004830:	4b26      	ldr	r3, [pc, #152]	@ (80048cc <prvAddNewTaskToReadyList+0xc0>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d110      	bne.n	800485a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004838:	f000 fc00 	bl	800503c <prvInitialiseTaskLists>
 800483c:	e00d      	b.n	800485a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800483e:	4b25      	ldr	r3, [pc, #148]	@ (80048d4 <prvAddNewTaskToReadyList+0xc8>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d109      	bne.n	800485a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004846:	4b22      	ldr	r3, [pc, #136]	@ (80048d0 <prvAddNewTaskToReadyList+0xc4>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004850:	429a      	cmp	r2, r3
 8004852:	d802      	bhi.n	800485a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004854:	4a1e      	ldr	r2, [pc, #120]	@ (80048d0 <prvAddNewTaskToReadyList+0xc4>)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800485a:	4b1f      	ldr	r3, [pc, #124]	@ (80048d8 <prvAddNewTaskToReadyList+0xcc>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	3301      	adds	r3, #1
 8004860:	4a1d      	ldr	r2, [pc, #116]	@ (80048d8 <prvAddNewTaskToReadyList+0xcc>)
 8004862:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004864:	4b1c      	ldr	r3, [pc, #112]	@ (80048d8 <prvAddNewTaskToReadyList+0xcc>)
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	641a      	str	r2, [r3, #64]	@ 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004870:	2201      	movs	r2, #1
 8004872:	409a      	lsls	r2, r3
 8004874:	4b19      	ldr	r3, [pc, #100]	@ (80048dc <prvAddNewTaskToReadyList+0xd0>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4313      	orrs	r3, r2
 800487a:	4a18      	ldr	r2, [pc, #96]	@ (80048dc <prvAddNewTaskToReadyList+0xd0>)
 800487c:	6013      	str	r3, [r2, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004882:	4613      	mov	r3, r2
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	4413      	add	r3, r2
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	4a15      	ldr	r2, [pc, #84]	@ (80048e0 <prvAddNewTaskToReadyList+0xd4>)
 800488c:	441a      	add	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	3304      	adds	r3, #4
 8004892:	4619      	mov	r1, r3
 8004894:	4610      	mov	r0, r2
 8004896:	f7ff f9a8 	bl	8003bea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800489a:	f001 f9f7 	bl	8005c8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800489e:	4b0d      	ldr	r3, [pc, #52]	@ (80048d4 <prvAddNewTaskToReadyList+0xc8>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00e      	beq.n	80048c4 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80048a6:	4b0a      	ldr	r3, [pc, #40]	@ (80048d0 <prvAddNewTaskToReadyList+0xc4>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d207      	bcs.n	80048c4 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80048b4:	4b0b      	ldr	r3, [pc, #44]	@ (80048e4 <prvAddNewTaskToReadyList+0xd8>)
 80048b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048ba:	601a      	str	r2, [r3, #0]
 80048bc:	f3bf 8f4f 	dsb	sy
 80048c0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048c4:	bf00      	nop
 80048c6:	3708      	adds	r7, #8
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	20000300 	.word	0x20000300
 80048d0:	20000228 	.word	0x20000228
 80048d4:	2000030c 	.word	0x2000030c
 80048d8:	2000031c 	.word	0x2000031c
 80048dc:	20000308 	.word	0x20000308
 80048e0:	2000022c 	.word	0x2000022c
 80048e4:	e000ed04 	.word	0xe000ed04

080048e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80048f0:	2300      	movs	r3, #0
 80048f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d018      	beq.n	800492c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80048fa:	4b14      	ldr	r3, [pc, #80]	@ (800494c <vTaskDelay+0x64>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00b      	beq.n	800491a <vTaskDelay+0x32>
	__asm volatile
 8004902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004906:	f383 8811 	msr	BASEPRI, r3
 800490a:	f3bf 8f6f 	isb	sy
 800490e:	f3bf 8f4f 	dsb	sy
 8004912:	60bb      	str	r3, [r7, #8]
}
 8004914:	bf00      	nop
 8004916:	bf00      	nop
 8004918:	e7fd      	b.n	8004916 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800491a:	f000 f869 	bl	80049f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800491e:	2100      	movs	r1, #0
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f000 fccf 	bl	80052c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004926:	f000 f871 	bl	8004a0c <xTaskResumeAll>
 800492a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d107      	bne.n	8004942 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004932:	4b07      	ldr	r3, [pc, #28]	@ (8004950 <vTaskDelay+0x68>)
 8004934:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004938:	601a      	str	r2, [r3, #0]
 800493a:	f3bf 8f4f 	dsb	sy
 800493e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004942:	bf00      	nop
 8004944:	3710      	adds	r7, #16
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	20000328 	.word	0x20000328
 8004950:	e000ed04 	.word	0xe000ed04

08004954 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b086      	sub	sp, #24
 8004958:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800495a:	4b1f      	ldr	r3, [pc, #124]	@ (80049d8 <vTaskStartScheduler+0x84>)
 800495c:	9301      	str	r3, [sp, #4]
 800495e:	2300      	movs	r3, #0
 8004960:	9300      	str	r3, [sp, #0]
 8004962:	2300      	movs	r3, #0
 8004964:	2282      	movs	r2, #130	@ 0x82
 8004966:	491d      	ldr	r1, [pc, #116]	@ (80049dc <vTaskStartScheduler+0x88>)
 8004968:	481d      	ldr	r0, [pc, #116]	@ (80049e0 <vTaskStartScheduler+0x8c>)
 800496a:	f7ff fe7d 	bl	8004668 <xTaskCreate>
 800496e:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d102      	bne.n	800497c <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8004976:	f000 fd0b 	bl	8005390 <xTimerCreateTimerTask>
 800497a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2b01      	cmp	r3, #1
 8004980:	d116      	bne.n	80049b0 <vTaskStartScheduler+0x5c>
	__asm volatile
 8004982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004986:	f383 8811 	msr	BASEPRI, r3
 800498a:	f3bf 8f6f 	isb	sy
 800498e:	f3bf 8f4f 	dsb	sy
 8004992:	60bb      	str	r3, [r7, #8]
}
 8004994:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004996:	4b13      	ldr	r3, [pc, #76]	@ (80049e4 <vTaskStartScheduler+0x90>)
 8004998:	f04f 32ff 	mov.w	r2, #4294967295
 800499c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800499e:	4b12      	ldr	r3, [pc, #72]	@ (80049e8 <vTaskStartScheduler+0x94>)
 80049a0:	2201      	movs	r2, #1
 80049a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80049a4:	4b11      	ldr	r3, [pc, #68]	@ (80049ec <vTaskStartScheduler+0x98>)
 80049a6:	2200      	movs	r2, #0
 80049a8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80049aa:	f001 f899 	bl	8005ae0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80049ae:	e00f      	b.n	80049d0 <vTaskStartScheduler+0x7c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b6:	d10b      	bne.n	80049d0 <vTaskStartScheduler+0x7c>
	__asm volatile
 80049b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049bc:	f383 8811 	msr	BASEPRI, r3
 80049c0:	f3bf 8f6f 	isb	sy
 80049c4:	f3bf 8f4f 	dsb	sy
 80049c8:	607b      	str	r3, [r7, #4]
}
 80049ca:	bf00      	nop
 80049cc:	bf00      	nop
 80049ce:	e7fd      	b.n	80049cc <vTaskStartScheduler+0x78>
}
 80049d0:	bf00      	nop
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	20000324 	.word	0x20000324
 80049dc:	08006c5c 	.word	0x08006c5c
 80049e0:	0800500d 	.word	0x0800500d
 80049e4:	20000320 	.word	0x20000320
 80049e8:	2000030c 	.word	0x2000030c
 80049ec:	20000304 	.word	0x20000304

080049f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80049f0:	b480      	push	{r7}
 80049f2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80049f4:	4b04      	ldr	r3, [pc, #16]	@ (8004a08 <vTaskSuspendAll+0x18>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	3301      	adds	r3, #1
 80049fa:	4a03      	ldr	r2, [pc, #12]	@ (8004a08 <vTaskSuspendAll+0x18>)
 80049fc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80049fe:	bf00      	nop
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr
 8004a08:	20000328 	.word	0x20000328

08004a0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004a12:	2300      	movs	r3, #0
 8004a14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004a16:	2300      	movs	r3, #0
 8004a18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004a1a:	4b42      	ldr	r3, [pc, #264]	@ (8004b24 <xTaskResumeAll+0x118>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d10b      	bne.n	8004a3a <xTaskResumeAll+0x2e>
	__asm volatile
 8004a22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a26:	f383 8811 	msr	BASEPRI, r3
 8004a2a:	f3bf 8f6f 	isb	sy
 8004a2e:	f3bf 8f4f 	dsb	sy
 8004a32:	603b      	str	r3, [r7, #0]
}
 8004a34:	bf00      	nop
 8004a36:	bf00      	nop
 8004a38:	e7fd      	b.n	8004a36 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004a3a:	f001 f8f5 	bl	8005c28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004a3e:	4b39      	ldr	r3, [pc, #228]	@ (8004b24 <xTaskResumeAll+0x118>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	3b01      	subs	r3, #1
 8004a44:	4a37      	ldr	r2, [pc, #220]	@ (8004b24 <xTaskResumeAll+0x118>)
 8004a46:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a48:	4b36      	ldr	r3, [pc, #216]	@ (8004b24 <xTaskResumeAll+0x118>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d161      	bne.n	8004b14 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004a50:	4b35      	ldr	r3, [pc, #212]	@ (8004b28 <xTaskResumeAll+0x11c>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d05d      	beq.n	8004b14 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a58:	e02e      	b.n	8004ab8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a5a:	4b34      	ldr	r3, [pc, #208]	@ (8004b2c <xTaskResumeAll+0x120>)
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	3318      	adds	r3, #24
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7ff f91c 	bl	8003ca4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	3304      	adds	r3, #4
 8004a70:	4618      	mov	r0, r3
 8004a72:	f7ff f917 	bl	8003ca4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	409a      	lsls	r2, r3
 8004a7e:	4b2c      	ldr	r3, [pc, #176]	@ (8004b30 <xTaskResumeAll+0x124>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	4a2a      	ldr	r2, [pc, #168]	@ (8004b30 <xTaskResumeAll+0x124>)
 8004a86:	6013      	str	r3, [r2, #0]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	4413      	add	r3, r2
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	4a27      	ldr	r2, [pc, #156]	@ (8004b34 <xTaskResumeAll+0x128>)
 8004a96:	441a      	add	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	3304      	adds	r3, #4
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	4610      	mov	r0, r2
 8004aa0:	f7ff f8a3 	bl	8003bea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004aa8:	4b23      	ldr	r3, [pc, #140]	@ (8004b38 <xTaskResumeAll+0x12c>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d302      	bcc.n	8004ab8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004ab2:	4b22      	ldr	r3, [pc, #136]	@ (8004b3c <xTaskResumeAll+0x130>)
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ab8:	4b1c      	ldr	r3, [pc, #112]	@ (8004b2c <xTaskResumeAll+0x120>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1cc      	bne.n	8004a5a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d001      	beq.n	8004aca <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004ac6:	f000 fb37 	bl	8005138 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004aca:	4b1d      	ldr	r3, [pc, #116]	@ (8004b40 <xTaskResumeAll+0x134>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d010      	beq.n	8004af8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004ad6:	f000 f847 	bl	8004b68 <xTaskIncrementTick>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d002      	beq.n	8004ae6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004ae0:	4b16      	ldr	r3, [pc, #88]	@ (8004b3c <xTaskResumeAll+0x130>)
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1f1      	bne.n	8004ad6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8004af2:	4b13      	ldr	r3, [pc, #76]	@ (8004b40 <xTaskResumeAll+0x134>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004af8:	4b10      	ldr	r3, [pc, #64]	@ (8004b3c <xTaskResumeAll+0x130>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d009      	beq.n	8004b14 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004b00:	2301      	movs	r3, #1
 8004b02:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004b04:	4b0f      	ldr	r3, [pc, #60]	@ (8004b44 <xTaskResumeAll+0x138>)
 8004b06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b0a:	601a      	str	r2, [r3, #0]
 8004b0c:	f3bf 8f4f 	dsb	sy
 8004b10:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b14:	f001 f8ba 	bl	8005c8c <vPortExitCritical>

	return xAlreadyYielded;
 8004b18:	68bb      	ldr	r3, [r7, #8]
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	20000328 	.word	0x20000328
 8004b28:	20000300 	.word	0x20000300
 8004b2c:	200002c0 	.word	0x200002c0
 8004b30:	20000308 	.word	0x20000308
 8004b34:	2000022c 	.word	0x2000022c
 8004b38:	20000228 	.word	0x20000228
 8004b3c:	20000314 	.word	0x20000314
 8004b40:	20000310 	.word	0x20000310
 8004b44:	e000ed04 	.word	0xe000ed04

08004b48 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004b4e:	4b05      	ldr	r3, [pc, #20]	@ (8004b64 <xTaskGetTickCount+0x1c>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004b54:	687b      	ldr	r3, [r7, #4]
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	370c      	adds	r7, #12
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	20000304 	.word	0x20000304

08004b68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b086      	sub	sp, #24
 8004b6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b72:	4b4f      	ldr	r3, [pc, #316]	@ (8004cb0 <xTaskIncrementTick+0x148>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	f040 8089 	bne.w	8004c8e <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004b7c:	4b4d      	ldr	r3, [pc, #308]	@ (8004cb4 <xTaskIncrementTick+0x14c>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	3301      	adds	r3, #1
 8004b82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004b84:	4a4b      	ldr	r2, [pc, #300]	@ (8004cb4 <xTaskIncrementTick+0x14c>)
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d121      	bne.n	8004bd4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004b90:	4b49      	ldr	r3, [pc, #292]	@ (8004cb8 <xTaskIncrementTick+0x150>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00b      	beq.n	8004bb2 <xTaskIncrementTick+0x4a>
	__asm volatile
 8004b9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b9e:	f383 8811 	msr	BASEPRI, r3
 8004ba2:	f3bf 8f6f 	isb	sy
 8004ba6:	f3bf 8f4f 	dsb	sy
 8004baa:	603b      	str	r3, [r7, #0]
}
 8004bac:	bf00      	nop
 8004bae:	bf00      	nop
 8004bb0:	e7fd      	b.n	8004bae <xTaskIncrementTick+0x46>
 8004bb2:	4b41      	ldr	r3, [pc, #260]	@ (8004cb8 <xTaskIncrementTick+0x150>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	60fb      	str	r3, [r7, #12]
 8004bb8:	4b40      	ldr	r3, [pc, #256]	@ (8004cbc <xTaskIncrementTick+0x154>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a3e      	ldr	r2, [pc, #248]	@ (8004cb8 <xTaskIncrementTick+0x150>)
 8004bbe:	6013      	str	r3, [r2, #0]
 8004bc0:	4a3e      	ldr	r2, [pc, #248]	@ (8004cbc <xTaskIncrementTick+0x154>)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6013      	str	r3, [r2, #0]
 8004bc6:	4b3e      	ldr	r3, [pc, #248]	@ (8004cc0 <xTaskIncrementTick+0x158>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	3301      	adds	r3, #1
 8004bcc:	4a3c      	ldr	r2, [pc, #240]	@ (8004cc0 <xTaskIncrementTick+0x158>)
 8004bce:	6013      	str	r3, [r2, #0]
 8004bd0:	f000 fab2 	bl	8005138 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004bd4:	4b3b      	ldr	r3, [pc, #236]	@ (8004cc4 <xTaskIncrementTick+0x15c>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d348      	bcc.n	8004c70 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bde:	4b36      	ldr	r3, [pc, #216]	@ (8004cb8 <xTaskIncrementTick+0x150>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d104      	bne.n	8004bf2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004be8:	4b36      	ldr	r3, [pc, #216]	@ (8004cc4 <xTaskIncrementTick+0x15c>)
 8004bea:	f04f 32ff 	mov.w	r2, #4294967295
 8004bee:	601a      	str	r2, [r3, #0]
					break;
 8004bf0:	e03e      	b.n	8004c70 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bf2:	4b31      	ldr	r3, [pc, #196]	@ (8004cb8 <xTaskIncrementTick+0x150>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d203      	bcs.n	8004c12 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004c0a:	4a2e      	ldr	r2, [pc, #184]	@ (8004cc4 <xTaskIncrementTick+0x15c>)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004c10:	e02e      	b.n	8004c70 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	3304      	adds	r3, #4
 8004c16:	4618      	mov	r0, r3
 8004c18:	f7ff f844 	bl	8003ca4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d004      	beq.n	8004c2e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	3318      	adds	r3, #24
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f7ff f83b 	bl	8003ca4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c32:	2201      	movs	r2, #1
 8004c34:	409a      	lsls	r2, r3
 8004c36:	4b24      	ldr	r3, [pc, #144]	@ (8004cc8 <xTaskIncrementTick+0x160>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	4a22      	ldr	r2, [pc, #136]	@ (8004cc8 <xTaskIncrementTick+0x160>)
 8004c3e:	6013      	str	r3, [r2, #0]
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c44:	4613      	mov	r3, r2
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	4413      	add	r3, r2
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	4a1f      	ldr	r2, [pc, #124]	@ (8004ccc <xTaskIncrementTick+0x164>)
 8004c4e:	441a      	add	r2, r3
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	3304      	adds	r3, #4
 8004c54:	4619      	mov	r1, r3
 8004c56:	4610      	mov	r0, r2
 8004c58:	f7fe ffc7 	bl	8003bea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c60:	4b1b      	ldr	r3, [pc, #108]	@ (8004cd0 <xTaskIncrementTick+0x168>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d3b9      	bcc.n	8004bde <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c6e:	e7b6      	b.n	8004bde <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004c70:	4b17      	ldr	r3, [pc, #92]	@ (8004cd0 <xTaskIncrementTick+0x168>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c76:	4915      	ldr	r1, [pc, #84]	@ (8004ccc <xTaskIncrementTick+0x164>)
 8004c78:	4613      	mov	r3, r2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	4413      	add	r3, r2
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	440b      	add	r3, r1
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d907      	bls.n	8004c98 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	617b      	str	r3, [r7, #20]
 8004c8c:	e004      	b.n	8004c98 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004c8e:	4b11      	ldr	r3, [pc, #68]	@ (8004cd4 <xTaskIncrementTick+0x16c>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	3301      	adds	r3, #1
 8004c94:	4a0f      	ldr	r2, [pc, #60]	@ (8004cd4 <xTaskIncrementTick+0x16c>)
 8004c96:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004c98:	4b0f      	ldr	r3, [pc, #60]	@ (8004cd8 <xTaskIncrementTick+0x170>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d001      	beq.n	8004ca4 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004ca4:	697b      	ldr	r3, [r7, #20]
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3718      	adds	r7, #24
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	20000328 	.word	0x20000328
 8004cb4:	20000304 	.word	0x20000304
 8004cb8:	200002b8 	.word	0x200002b8
 8004cbc:	200002bc 	.word	0x200002bc
 8004cc0:	20000318 	.word	0x20000318
 8004cc4:	20000320 	.word	0x20000320
 8004cc8:	20000308 	.word	0x20000308
 8004ccc:	2000022c 	.word	0x2000022c
 8004cd0:	20000228 	.word	0x20000228
 8004cd4:	20000310 	.word	0x20000310
 8004cd8:	20000314 	.word	0x20000314

08004cdc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b087      	sub	sp, #28
 8004ce0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004ce2:	4b27      	ldr	r3, [pc, #156]	@ (8004d80 <vTaskSwitchContext+0xa4>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d003      	beq.n	8004cf2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004cea:	4b26      	ldr	r3, [pc, #152]	@ (8004d84 <vTaskSwitchContext+0xa8>)
 8004cec:	2201      	movs	r2, #1
 8004cee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004cf0:	e040      	b.n	8004d74 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004cf2:	4b24      	ldr	r3, [pc, #144]	@ (8004d84 <vTaskSwitchContext+0xa8>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cf8:	4b23      	ldr	r3, [pc, #140]	@ (8004d88 <vTaskSwitchContext+0xac>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	fab3 f383 	clz	r3, r3
 8004d04:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004d06:	7afb      	ldrb	r3, [r7, #11]
 8004d08:	f1c3 031f 	rsb	r3, r3, #31
 8004d0c:	617b      	str	r3, [r7, #20]
 8004d0e:	491f      	ldr	r1, [pc, #124]	@ (8004d8c <vTaskSwitchContext+0xb0>)
 8004d10:	697a      	ldr	r2, [r7, #20]
 8004d12:	4613      	mov	r3, r2
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	4413      	add	r3, r2
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	440b      	add	r3, r1
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d10b      	bne.n	8004d3a <vTaskSwitchContext+0x5e>
	__asm volatile
 8004d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d26:	f383 8811 	msr	BASEPRI, r3
 8004d2a:	f3bf 8f6f 	isb	sy
 8004d2e:	f3bf 8f4f 	dsb	sy
 8004d32:	607b      	str	r3, [r7, #4]
}
 8004d34:	bf00      	nop
 8004d36:	bf00      	nop
 8004d38:	e7fd      	b.n	8004d36 <vTaskSwitchContext+0x5a>
 8004d3a:	697a      	ldr	r2, [r7, #20]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4413      	add	r3, r2
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	4a11      	ldr	r2, [pc, #68]	@ (8004d8c <vTaskSwitchContext+0xb0>)
 8004d46:	4413      	add	r3, r2
 8004d48:	613b      	str	r3, [r7, #16]
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	685a      	ldr	r2, [r3, #4]
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	605a      	str	r2, [r3, #4]
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	685a      	ldr	r2, [r3, #4]
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	3308      	adds	r3, #8
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d104      	bne.n	8004d6a <vTaskSwitchContext+0x8e>
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	685a      	ldr	r2, [r3, #4]
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	605a      	str	r2, [r3, #4]
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	4a07      	ldr	r2, [pc, #28]	@ (8004d90 <vTaskSwitchContext+0xb4>)
 8004d72:	6013      	str	r3, [r2, #0]
}
 8004d74:	bf00      	nop
 8004d76:	371c      	adds	r7, #28
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr
 8004d80:	20000328 	.word	0x20000328
 8004d84:	20000314 	.word	0x20000314
 8004d88:	20000308 	.word	0x20000308
 8004d8c:	2000022c 	.word	0x2000022c
 8004d90:	20000228 	.word	0x20000228

08004d94 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d10b      	bne.n	8004dbc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004da8:	f383 8811 	msr	BASEPRI, r3
 8004dac:	f3bf 8f6f 	isb	sy
 8004db0:	f3bf 8f4f 	dsb	sy
 8004db4:	60fb      	str	r3, [r7, #12]
}
 8004db6:	bf00      	nop
 8004db8:	bf00      	nop
 8004dba:	e7fd      	b.n	8004db8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004dbc:	4b07      	ldr	r3, [pc, #28]	@ (8004ddc <vTaskPlaceOnEventList+0x48>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	3318      	adds	r3, #24
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f7fe ff34 	bl	8003c32 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004dca:	2101      	movs	r1, #1
 8004dcc:	6838      	ldr	r0, [r7, #0]
 8004dce:	f000 fa79 	bl	80052c4 <prvAddCurrentTaskToDelayedList>
}
 8004dd2:	bf00      	nop
 8004dd4:	3710      	adds	r7, #16
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	20000228 	.word	0x20000228

08004de0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b086      	sub	sp, #24
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d10b      	bne.n	8004e0a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004df6:	f383 8811 	msr	BASEPRI, r3
 8004dfa:	f3bf 8f6f 	isb	sy
 8004dfe:	f3bf 8f4f 	dsb	sy
 8004e02:	617b      	str	r3, [r7, #20]
}
 8004e04:	bf00      	nop
 8004e06:	bf00      	nop
 8004e08:	e7fd      	b.n	8004e06 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8004e34 <vTaskPlaceOnEventListRestricted+0x54>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	3318      	adds	r3, #24
 8004e10:	4619      	mov	r1, r3
 8004e12:	68f8      	ldr	r0, [r7, #12]
 8004e14:	f7fe fee9 	bl	8003bea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d002      	beq.n	8004e24 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e22:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004e24:	6879      	ldr	r1, [r7, #4]
 8004e26:	68b8      	ldr	r0, [r7, #8]
 8004e28:	f000 fa4c 	bl	80052c4 <prvAddCurrentTaskToDelayedList>
	}
 8004e2c:	bf00      	nop
 8004e2e:	3718      	adds	r7, #24
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	20000228 	.word	0x20000228

08004e38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b086      	sub	sp, #24
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d10b      	bne.n	8004e66 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e52:	f383 8811 	msr	BASEPRI, r3
 8004e56:	f3bf 8f6f 	isb	sy
 8004e5a:	f3bf 8f4f 	dsb	sy
 8004e5e:	60fb      	str	r3, [r7, #12]
}
 8004e60:	bf00      	nop
 8004e62:	bf00      	nop
 8004e64:	e7fd      	b.n	8004e62 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	3318      	adds	r3, #24
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7fe ff1a 	bl	8003ca4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e70:	4b1d      	ldr	r3, [pc, #116]	@ (8004ee8 <xTaskRemoveFromEventList+0xb0>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d11c      	bne.n	8004eb2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	3304      	adds	r3, #4
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f7fe ff11 	bl	8003ca4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e86:	2201      	movs	r2, #1
 8004e88:	409a      	lsls	r2, r3
 8004e8a:	4b18      	ldr	r3, [pc, #96]	@ (8004eec <xTaskRemoveFromEventList+0xb4>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	4a16      	ldr	r2, [pc, #88]	@ (8004eec <xTaskRemoveFromEventList+0xb4>)
 8004e92:	6013      	str	r3, [r2, #0]
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e98:	4613      	mov	r3, r2
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	4413      	add	r3, r2
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	4a13      	ldr	r2, [pc, #76]	@ (8004ef0 <xTaskRemoveFromEventList+0xb8>)
 8004ea2:	441a      	add	r2, r3
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	3304      	adds	r3, #4
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	4610      	mov	r0, r2
 8004eac:	f7fe fe9d 	bl	8003bea <vListInsertEnd>
 8004eb0:	e005      	b.n	8004ebe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	3318      	adds	r3, #24
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	480e      	ldr	r0, [pc, #56]	@ (8004ef4 <xTaskRemoveFromEventList+0xbc>)
 8004eba:	f7fe fe96 	bl	8003bea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8004ef8 <xTaskRemoveFromEventList+0xc0>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d905      	bls.n	8004ed8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8004efc <xTaskRemoveFromEventList+0xc4>)
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	601a      	str	r2, [r3, #0]
 8004ed6:	e001      	b.n	8004edc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004edc:	697b      	ldr	r3, [r7, #20]
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3718      	adds	r7, #24
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	20000328 	.word	0x20000328
 8004eec:	20000308 	.word	0x20000308
 8004ef0:	2000022c 	.word	0x2000022c
 8004ef4:	200002c0 	.word	0x200002c0
 8004ef8:	20000228 	.word	0x20000228
 8004efc:	20000314 	.word	0x20000314

08004f00 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004f08:	4b06      	ldr	r3, [pc, #24]	@ (8004f24 <vTaskInternalSetTimeOutState+0x24>)
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004f10:	4b05      	ldr	r3, [pc, #20]	@ (8004f28 <vTaskInternalSetTimeOutState+0x28>)
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	605a      	str	r2, [r3, #4]
}
 8004f18:	bf00      	nop
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr
 8004f24:	20000318 	.word	0x20000318
 8004f28:	20000304 	.word	0x20000304

08004f2c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b088      	sub	sp, #32
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d10b      	bne.n	8004f54 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004f3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f40:	f383 8811 	msr	BASEPRI, r3
 8004f44:	f3bf 8f6f 	isb	sy
 8004f48:	f3bf 8f4f 	dsb	sy
 8004f4c:	613b      	str	r3, [r7, #16]
}
 8004f4e:	bf00      	nop
 8004f50:	bf00      	nop
 8004f52:	e7fd      	b.n	8004f50 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d10b      	bne.n	8004f72 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004f5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f5e:	f383 8811 	msr	BASEPRI, r3
 8004f62:	f3bf 8f6f 	isb	sy
 8004f66:	f3bf 8f4f 	dsb	sy
 8004f6a:	60fb      	str	r3, [r7, #12]
}
 8004f6c:	bf00      	nop
 8004f6e:	bf00      	nop
 8004f70:	e7fd      	b.n	8004f6e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004f72:	f000 fe59 	bl	8005c28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004f76:	4b1d      	ldr	r3, [pc, #116]	@ (8004fec <xTaskCheckForTimeOut+0xc0>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	69ba      	ldr	r2, [r7, #24]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f8e:	d102      	bne.n	8004f96 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004f90:	2300      	movs	r3, #0
 8004f92:	61fb      	str	r3, [r7, #28]
 8004f94:	e023      	b.n	8004fde <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	4b15      	ldr	r3, [pc, #84]	@ (8004ff0 <xTaskCheckForTimeOut+0xc4>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d007      	beq.n	8004fb2 <xTaskCheckForTimeOut+0x86>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	69ba      	ldr	r2, [r7, #24]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d302      	bcc.n	8004fb2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004fac:	2301      	movs	r3, #1
 8004fae:	61fb      	str	r3, [r7, #28]
 8004fb0:	e015      	b.n	8004fde <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d20b      	bcs.n	8004fd4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	1ad2      	subs	r2, r2, r3
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f7ff ff99 	bl	8004f00 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	61fb      	str	r3, [r7, #28]
 8004fd2:	e004      	b.n	8004fde <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004fde:	f000 fe55 	bl	8005c8c <vPortExitCritical>

	return xReturn;
 8004fe2:	69fb      	ldr	r3, [r7, #28]
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3720      	adds	r7, #32
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	20000304 	.word	0x20000304
 8004ff0:	20000318 	.word	0x20000318

08004ff4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004ff8:	4b03      	ldr	r3, [pc, #12]	@ (8005008 <vTaskMissedYield+0x14>)
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	601a      	str	r2, [r3, #0]
}
 8004ffe:	bf00      	nop
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr
 8005008:	20000314 	.word	0x20000314

0800500c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005014:	f000 f852 	bl	80050bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005018:	4b06      	ldr	r3, [pc, #24]	@ (8005034 <prvIdleTask+0x28>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2b01      	cmp	r3, #1
 800501e:	d9f9      	bls.n	8005014 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005020:	4b05      	ldr	r3, [pc, #20]	@ (8005038 <prvIdleTask+0x2c>)
 8005022:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005026:	601a      	str	r2, [r3, #0]
 8005028:	f3bf 8f4f 	dsb	sy
 800502c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005030:	e7f0      	b.n	8005014 <prvIdleTask+0x8>
 8005032:	bf00      	nop
 8005034:	2000022c 	.word	0x2000022c
 8005038:	e000ed04 	.word	0xe000ed04

0800503c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005042:	2300      	movs	r3, #0
 8005044:	607b      	str	r3, [r7, #4]
 8005046:	e00c      	b.n	8005062 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	4613      	mov	r3, r2
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	4413      	add	r3, r2
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	4a12      	ldr	r2, [pc, #72]	@ (800509c <prvInitialiseTaskLists+0x60>)
 8005054:	4413      	add	r3, r2
 8005056:	4618      	mov	r0, r3
 8005058:	f7fe fd9a 	bl	8003b90 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	3301      	adds	r3, #1
 8005060:	607b      	str	r3, [r7, #4]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2b04      	cmp	r3, #4
 8005066:	d9ef      	bls.n	8005048 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005068:	480d      	ldr	r0, [pc, #52]	@ (80050a0 <prvInitialiseTaskLists+0x64>)
 800506a:	f7fe fd91 	bl	8003b90 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800506e:	480d      	ldr	r0, [pc, #52]	@ (80050a4 <prvInitialiseTaskLists+0x68>)
 8005070:	f7fe fd8e 	bl	8003b90 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005074:	480c      	ldr	r0, [pc, #48]	@ (80050a8 <prvInitialiseTaskLists+0x6c>)
 8005076:	f7fe fd8b 	bl	8003b90 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800507a:	480c      	ldr	r0, [pc, #48]	@ (80050ac <prvInitialiseTaskLists+0x70>)
 800507c:	f7fe fd88 	bl	8003b90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005080:	480b      	ldr	r0, [pc, #44]	@ (80050b0 <prvInitialiseTaskLists+0x74>)
 8005082:	f7fe fd85 	bl	8003b90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005086:	4b0b      	ldr	r3, [pc, #44]	@ (80050b4 <prvInitialiseTaskLists+0x78>)
 8005088:	4a05      	ldr	r2, [pc, #20]	@ (80050a0 <prvInitialiseTaskLists+0x64>)
 800508a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800508c:	4b0a      	ldr	r3, [pc, #40]	@ (80050b8 <prvInitialiseTaskLists+0x7c>)
 800508e:	4a05      	ldr	r2, [pc, #20]	@ (80050a4 <prvInitialiseTaskLists+0x68>)
 8005090:	601a      	str	r2, [r3, #0]
}
 8005092:	bf00      	nop
 8005094:	3708      	adds	r7, #8
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	2000022c 	.word	0x2000022c
 80050a0:	20000290 	.word	0x20000290
 80050a4:	200002a4 	.word	0x200002a4
 80050a8:	200002c0 	.word	0x200002c0
 80050ac:	200002d4 	.word	0x200002d4
 80050b0:	200002ec 	.word	0x200002ec
 80050b4:	200002b8 	.word	0x200002b8
 80050b8:	200002bc 	.word	0x200002bc

080050bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80050c2:	e019      	b.n	80050f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80050c4:	f000 fdb0 	bl	8005c28 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050c8:	4b10      	ldr	r3, [pc, #64]	@ (800510c <prvCheckTasksWaitingTermination+0x50>)
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	3304      	adds	r3, #4
 80050d4:	4618      	mov	r0, r3
 80050d6:	f7fe fde5 	bl	8003ca4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80050da:	4b0d      	ldr	r3, [pc, #52]	@ (8005110 <prvCheckTasksWaitingTermination+0x54>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	3b01      	subs	r3, #1
 80050e0:	4a0b      	ldr	r2, [pc, #44]	@ (8005110 <prvCheckTasksWaitingTermination+0x54>)
 80050e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80050e4:	4b0b      	ldr	r3, [pc, #44]	@ (8005114 <prvCheckTasksWaitingTermination+0x58>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	3b01      	subs	r3, #1
 80050ea:	4a0a      	ldr	r2, [pc, #40]	@ (8005114 <prvCheckTasksWaitingTermination+0x58>)
 80050ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80050ee:	f000 fdcd 	bl	8005c8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 f810 	bl	8005118 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80050f8:	4b06      	ldr	r3, [pc, #24]	@ (8005114 <prvCheckTasksWaitingTermination+0x58>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d1e1      	bne.n	80050c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005100:	bf00      	nop
 8005102:	bf00      	nop
 8005104:	3708      	adds	r7, #8
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	200002d4 	.word	0x200002d4
 8005110:	20000300 	.word	0x20000300
 8005114:	200002e8 	.word	0x200002e8

08005118 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005124:	4618      	mov	r0, r3
 8005126:	f000 ff69 	bl	8005ffc <vPortFree>
			vPortFree( pxTCB );
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 ff66 	bl	8005ffc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005130:	bf00      	nop
 8005132:	3708      	adds	r7, #8
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800513e:	4b0c      	ldr	r3, [pc, #48]	@ (8005170 <prvResetNextTaskUnblockTime+0x38>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d104      	bne.n	8005152 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005148:	4b0a      	ldr	r3, [pc, #40]	@ (8005174 <prvResetNextTaskUnblockTime+0x3c>)
 800514a:	f04f 32ff 	mov.w	r2, #4294967295
 800514e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005150:	e008      	b.n	8005164 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005152:	4b07      	ldr	r3, [pc, #28]	@ (8005170 <prvResetNextTaskUnblockTime+0x38>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	4a04      	ldr	r2, [pc, #16]	@ (8005174 <prvResetNextTaskUnblockTime+0x3c>)
 8005162:	6013      	str	r3, [r2, #0]
}
 8005164:	bf00      	nop
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr
 8005170:	200002b8 	.word	0x200002b8
 8005174:	20000320 	.word	0x20000320

08005178 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800517e:	4b0b      	ldr	r3, [pc, #44]	@ (80051ac <xTaskGetSchedulerState+0x34>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d102      	bne.n	800518c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005186:	2301      	movs	r3, #1
 8005188:	607b      	str	r3, [r7, #4]
 800518a:	e008      	b.n	800519e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800518c:	4b08      	ldr	r3, [pc, #32]	@ (80051b0 <xTaskGetSchedulerState+0x38>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d102      	bne.n	800519a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005194:	2302      	movs	r3, #2
 8005196:	607b      	str	r3, [r7, #4]
 8005198:	e001      	b.n	800519e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800519a:	2300      	movs	r3, #0
 800519c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800519e:	687b      	ldr	r3, [r7, #4]
	}
 80051a0:	4618      	mov	r0, r3
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr
 80051ac:	2000030c 	.word	0x2000030c
 80051b0:	20000328 	.word	0x20000328

080051b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b086      	sub	sp, #24
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80051c0:	2300      	movs	r3, #0
 80051c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d070      	beq.n	80052ac <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80051ca:	4b3b      	ldr	r3, [pc, #236]	@ (80052b8 <xTaskPriorityDisinherit+0x104>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	693a      	ldr	r2, [r7, #16]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d00b      	beq.n	80051ec <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80051d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051d8:	f383 8811 	msr	BASEPRI, r3
 80051dc:	f3bf 8f6f 	isb	sy
 80051e0:	f3bf 8f4f 	dsb	sy
 80051e4:	60fb      	str	r3, [r7, #12]
}
 80051e6:	bf00      	nop
 80051e8:	bf00      	nop
 80051ea:	e7fd      	b.n	80051e8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d10b      	bne.n	800520c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80051f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051f8:	f383 8811 	msr	BASEPRI, r3
 80051fc:	f3bf 8f6f 	isb	sy
 8005200:	f3bf 8f4f 	dsb	sy
 8005204:	60bb      	str	r3, [r7, #8]
}
 8005206:	bf00      	nop
 8005208:	bf00      	nop
 800520a:	e7fd      	b.n	8005208 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005210:	1e5a      	subs	r2, r3, #1
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	64da      	str	r2, [r3, #76]	@ 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800521e:	429a      	cmp	r2, r3
 8005220:	d044      	beq.n	80052ac <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005226:	2b00      	cmp	r3, #0
 8005228:	d140      	bne.n	80052ac <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	3304      	adds	r3, #4
 800522e:	4618      	mov	r0, r3
 8005230:	f7fe fd38 	bl	8003ca4 <uxListRemove>
 8005234:	4603      	mov	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d115      	bne.n	8005266 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800523e:	491f      	ldr	r1, [pc, #124]	@ (80052bc <xTaskPriorityDisinherit+0x108>)
 8005240:	4613      	mov	r3, r2
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	4413      	add	r3, r2
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	440b      	add	r3, r1
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d10a      	bne.n	8005266 <xTaskPriorityDisinherit+0xb2>
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005254:	2201      	movs	r2, #1
 8005256:	fa02 f303 	lsl.w	r3, r2, r3
 800525a:	43da      	mvns	r2, r3
 800525c:	4b18      	ldr	r3, [pc, #96]	@ (80052c0 <xTaskPriorityDisinherit+0x10c>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4013      	ands	r3, r2
 8005262:	4a17      	ldr	r2, [pc, #92]	@ (80052c0 <xTaskPriorityDisinherit+0x10c>)
 8005264:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005272:	f1c3 0205 	rsb	r2, r3, #5
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800527e:	2201      	movs	r2, #1
 8005280:	409a      	lsls	r2, r3
 8005282:	4b0f      	ldr	r3, [pc, #60]	@ (80052c0 <xTaskPriorityDisinherit+0x10c>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4313      	orrs	r3, r2
 8005288:	4a0d      	ldr	r2, [pc, #52]	@ (80052c0 <xTaskPriorityDisinherit+0x10c>)
 800528a:	6013      	str	r3, [r2, #0]
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005290:	4613      	mov	r3, r2
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	4413      	add	r3, r2
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	4a08      	ldr	r2, [pc, #32]	@ (80052bc <xTaskPriorityDisinherit+0x108>)
 800529a:	441a      	add	r2, r3
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	3304      	adds	r3, #4
 80052a0:	4619      	mov	r1, r3
 80052a2:	4610      	mov	r0, r2
 80052a4:	f7fe fca1 	bl	8003bea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80052a8:	2301      	movs	r3, #1
 80052aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80052ac:	697b      	ldr	r3, [r7, #20]
	}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3718      	adds	r7, #24
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	20000228 	.word	0x20000228
 80052bc:	2000022c 	.word	0x2000022c
 80052c0:	20000308 	.word	0x20000308

080052c4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80052ce:	4b29      	ldr	r3, [pc, #164]	@ (8005374 <prvAddCurrentTaskToDelayedList+0xb0>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80052d4:	4b28      	ldr	r3, [pc, #160]	@ (8005378 <prvAddCurrentTaskToDelayedList+0xb4>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	3304      	adds	r3, #4
 80052da:	4618      	mov	r0, r3
 80052dc:	f7fe fce2 	bl	8003ca4 <uxListRemove>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d10b      	bne.n	80052fe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80052e6:	4b24      	ldr	r3, [pc, #144]	@ (8005378 <prvAddCurrentTaskToDelayedList+0xb4>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ec:	2201      	movs	r2, #1
 80052ee:	fa02 f303 	lsl.w	r3, r2, r3
 80052f2:	43da      	mvns	r2, r3
 80052f4:	4b21      	ldr	r3, [pc, #132]	@ (800537c <prvAddCurrentTaskToDelayedList+0xb8>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4013      	ands	r3, r2
 80052fa:	4a20      	ldr	r2, [pc, #128]	@ (800537c <prvAddCurrentTaskToDelayedList+0xb8>)
 80052fc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005304:	d10a      	bne.n	800531c <prvAddCurrentTaskToDelayedList+0x58>
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d007      	beq.n	800531c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800530c:	4b1a      	ldr	r3, [pc, #104]	@ (8005378 <prvAddCurrentTaskToDelayedList+0xb4>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	3304      	adds	r3, #4
 8005312:	4619      	mov	r1, r3
 8005314:	481a      	ldr	r0, [pc, #104]	@ (8005380 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005316:	f7fe fc68 	bl	8003bea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800531a:	e026      	b.n	800536a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4413      	add	r3, r2
 8005322:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005324:	4b14      	ldr	r3, [pc, #80]	@ (8005378 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68ba      	ldr	r2, [r7, #8]
 800532a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800532c:	68ba      	ldr	r2, [r7, #8]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	429a      	cmp	r2, r3
 8005332:	d209      	bcs.n	8005348 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005334:	4b13      	ldr	r3, [pc, #76]	@ (8005384 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	4b0f      	ldr	r3, [pc, #60]	@ (8005378 <prvAddCurrentTaskToDelayedList+0xb4>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	3304      	adds	r3, #4
 800533e:	4619      	mov	r1, r3
 8005340:	4610      	mov	r0, r2
 8005342:	f7fe fc76 	bl	8003c32 <vListInsert>
}
 8005346:	e010      	b.n	800536a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005348:	4b0f      	ldr	r3, [pc, #60]	@ (8005388 <prvAddCurrentTaskToDelayedList+0xc4>)
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	4b0a      	ldr	r3, [pc, #40]	@ (8005378 <prvAddCurrentTaskToDelayedList+0xb4>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	3304      	adds	r3, #4
 8005352:	4619      	mov	r1, r3
 8005354:	4610      	mov	r0, r2
 8005356:	f7fe fc6c 	bl	8003c32 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800535a:	4b0c      	ldr	r3, [pc, #48]	@ (800538c <prvAddCurrentTaskToDelayedList+0xc8>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68ba      	ldr	r2, [r7, #8]
 8005360:	429a      	cmp	r2, r3
 8005362:	d202      	bcs.n	800536a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005364:	4a09      	ldr	r2, [pc, #36]	@ (800538c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	6013      	str	r3, [r2, #0]
}
 800536a:	bf00      	nop
 800536c:	3710      	adds	r7, #16
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	20000304 	.word	0x20000304
 8005378:	20000228 	.word	0x20000228
 800537c:	20000308 	.word	0x20000308
 8005380:	200002ec 	.word	0x200002ec
 8005384:	200002bc 	.word	0x200002bc
 8005388:	200002b8 	.word	0x200002b8
 800538c:	20000320 	.word	0x20000320

08005390 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8005396:	2300      	movs	r3, #0
 8005398:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800539a:	f000 fae1 	bl	8005960 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800539e:	4b12      	ldr	r3, [pc, #72]	@ (80053e8 <xTimerCreateTimerTask+0x58>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d00b      	beq.n	80053be <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 80053a6:	4b11      	ldr	r3, [pc, #68]	@ (80053ec <xTimerCreateTimerTask+0x5c>)
 80053a8:	9301      	str	r3, [sp, #4]
 80053aa:	2302      	movs	r3, #2
 80053ac:	9300      	str	r3, [sp, #0]
 80053ae:	2300      	movs	r3, #0
 80053b0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80053b4:	490e      	ldr	r1, [pc, #56]	@ (80053f0 <xTimerCreateTimerTask+0x60>)
 80053b6:	480f      	ldr	r0, [pc, #60]	@ (80053f4 <xTimerCreateTimerTask+0x64>)
 80053b8:	f7ff f956 	bl	8004668 <xTaskCreate>
 80053bc:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d10b      	bne.n	80053dc <xTimerCreateTimerTask+0x4c>
	__asm volatile
 80053c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053c8:	f383 8811 	msr	BASEPRI, r3
 80053cc:	f3bf 8f6f 	isb	sy
 80053d0:	f3bf 8f4f 	dsb	sy
 80053d4:	603b      	str	r3, [r7, #0]
}
 80053d6:	bf00      	nop
 80053d8:	bf00      	nop
 80053da:	e7fd      	b.n	80053d8 <xTimerCreateTimerTask+0x48>
	return xReturn;
 80053dc:	687b      	ldr	r3, [r7, #4]
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3708      	adds	r7, #8
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	2000035c 	.word	0x2000035c
 80053ec:	20000360 	.word	0x20000360
 80053f0:	08006c64 	.word	0x08006c64
 80053f4:	08005531 	.word	0x08005531

080053f8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b08a      	sub	sp, #40	@ 0x28
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]
 8005404:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005406:	2300      	movs	r3, #0
 8005408:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d10b      	bne.n	8005428 <xTimerGenericCommand+0x30>
	__asm volatile
 8005410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005414:	f383 8811 	msr	BASEPRI, r3
 8005418:	f3bf 8f6f 	isb	sy
 800541c:	f3bf 8f4f 	dsb	sy
 8005420:	623b      	str	r3, [r7, #32]
}
 8005422:	bf00      	nop
 8005424:	bf00      	nop
 8005426:	e7fd      	b.n	8005424 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005428:	4b19      	ldr	r3, [pc, #100]	@ (8005490 <xTimerGenericCommand+0x98>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d02a      	beq.n	8005486 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	2b05      	cmp	r3, #5
 8005440:	dc18      	bgt.n	8005474 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005442:	f7ff fe99 	bl	8005178 <xTaskGetSchedulerState>
 8005446:	4603      	mov	r3, r0
 8005448:	2b02      	cmp	r3, #2
 800544a:	d109      	bne.n	8005460 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800544c:	4b10      	ldr	r3, [pc, #64]	@ (8005490 <xTimerGenericCommand+0x98>)
 800544e:	6818      	ldr	r0, [r3, #0]
 8005450:	f107 0114 	add.w	r1, r7, #20
 8005454:	2300      	movs	r3, #0
 8005456:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005458:	f7fe fd18 	bl	8003e8c <xQueueGenericSend>
 800545c:	6278      	str	r0, [r7, #36]	@ 0x24
 800545e:	e012      	b.n	8005486 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005460:	4b0b      	ldr	r3, [pc, #44]	@ (8005490 <xTimerGenericCommand+0x98>)
 8005462:	6818      	ldr	r0, [r3, #0]
 8005464:	f107 0114 	add.w	r1, r7, #20
 8005468:	2300      	movs	r3, #0
 800546a:	2200      	movs	r2, #0
 800546c:	f7fe fd0e 	bl	8003e8c <xQueueGenericSend>
 8005470:	6278      	str	r0, [r7, #36]	@ 0x24
 8005472:	e008      	b.n	8005486 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005474:	4b06      	ldr	r3, [pc, #24]	@ (8005490 <xTimerGenericCommand+0x98>)
 8005476:	6818      	ldr	r0, [r3, #0]
 8005478:	f107 0114 	add.w	r1, r7, #20
 800547c:	2300      	movs	r3, #0
 800547e:	683a      	ldr	r2, [r7, #0]
 8005480:	f7fe fe06 	bl	8004090 <xQueueGenericSendFromISR>
 8005484:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005488:	4618      	mov	r0, r3
 800548a:	3728      	adds	r7, #40	@ 0x28
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}
 8005490:	2000035c 	.word	0x2000035c

08005494 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b088      	sub	sp, #32
 8005498:	af02      	add	r7, sp, #8
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800549e:	4b23      	ldr	r3, [pc, #140]	@ (800552c <prvProcessExpiredTimer+0x98>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	3304      	adds	r3, #4
 80054ac:	4618      	mov	r0, r3
 80054ae:	f7fe fbf9 	bl	8003ca4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80054b8:	f003 0304 	and.w	r3, r3, #4
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d023      	beq.n	8005508 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	699a      	ldr	r2, [r3, #24]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	18d1      	adds	r1, r2, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	683a      	ldr	r2, [r7, #0]
 80054cc:	6978      	ldr	r0, [r7, #20]
 80054ce:	f000 f8d5 	bl	800567c <prvInsertTimerInActiveList>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d020      	beq.n	800551a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80054d8:	2300      	movs	r3, #0
 80054da:	9300      	str	r3, [sp, #0]
 80054dc:	2300      	movs	r3, #0
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	2100      	movs	r1, #0
 80054e2:	6978      	ldr	r0, [r7, #20]
 80054e4:	f7ff ff88 	bl	80053f8 <xTimerGenericCommand>
 80054e8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d114      	bne.n	800551a <prvProcessExpiredTimer+0x86>
	__asm volatile
 80054f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054f4:	f383 8811 	msr	BASEPRI, r3
 80054f8:	f3bf 8f6f 	isb	sy
 80054fc:	f3bf 8f4f 	dsb	sy
 8005500:	60fb      	str	r3, [r7, #12]
}
 8005502:	bf00      	nop
 8005504:	bf00      	nop
 8005506:	e7fd      	b.n	8005504 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800550e:	f023 0301 	bic.w	r3, r3, #1
 8005512:	b2da      	uxtb	r2, r3
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	6a1b      	ldr	r3, [r3, #32]
 800551e:	6978      	ldr	r0, [r7, #20]
 8005520:	4798      	blx	r3
}
 8005522:	bf00      	nop
 8005524:	3718      	adds	r7, #24
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	20000354 	.word	0x20000354

08005530 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005538:	f107 0308 	add.w	r3, r7, #8
 800553c:	4618      	mov	r0, r3
 800553e:	f000 f859 	bl	80055f4 <prvGetNextExpireTime>
 8005542:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	4619      	mov	r1, r3
 8005548:	68f8      	ldr	r0, [r7, #12]
 800554a:	f000 f805 	bl	8005558 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800554e:	f000 f8d7 	bl	8005700 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005552:	bf00      	nop
 8005554:	e7f0      	b.n	8005538 <prvTimerTask+0x8>
	...

08005558 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005562:	f7ff fa45 	bl	80049f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005566:	f107 0308 	add.w	r3, r7, #8
 800556a:	4618      	mov	r0, r3
 800556c:	f000 f866 	bl	800563c <prvSampleTimeNow>
 8005570:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d130      	bne.n	80055da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d10a      	bne.n	8005594 <prvProcessTimerOrBlockTask+0x3c>
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	429a      	cmp	r2, r3
 8005584:	d806      	bhi.n	8005594 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005586:	f7ff fa41 	bl	8004a0c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800558a:	68f9      	ldr	r1, [r7, #12]
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f7ff ff81 	bl	8005494 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005592:	e024      	b.n	80055de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d008      	beq.n	80055ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800559a:	4b13      	ldr	r3, [pc, #76]	@ (80055e8 <prvProcessTimerOrBlockTask+0x90>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d101      	bne.n	80055a8 <prvProcessTimerOrBlockTask+0x50>
 80055a4:	2301      	movs	r3, #1
 80055a6:	e000      	b.n	80055aa <prvProcessTimerOrBlockTask+0x52>
 80055a8:	2300      	movs	r3, #0
 80055aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80055ac:	4b0f      	ldr	r3, [pc, #60]	@ (80055ec <prvProcessTimerOrBlockTask+0x94>)
 80055ae:	6818      	ldr	r0, [r3, #0]
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	683a      	ldr	r2, [r7, #0]
 80055b8:	4619      	mov	r1, r3
 80055ba:	f7ff f821 	bl	8004600 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80055be:	f7ff fa25 	bl	8004a0c <xTaskResumeAll>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d10a      	bne.n	80055de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80055c8:	4b09      	ldr	r3, [pc, #36]	@ (80055f0 <prvProcessTimerOrBlockTask+0x98>)
 80055ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055ce:	601a      	str	r2, [r3, #0]
 80055d0:	f3bf 8f4f 	dsb	sy
 80055d4:	f3bf 8f6f 	isb	sy
}
 80055d8:	e001      	b.n	80055de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80055da:	f7ff fa17 	bl	8004a0c <xTaskResumeAll>
}
 80055de:	bf00      	nop
 80055e0:	3710      	adds	r7, #16
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	20000358 	.word	0x20000358
 80055ec:	2000035c 	.word	0x2000035c
 80055f0:	e000ed04 	.word	0xe000ed04

080055f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80055fc:	4b0e      	ldr	r3, [pc, #56]	@ (8005638 <prvGetNextExpireTime+0x44>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d101      	bne.n	800560a <prvGetNextExpireTime+0x16>
 8005606:	2201      	movs	r2, #1
 8005608:	e000      	b.n	800560c <prvGetNextExpireTime+0x18>
 800560a:	2200      	movs	r2, #0
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d105      	bne.n	8005624 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005618:	4b07      	ldr	r3, [pc, #28]	@ (8005638 <prvGetNextExpireTime+0x44>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	60fb      	str	r3, [r7, #12]
 8005622:	e001      	b.n	8005628 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005624:	2300      	movs	r3, #0
 8005626:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005628:	68fb      	ldr	r3, [r7, #12]
}
 800562a:	4618      	mov	r0, r3
 800562c:	3714      	adds	r7, #20
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr
 8005636:	bf00      	nop
 8005638:	20000354 	.word	0x20000354

0800563c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005644:	f7ff fa80 	bl	8004b48 <xTaskGetTickCount>
 8005648:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800564a:	4b0b      	ldr	r3, [pc, #44]	@ (8005678 <prvSampleTimeNow+0x3c>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	429a      	cmp	r2, r3
 8005652:	d205      	bcs.n	8005660 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005654:	f000 f91e 	bl	8005894 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	601a      	str	r2, [r3, #0]
 800565e:	e002      	b.n	8005666 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005666:	4a04      	ldr	r2, [pc, #16]	@ (8005678 <prvSampleTimeNow+0x3c>)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800566c:	68fb      	ldr	r3, [r7, #12]
}
 800566e:	4618      	mov	r0, r3
 8005670:	3710      	adds	r7, #16
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	20000364 	.word	0x20000364

0800567c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b086      	sub	sp, #24
 8005680:	af00      	add	r7, sp, #0
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	607a      	str	r2, [r7, #4]
 8005688:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800568a:	2300      	movs	r3, #0
 800568c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	68ba      	ldr	r2, [r7, #8]
 8005692:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800569a:	68ba      	ldr	r2, [r7, #8]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d812      	bhi.n	80056c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	1ad2      	subs	r2, r2, r3
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	699b      	ldr	r3, [r3, #24]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d302      	bcc.n	80056b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80056b0:	2301      	movs	r3, #1
 80056b2:	617b      	str	r3, [r7, #20]
 80056b4:	e01b      	b.n	80056ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80056b6:	4b10      	ldr	r3, [pc, #64]	@ (80056f8 <prvInsertTimerInActiveList+0x7c>)
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	3304      	adds	r3, #4
 80056be:	4619      	mov	r1, r3
 80056c0:	4610      	mov	r0, r2
 80056c2:	f7fe fab6 	bl	8003c32 <vListInsert>
 80056c6:	e012      	b.n	80056ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d206      	bcs.n	80056de <prvInsertTimerInActiveList+0x62>
 80056d0:	68ba      	ldr	r2, [r7, #8]
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d302      	bcc.n	80056de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80056d8:	2301      	movs	r3, #1
 80056da:	617b      	str	r3, [r7, #20]
 80056dc:	e007      	b.n	80056ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80056de:	4b07      	ldr	r3, [pc, #28]	@ (80056fc <prvInsertTimerInActiveList+0x80>)
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	3304      	adds	r3, #4
 80056e6:	4619      	mov	r1, r3
 80056e8:	4610      	mov	r0, r2
 80056ea:	f7fe faa2 	bl	8003c32 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80056ee:	697b      	ldr	r3, [r7, #20]
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3718      	adds	r7, #24
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	20000358 	.word	0x20000358
 80056fc:	20000354 	.word	0x20000354

08005700 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b08c      	sub	sp, #48	@ 0x30
 8005704:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005706:	e0b2      	b.n	800586e <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	2b00      	cmp	r3, #0
 800570c:	f2c0 80af 	blt.w	800586e <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005716:	695b      	ldr	r3, [r3, #20]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d004      	beq.n	8005726 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800571c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800571e:	3304      	adds	r3, #4
 8005720:	4618      	mov	r0, r3
 8005722:	f7fe fabf 	bl	8003ca4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005726:	1d3b      	adds	r3, r7, #4
 8005728:	4618      	mov	r0, r3
 800572a:	f7ff ff87 	bl	800563c <prvSampleTimeNow>
 800572e:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	2b09      	cmp	r3, #9
 8005734:	f200 8098 	bhi.w	8005868 <prvProcessReceivedCommands+0x168>
 8005738:	a201      	add	r2, pc, #4	@ (adr r2, 8005740 <prvProcessReceivedCommands+0x40>)
 800573a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800573e:	bf00      	nop
 8005740:	08005769 	.word	0x08005769
 8005744:	08005769 	.word	0x08005769
 8005748:	08005769 	.word	0x08005769
 800574c:	080057df 	.word	0x080057df
 8005750:	080057f3 	.word	0x080057f3
 8005754:	0800583f 	.word	0x0800583f
 8005758:	08005769 	.word	0x08005769
 800575c:	08005769 	.word	0x08005769
 8005760:	080057df 	.word	0x080057df
 8005764:	080057f3 	.word	0x080057f3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800576a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800576e:	f043 0301 	orr.w	r3, r3, #1
 8005772:	b2da      	uxtb	r2, r3
 8005774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005776:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800577e:	699b      	ldr	r3, [r3, #24]
 8005780:	18d1      	adds	r1, r2, r3
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6a3a      	ldr	r2, [r7, #32]
 8005786:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005788:	f7ff ff78 	bl	800567c <prvInsertTimerInActiveList>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d06c      	beq.n	800586c <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005794:	6a1b      	ldr	r3, [r3, #32]
 8005796:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005798:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800579a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800579c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80057a0:	f003 0304 	and.w	r3, r3, #4
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d061      	beq.n	800586c <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	441a      	add	r2, r3
 80057b0:	2300      	movs	r3, #0
 80057b2:	9300      	str	r3, [sp, #0]
 80057b4:	2300      	movs	r3, #0
 80057b6:	2100      	movs	r1, #0
 80057b8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80057ba:	f7ff fe1d 	bl	80053f8 <xTimerGenericCommand>
 80057be:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d152      	bne.n	800586c <prvProcessReceivedCommands+0x16c>
	__asm volatile
 80057c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ca:	f383 8811 	msr	BASEPRI, r3
 80057ce:	f3bf 8f6f 	isb	sy
 80057d2:	f3bf 8f4f 	dsb	sy
 80057d6:	61bb      	str	r3, [r7, #24]
}
 80057d8:	bf00      	nop
 80057da:	bf00      	nop
 80057dc:	e7fd      	b.n	80057da <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80057de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80057e4:	f023 0301 	bic.w	r3, r3, #1
 80057e8:	b2da      	uxtb	r2, r3
 80057ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80057f0:	e03d      	b.n	800586e <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80057f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80057f8:	f043 0301 	orr.w	r3, r3, #1
 80057fc:	b2da      	uxtb	r2, r3
 80057fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005800:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005808:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800580a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800580c:	699b      	ldr	r3, [r3, #24]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d10b      	bne.n	800582a <prvProcessReceivedCommands+0x12a>
	__asm volatile
 8005812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005816:	f383 8811 	msr	BASEPRI, r3
 800581a:	f3bf 8f6f 	isb	sy
 800581e:	f3bf 8f4f 	dsb	sy
 8005822:	617b      	str	r3, [r7, #20]
}
 8005824:	bf00      	nop
 8005826:	bf00      	nop
 8005828:	e7fd      	b.n	8005826 <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800582a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800582c:	699a      	ldr	r2, [r3, #24]
 800582e:	6a3b      	ldr	r3, [r7, #32]
 8005830:	18d1      	adds	r1, r2, r3
 8005832:	6a3b      	ldr	r3, [r7, #32]
 8005834:	6a3a      	ldr	r2, [r7, #32]
 8005836:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005838:	f7ff ff20 	bl	800567c <prvInsertTimerInActiveList>
					break;
 800583c:	e017      	b.n	800586e <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800583e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005840:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005844:	f003 0302 	and.w	r3, r3, #2
 8005848:	2b00      	cmp	r3, #0
 800584a:	d103      	bne.n	8005854 <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 800584c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800584e:	f000 fbd5 	bl	8005ffc <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005852:	e00c      	b.n	800586e <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005856:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800585a:	f023 0301 	bic.w	r3, r3, #1
 800585e:	b2da      	uxtb	r2, r3
 8005860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005862:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005866:	e002      	b.n	800586e <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 8005868:	bf00      	nop
 800586a:	e000      	b.n	800586e <prvProcessReceivedCommands+0x16e>
					break;
 800586c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800586e:	4b08      	ldr	r3, [pc, #32]	@ (8005890 <prvProcessReceivedCommands+0x190>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f107 0108 	add.w	r1, r7, #8
 8005876:	2200      	movs	r2, #0
 8005878:	4618      	mov	r0, r3
 800587a:	f7fe fca5 	bl	80041c8 <xQueueReceive>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	f47f af41 	bne.w	8005708 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005886:	bf00      	nop
 8005888:	bf00      	nop
 800588a:	3728      	adds	r7, #40	@ 0x28
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	2000035c 	.word	0x2000035c

08005894 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b088      	sub	sp, #32
 8005898:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800589a:	e049      	b.n	8005930 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800589c:	4b2e      	ldr	r3, [pc, #184]	@ (8005958 <prvSwitchTimerLists+0xc4>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058a6:	4b2c      	ldr	r3, [pc, #176]	@ (8005958 <prvSwitchTimerLists+0xc4>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	3304      	adds	r3, #4
 80058b4:	4618      	mov	r0, r3
 80058b6:	f7fe f9f5 	bl	8003ca4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6a1b      	ldr	r3, [r3, #32]
 80058be:	68f8      	ldr	r0, [r7, #12]
 80058c0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80058c8:	f003 0304 	and.w	r3, r3, #4
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d02f      	beq.n	8005930 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	699b      	ldr	r3, [r3, #24]
 80058d4:	693a      	ldr	r2, [r7, #16]
 80058d6:	4413      	add	r3, r2
 80058d8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80058da:	68ba      	ldr	r2, [r7, #8]
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	429a      	cmp	r2, r3
 80058e0:	d90e      	bls.n	8005900 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	68ba      	ldr	r2, [r7, #8]
 80058e6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80058ee:	4b1a      	ldr	r3, [pc, #104]	@ (8005958 <prvSwitchTimerLists+0xc4>)
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	3304      	adds	r3, #4
 80058f6:	4619      	mov	r1, r3
 80058f8:	4610      	mov	r0, r2
 80058fa:	f7fe f99a 	bl	8003c32 <vListInsert>
 80058fe:	e017      	b.n	8005930 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005900:	2300      	movs	r3, #0
 8005902:	9300      	str	r3, [sp, #0]
 8005904:	2300      	movs	r3, #0
 8005906:	693a      	ldr	r2, [r7, #16]
 8005908:	2100      	movs	r1, #0
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	f7ff fd74 	bl	80053f8 <xTimerGenericCommand>
 8005910:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d10b      	bne.n	8005930 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800591c:	f383 8811 	msr	BASEPRI, r3
 8005920:	f3bf 8f6f 	isb	sy
 8005924:	f3bf 8f4f 	dsb	sy
 8005928:	603b      	str	r3, [r7, #0]
}
 800592a:	bf00      	nop
 800592c:	bf00      	nop
 800592e:	e7fd      	b.n	800592c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005930:	4b09      	ldr	r3, [pc, #36]	@ (8005958 <prvSwitchTimerLists+0xc4>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d1b0      	bne.n	800589c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800593a:	4b07      	ldr	r3, [pc, #28]	@ (8005958 <prvSwitchTimerLists+0xc4>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005940:	4b06      	ldr	r3, [pc, #24]	@ (800595c <prvSwitchTimerLists+0xc8>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a04      	ldr	r2, [pc, #16]	@ (8005958 <prvSwitchTimerLists+0xc4>)
 8005946:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005948:	4a04      	ldr	r2, [pc, #16]	@ (800595c <prvSwitchTimerLists+0xc8>)
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	6013      	str	r3, [r2, #0]
}
 800594e:	bf00      	nop
 8005950:	3718      	adds	r7, #24
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	20000354 	.word	0x20000354
 800595c:	20000358 	.word	0x20000358

08005960 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005960:	b580      	push	{r7, lr}
 8005962:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005964:	f000 f960 	bl	8005c28 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005968:	4b12      	ldr	r3, [pc, #72]	@ (80059b4 <prvCheckForValidListAndQueue+0x54>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d11d      	bne.n	80059ac <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8005970:	4811      	ldr	r0, [pc, #68]	@ (80059b8 <prvCheckForValidListAndQueue+0x58>)
 8005972:	f7fe f90d 	bl	8003b90 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005976:	4811      	ldr	r0, [pc, #68]	@ (80059bc <prvCheckForValidListAndQueue+0x5c>)
 8005978:	f7fe f90a 	bl	8003b90 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800597c:	4b10      	ldr	r3, [pc, #64]	@ (80059c0 <prvCheckForValidListAndQueue+0x60>)
 800597e:	4a0e      	ldr	r2, [pc, #56]	@ (80059b8 <prvCheckForValidListAndQueue+0x58>)
 8005980:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005982:	4b10      	ldr	r3, [pc, #64]	@ (80059c4 <prvCheckForValidListAndQueue+0x64>)
 8005984:	4a0d      	ldr	r2, [pc, #52]	@ (80059bc <prvCheckForValidListAndQueue+0x5c>)
 8005986:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005988:	2200      	movs	r2, #0
 800598a:	210c      	movs	r1, #12
 800598c:	200a      	movs	r0, #10
 800598e:	f7fe fa1d 	bl	8003dcc <xQueueGenericCreate>
 8005992:	4603      	mov	r3, r0
 8005994:	4a07      	ldr	r2, [pc, #28]	@ (80059b4 <prvCheckForValidListAndQueue+0x54>)
 8005996:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005998:	4b06      	ldr	r3, [pc, #24]	@ (80059b4 <prvCheckForValidListAndQueue+0x54>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d005      	beq.n	80059ac <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80059a0:	4b04      	ldr	r3, [pc, #16]	@ (80059b4 <prvCheckForValidListAndQueue+0x54>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4908      	ldr	r1, [pc, #32]	@ (80059c8 <prvCheckForValidListAndQueue+0x68>)
 80059a6:	4618      	mov	r0, r3
 80059a8:	f7fe fe00 	bl	80045ac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80059ac:	f000 f96e 	bl	8005c8c <vPortExitCritical>
}
 80059b0:	bf00      	nop
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	2000035c 	.word	0x2000035c
 80059b8:	2000032c 	.word	0x2000032c
 80059bc:	20000340 	.word	0x20000340
 80059c0:	20000354 	.word	0x20000354
 80059c4:	20000358 	.word	0x20000358
 80059c8:	08006c6c 	.word	0x08006c6c

080059cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80059cc:	b480      	push	{r7}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	3b04      	subs	r3, #4
 80059dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80059e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	3b04      	subs	r3, #4
 80059ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	f023 0201 	bic.w	r2, r3, #1
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	3b04      	subs	r3, #4
 80059fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80059fc:	4a0c      	ldr	r2, [pc, #48]	@ (8005a30 <pxPortInitialiseStack+0x64>)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	3b14      	subs	r3, #20
 8005a06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	3b04      	subs	r3, #4
 8005a12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f06f 0202 	mvn.w	r2, #2
 8005a1a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	3b20      	subs	r3, #32
 8005a20:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005a22:	68fb      	ldr	r3, [r7, #12]
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3714      	adds	r7, #20
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr
 8005a30:	08005a35 	.word	0x08005a35

08005a34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005a34:	b480      	push	{r7}
 8005a36:	b085      	sub	sp, #20
 8005a38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005a3e:	4b13      	ldr	r3, [pc, #76]	@ (8005a8c <prvTaskExitError+0x58>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a46:	d00b      	beq.n	8005a60 <prvTaskExitError+0x2c>
	__asm volatile
 8005a48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a4c:	f383 8811 	msr	BASEPRI, r3
 8005a50:	f3bf 8f6f 	isb	sy
 8005a54:	f3bf 8f4f 	dsb	sy
 8005a58:	60fb      	str	r3, [r7, #12]
}
 8005a5a:	bf00      	nop
 8005a5c:	bf00      	nop
 8005a5e:	e7fd      	b.n	8005a5c <prvTaskExitError+0x28>
	__asm volatile
 8005a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a64:	f383 8811 	msr	BASEPRI, r3
 8005a68:	f3bf 8f6f 	isb	sy
 8005a6c:	f3bf 8f4f 	dsb	sy
 8005a70:	60bb      	str	r3, [r7, #8]
}
 8005a72:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005a74:	bf00      	nop
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d0fc      	beq.n	8005a76 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005a7c:	bf00      	nop
 8005a7e:	bf00      	nop
 8005a80:	3714      	adds	r7, #20
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	20000010 	.word	0x20000010

08005a90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005a90:	4b07      	ldr	r3, [pc, #28]	@ (8005ab0 <pxCurrentTCBConst2>)
 8005a92:	6819      	ldr	r1, [r3, #0]
 8005a94:	6808      	ldr	r0, [r1, #0]
 8005a96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a9a:	f380 8809 	msr	PSP, r0
 8005a9e:	f3bf 8f6f 	isb	sy
 8005aa2:	f04f 0000 	mov.w	r0, #0
 8005aa6:	f380 8811 	msr	BASEPRI, r0
 8005aaa:	4770      	bx	lr
 8005aac:	f3af 8000 	nop.w

08005ab0 <pxCurrentTCBConst2>:
 8005ab0:	20000228 	.word	0x20000228
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005ab4:	bf00      	nop
 8005ab6:	bf00      	nop

08005ab8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005ab8:	4808      	ldr	r0, [pc, #32]	@ (8005adc <prvPortStartFirstTask+0x24>)
 8005aba:	6800      	ldr	r0, [r0, #0]
 8005abc:	6800      	ldr	r0, [r0, #0]
 8005abe:	f380 8808 	msr	MSP, r0
 8005ac2:	f04f 0000 	mov.w	r0, #0
 8005ac6:	f380 8814 	msr	CONTROL, r0
 8005aca:	b662      	cpsie	i
 8005acc:	b661      	cpsie	f
 8005ace:	f3bf 8f4f 	dsb	sy
 8005ad2:	f3bf 8f6f 	isb	sy
 8005ad6:	df00      	svc	0
 8005ad8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005ada:	bf00      	nop
 8005adc:	e000ed08 	.word	0xe000ed08

08005ae0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b086      	sub	sp, #24
 8005ae4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005ae6:	4b47      	ldr	r3, [pc, #284]	@ (8005c04 <xPortStartScheduler+0x124>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a47      	ldr	r2, [pc, #284]	@ (8005c08 <xPortStartScheduler+0x128>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d10b      	bne.n	8005b08 <xPortStartScheduler+0x28>
	__asm volatile
 8005af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005af4:	f383 8811 	msr	BASEPRI, r3
 8005af8:	f3bf 8f6f 	isb	sy
 8005afc:	f3bf 8f4f 	dsb	sy
 8005b00:	613b      	str	r3, [r7, #16]
}
 8005b02:	bf00      	nop
 8005b04:	bf00      	nop
 8005b06:	e7fd      	b.n	8005b04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005b08:	4b3e      	ldr	r3, [pc, #248]	@ (8005c04 <xPortStartScheduler+0x124>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a3f      	ldr	r2, [pc, #252]	@ (8005c0c <xPortStartScheduler+0x12c>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d10b      	bne.n	8005b2a <xPortStartScheduler+0x4a>
	__asm volatile
 8005b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b16:	f383 8811 	msr	BASEPRI, r3
 8005b1a:	f3bf 8f6f 	isb	sy
 8005b1e:	f3bf 8f4f 	dsb	sy
 8005b22:	60fb      	str	r3, [r7, #12]
}
 8005b24:	bf00      	nop
 8005b26:	bf00      	nop
 8005b28:	e7fd      	b.n	8005b26 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005b2a:	4b39      	ldr	r3, [pc, #228]	@ (8005c10 <xPortStartScheduler+0x130>)
 8005b2c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	22ff      	movs	r2, #255	@ 0xff
 8005b3a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005b44:	78fb      	ldrb	r3, [r7, #3]
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005b4c:	b2da      	uxtb	r2, r3
 8005b4e:	4b31      	ldr	r3, [pc, #196]	@ (8005c14 <xPortStartScheduler+0x134>)
 8005b50:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005b52:	4b31      	ldr	r3, [pc, #196]	@ (8005c18 <xPortStartScheduler+0x138>)
 8005b54:	2207      	movs	r2, #7
 8005b56:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b58:	e009      	b.n	8005b6e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005b5a:	4b2f      	ldr	r3, [pc, #188]	@ (8005c18 <xPortStartScheduler+0x138>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	4a2d      	ldr	r2, [pc, #180]	@ (8005c18 <xPortStartScheduler+0x138>)
 8005b62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005b64:	78fb      	ldrb	r3, [r7, #3]
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	005b      	lsls	r3, r3, #1
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b6e:	78fb      	ldrb	r3, [r7, #3]
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b76:	2b80      	cmp	r3, #128	@ 0x80
 8005b78:	d0ef      	beq.n	8005b5a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005b7a:	4b27      	ldr	r3, [pc, #156]	@ (8005c18 <xPortStartScheduler+0x138>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f1c3 0307 	rsb	r3, r3, #7
 8005b82:	2b04      	cmp	r3, #4
 8005b84:	d00b      	beq.n	8005b9e <xPortStartScheduler+0xbe>
	__asm volatile
 8005b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b8a:	f383 8811 	msr	BASEPRI, r3
 8005b8e:	f3bf 8f6f 	isb	sy
 8005b92:	f3bf 8f4f 	dsb	sy
 8005b96:	60bb      	str	r3, [r7, #8]
}
 8005b98:	bf00      	nop
 8005b9a:	bf00      	nop
 8005b9c:	e7fd      	b.n	8005b9a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005b9e:	4b1e      	ldr	r3, [pc, #120]	@ (8005c18 <xPortStartScheduler+0x138>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	021b      	lsls	r3, r3, #8
 8005ba4:	4a1c      	ldr	r2, [pc, #112]	@ (8005c18 <xPortStartScheduler+0x138>)
 8005ba6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8005c18 <xPortStartScheduler+0x138>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005bb0:	4a19      	ldr	r2, [pc, #100]	@ (8005c18 <xPortStartScheduler+0x138>)
 8005bb2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	b2da      	uxtb	r2, r3
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005bbc:	4b17      	ldr	r3, [pc, #92]	@ (8005c1c <xPortStartScheduler+0x13c>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a16      	ldr	r2, [pc, #88]	@ (8005c1c <xPortStartScheduler+0x13c>)
 8005bc2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005bc6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005bc8:	4b14      	ldr	r3, [pc, #80]	@ (8005c1c <xPortStartScheduler+0x13c>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a13      	ldr	r2, [pc, #76]	@ (8005c1c <xPortStartScheduler+0x13c>)
 8005bce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005bd2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005bd4:	f000 f8da 	bl	8005d8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005bd8:	4b11      	ldr	r3, [pc, #68]	@ (8005c20 <xPortStartScheduler+0x140>)
 8005bda:	2200      	movs	r2, #0
 8005bdc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005bde:	f000 f8f9 	bl	8005dd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005be2:	4b10      	ldr	r3, [pc, #64]	@ (8005c24 <xPortStartScheduler+0x144>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a0f      	ldr	r2, [pc, #60]	@ (8005c24 <xPortStartScheduler+0x144>)
 8005be8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005bec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005bee:	f7ff ff63 	bl	8005ab8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005bf2:	f7ff f873 	bl	8004cdc <vTaskSwitchContext>
	prvTaskExitError();
 8005bf6:	f7ff ff1d 	bl	8005a34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3718      	adds	r7, #24
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	e000ed00 	.word	0xe000ed00
 8005c08:	410fc271 	.word	0x410fc271
 8005c0c:	410fc270 	.word	0x410fc270
 8005c10:	e000e400 	.word	0xe000e400
 8005c14:	20000368 	.word	0x20000368
 8005c18:	2000036c 	.word	0x2000036c
 8005c1c:	e000ed20 	.word	0xe000ed20
 8005c20:	20000010 	.word	0x20000010
 8005c24:	e000ef34 	.word	0xe000ef34

08005c28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
	__asm volatile
 8005c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c32:	f383 8811 	msr	BASEPRI, r3
 8005c36:	f3bf 8f6f 	isb	sy
 8005c3a:	f3bf 8f4f 	dsb	sy
 8005c3e:	607b      	str	r3, [r7, #4]
}
 8005c40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005c42:	4b10      	ldr	r3, [pc, #64]	@ (8005c84 <vPortEnterCritical+0x5c>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	3301      	adds	r3, #1
 8005c48:	4a0e      	ldr	r2, [pc, #56]	@ (8005c84 <vPortEnterCritical+0x5c>)
 8005c4a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005c4c:	4b0d      	ldr	r3, [pc, #52]	@ (8005c84 <vPortEnterCritical+0x5c>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d110      	bne.n	8005c76 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005c54:	4b0c      	ldr	r3, [pc, #48]	@ (8005c88 <vPortEnterCritical+0x60>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00b      	beq.n	8005c76 <vPortEnterCritical+0x4e>
	__asm volatile
 8005c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c62:	f383 8811 	msr	BASEPRI, r3
 8005c66:	f3bf 8f6f 	isb	sy
 8005c6a:	f3bf 8f4f 	dsb	sy
 8005c6e:	603b      	str	r3, [r7, #0]
}
 8005c70:	bf00      	nop
 8005c72:	bf00      	nop
 8005c74:	e7fd      	b.n	8005c72 <vPortEnterCritical+0x4a>
	}
}
 8005c76:	bf00      	nop
 8005c78:	370c      	adds	r7, #12
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop
 8005c84:	20000010 	.word	0x20000010
 8005c88:	e000ed04 	.word	0xe000ed04

08005c8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005c92:	4b12      	ldr	r3, [pc, #72]	@ (8005cdc <vPortExitCritical+0x50>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d10b      	bne.n	8005cb2 <vPortExitCritical+0x26>
	__asm volatile
 8005c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c9e:	f383 8811 	msr	BASEPRI, r3
 8005ca2:	f3bf 8f6f 	isb	sy
 8005ca6:	f3bf 8f4f 	dsb	sy
 8005caa:	607b      	str	r3, [r7, #4]
}
 8005cac:	bf00      	nop
 8005cae:	bf00      	nop
 8005cb0:	e7fd      	b.n	8005cae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8005cdc <vPortExitCritical+0x50>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	4a08      	ldr	r2, [pc, #32]	@ (8005cdc <vPortExitCritical+0x50>)
 8005cba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005cbc:	4b07      	ldr	r3, [pc, #28]	@ (8005cdc <vPortExitCritical+0x50>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d105      	bne.n	8005cd0 <vPortExitCritical+0x44>
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	f383 8811 	msr	BASEPRI, r3
}
 8005cce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005cd0:	bf00      	nop
 8005cd2:	370c      	adds	r7, #12
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr
 8005cdc:	20000010 	.word	0x20000010

08005ce0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005ce0:	f3ef 8009 	mrs	r0, PSP
 8005ce4:	f3bf 8f6f 	isb	sy
 8005ce8:	4b15      	ldr	r3, [pc, #84]	@ (8005d40 <pxCurrentTCBConst>)
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	f01e 0f10 	tst.w	lr, #16
 8005cf0:	bf08      	it	eq
 8005cf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005cf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cfa:	6010      	str	r0, [r2, #0]
 8005cfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005d00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005d04:	f380 8811 	msr	BASEPRI, r0
 8005d08:	f3bf 8f4f 	dsb	sy
 8005d0c:	f3bf 8f6f 	isb	sy
 8005d10:	f7fe ffe4 	bl	8004cdc <vTaskSwitchContext>
 8005d14:	f04f 0000 	mov.w	r0, #0
 8005d18:	f380 8811 	msr	BASEPRI, r0
 8005d1c:	bc09      	pop	{r0, r3}
 8005d1e:	6819      	ldr	r1, [r3, #0]
 8005d20:	6808      	ldr	r0, [r1, #0]
 8005d22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d26:	f01e 0f10 	tst.w	lr, #16
 8005d2a:	bf08      	it	eq
 8005d2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005d30:	f380 8809 	msr	PSP, r0
 8005d34:	f3bf 8f6f 	isb	sy
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	f3af 8000 	nop.w

08005d40 <pxCurrentTCBConst>:
 8005d40:	20000228 	.word	0x20000228
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005d44:	bf00      	nop
 8005d46:	bf00      	nop

08005d48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
	__asm volatile
 8005d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d52:	f383 8811 	msr	BASEPRI, r3
 8005d56:	f3bf 8f6f 	isb	sy
 8005d5a:	f3bf 8f4f 	dsb	sy
 8005d5e:	607b      	str	r3, [r7, #4]
}
 8005d60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005d62:	f7fe ff01 	bl	8004b68 <xTaskIncrementTick>
 8005d66:	4603      	mov	r3, r0
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d003      	beq.n	8005d74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005d6c:	4b06      	ldr	r3, [pc, #24]	@ (8005d88 <SysTick_Handler+0x40>)
 8005d6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d72:	601a      	str	r2, [r3, #0]
 8005d74:	2300      	movs	r3, #0
 8005d76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	f383 8811 	msr	BASEPRI, r3
}
 8005d7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005d80:	bf00      	nop
 8005d82:	3708      	adds	r7, #8
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}
 8005d88:	e000ed04 	.word	0xe000ed04

08005d8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005d90:	4b0b      	ldr	r3, [pc, #44]	@ (8005dc0 <vPortSetupTimerInterrupt+0x34>)
 8005d92:	2200      	movs	r2, #0
 8005d94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005d96:	4b0b      	ldr	r3, [pc, #44]	@ (8005dc4 <vPortSetupTimerInterrupt+0x38>)
 8005d98:	2200      	movs	r2, #0
 8005d9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8005dc8 <vPortSetupTimerInterrupt+0x3c>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a0a      	ldr	r2, [pc, #40]	@ (8005dcc <vPortSetupTimerInterrupt+0x40>)
 8005da2:	fba2 2303 	umull	r2, r3, r2, r3
 8005da6:	099b      	lsrs	r3, r3, #6
 8005da8:	4a09      	ldr	r2, [pc, #36]	@ (8005dd0 <vPortSetupTimerInterrupt+0x44>)
 8005daa:	3b01      	subs	r3, #1
 8005dac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005dae:	4b04      	ldr	r3, [pc, #16]	@ (8005dc0 <vPortSetupTimerInterrupt+0x34>)
 8005db0:	2207      	movs	r2, #7
 8005db2:	601a      	str	r2, [r3, #0]
}
 8005db4:	bf00      	nop
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	e000e010 	.word	0xe000e010
 8005dc4:	e000e018 	.word	0xe000e018
 8005dc8:	20000004 	.word	0x20000004
 8005dcc:	10624dd3 	.word	0x10624dd3
 8005dd0:	e000e014 	.word	0xe000e014

08005dd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005dd4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005de4 <vPortEnableVFP+0x10>
 8005dd8:	6801      	ldr	r1, [r0, #0]
 8005dda:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005dde:	6001      	str	r1, [r0, #0]
 8005de0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005de2:	bf00      	nop
 8005de4:	e000ed88 	.word	0xe000ed88

08005de8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005de8:	b480      	push	{r7}
 8005dea:	b085      	sub	sp, #20
 8005dec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005dee:	f3ef 8305 	mrs	r3, IPSR
 8005df2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2b0f      	cmp	r3, #15
 8005df8:	d915      	bls.n	8005e26 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005dfa:	4a18      	ldr	r2, [pc, #96]	@ (8005e5c <vPortValidateInterruptPriority+0x74>)
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	4413      	add	r3, r2
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005e04:	4b16      	ldr	r3, [pc, #88]	@ (8005e60 <vPortValidateInterruptPriority+0x78>)
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	7afa      	ldrb	r2, [r7, #11]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d20b      	bcs.n	8005e26 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e12:	f383 8811 	msr	BASEPRI, r3
 8005e16:	f3bf 8f6f 	isb	sy
 8005e1a:	f3bf 8f4f 	dsb	sy
 8005e1e:	607b      	str	r3, [r7, #4]
}
 8005e20:	bf00      	nop
 8005e22:	bf00      	nop
 8005e24:	e7fd      	b.n	8005e22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005e26:	4b0f      	ldr	r3, [pc, #60]	@ (8005e64 <vPortValidateInterruptPriority+0x7c>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005e2e:	4b0e      	ldr	r3, [pc, #56]	@ (8005e68 <vPortValidateInterruptPriority+0x80>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d90b      	bls.n	8005e4e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e3a:	f383 8811 	msr	BASEPRI, r3
 8005e3e:	f3bf 8f6f 	isb	sy
 8005e42:	f3bf 8f4f 	dsb	sy
 8005e46:	603b      	str	r3, [r7, #0]
}
 8005e48:	bf00      	nop
 8005e4a:	bf00      	nop
 8005e4c:	e7fd      	b.n	8005e4a <vPortValidateInterruptPriority+0x62>
	}
 8005e4e:	bf00      	nop
 8005e50:	3714      	adds	r7, #20
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop
 8005e5c:	e000e3f0 	.word	0xe000e3f0
 8005e60:	20000368 	.word	0x20000368
 8005e64:	e000ed0c 	.word	0xe000ed0c
 8005e68:	2000036c 	.word	0x2000036c

08005e6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b08a      	sub	sp, #40	@ 0x28
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005e74:	2300      	movs	r3, #0
 8005e76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005e78:	f7fe fdba 	bl	80049f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005e7c:	4b5a      	ldr	r3, [pc, #360]	@ (8005fe8 <pvPortMalloc+0x17c>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d101      	bne.n	8005e88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005e84:	f000 f916 	bl	80060b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005e88:	4b58      	ldr	r3, [pc, #352]	@ (8005fec <pvPortMalloc+0x180>)
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4013      	ands	r3, r2
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	f040 8090 	bne.w	8005fb6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d01e      	beq.n	8005eda <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005e9c:	2208      	movs	r2, #8
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4413      	add	r3, r2
 8005ea2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f003 0307 	and.w	r3, r3, #7
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d015      	beq.n	8005eda <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f023 0307 	bic.w	r3, r3, #7
 8005eb4:	3308      	adds	r3, #8
 8005eb6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f003 0307 	and.w	r3, r3, #7
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00b      	beq.n	8005eda <pvPortMalloc+0x6e>
	__asm volatile
 8005ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ec6:	f383 8811 	msr	BASEPRI, r3
 8005eca:	f3bf 8f6f 	isb	sy
 8005ece:	f3bf 8f4f 	dsb	sy
 8005ed2:	617b      	str	r3, [r7, #20]
}
 8005ed4:	bf00      	nop
 8005ed6:	bf00      	nop
 8005ed8:	e7fd      	b.n	8005ed6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d06a      	beq.n	8005fb6 <pvPortMalloc+0x14a>
 8005ee0:	4b43      	ldr	r3, [pc, #268]	@ (8005ff0 <pvPortMalloc+0x184>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d865      	bhi.n	8005fb6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005eea:	4b42      	ldr	r3, [pc, #264]	@ (8005ff4 <pvPortMalloc+0x188>)
 8005eec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005eee:	4b41      	ldr	r3, [pc, #260]	@ (8005ff4 <pvPortMalloc+0x188>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ef4:	e004      	b.n	8005f00 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d903      	bls.n	8005f12 <pvPortMalloc+0xa6>
 8005f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d1f1      	bne.n	8005ef6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005f12:	4b35      	ldr	r3, [pc, #212]	@ (8005fe8 <pvPortMalloc+0x17c>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d04c      	beq.n	8005fb6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005f1c:	6a3b      	ldr	r3, [r7, #32]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2208      	movs	r2, #8
 8005f22:	4413      	add	r3, r2
 8005f24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	6a3b      	ldr	r3, [r7, #32]
 8005f2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f30:	685a      	ldr	r2, [r3, #4]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	1ad2      	subs	r2, r2, r3
 8005f36:	2308      	movs	r3, #8
 8005f38:	005b      	lsls	r3, r3, #1
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d920      	bls.n	8005f80 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005f3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	4413      	add	r3, r2
 8005f44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	f003 0307 	and.w	r3, r3, #7
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00b      	beq.n	8005f68 <pvPortMalloc+0xfc>
	__asm volatile
 8005f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f54:	f383 8811 	msr	BASEPRI, r3
 8005f58:	f3bf 8f6f 	isb	sy
 8005f5c:	f3bf 8f4f 	dsb	sy
 8005f60:	613b      	str	r3, [r7, #16]
}
 8005f62:	bf00      	nop
 8005f64:	bf00      	nop
 8005f66:	e7fd      	b.n	8005f64 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f6a:	685a      	ldr	r2, [r3, #4]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	1ad2      	subs	r2, r2, r3
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005f7a:	69b8      	ldr	r0, [r7, #24]
 8005f7c:	f000 f8fc 	bl	8006178 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005f80:	4b1b      	ldr	r3, [pc, #108]	@ (8005ff0 <pvPortMalloc+0x184>)
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	1ad3      	subs	r3, r2, r3
 8005f8a:	4a19      	ldr	r2, [pc, #100]	@ (8005ff0 <pvPortMalloc+0x184>)
 8005f8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005f8e:	4b18      	ldr	r3, [pc, #96]	@ (8005ff0 <pvPortMalloc+0x184>)
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	4b19      	ldr	r3, [pc, #100]	@ (8005ff8 <pvPortMalloc+0x18c>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d203      	bcs.n	8005fa2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005f9a:	4b15      	ldr	r3, [pc, #84]	@ (8005ff0 <pvPortMalloc+0x184>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a16      	ldr	r2, [pc, #88]	@ (8005ff8 <pvPortMalloc+0x18c>)
 8005fa0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa4:	685a      	ldr	r2, [r3, #4]
 8005fa6:	4b11      	ldr	r3, [pc, #68]	@ (8005fec <pvPortMalloc+0x180>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	431a      	orrs	r2, r3
 8005fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005fb6:	f7fe fd29 	bl	8004a0c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	f003 0307 	and.w	r3, r3, #7
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d00b      	beq.n	8005fdc <pvPortMalloc+0x170>
	__asm volatile
 8005fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fc8:	f383 8811 	msr	BASEPRI, r3
 8005fcc:	f3bf 8f6f 	isb	sy
 8005fd0:	f3bf 8f4f 	dsb	sy
 8005fd4:	60fb      	str	r3, [r7, #12]
}
 8005fd6:	bf00      	nop
 8005fd8:	bf00      	nop
 8005fda:	e7fd      	b.n	8005fd8 <pvPortMalloc+0x16c>
	return pvReturn;
 8005fdc:	69fb      	ldr	r3, [r7, #28]
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3728      	adds	r7, #40	@ 0x28
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	20012f78 	.word	0x20012f78
 8005fec:	20012f84 	.word	0x20012f84
 8005ff0:	20012f7c 	.word	0x20012f7c
 8005ff4:	20012f70 	.word	0x20012f70
 8005ff8:	20012f80 	.word	0x20012f80

08005ffc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b086      	sub	sp, #24
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d04a      	beq.n	80060a4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800600e:	2308      	movs	r3, #8
 8006010:	425b      	negs	r3, r3
 8006012:	697a      	ldr	r2, [r7, #20]
 8006014:	4413      	add	r3, r2
 8006016:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	685a      	ldr	r2, [r3, #4]
 8006020:	4b22      	ldr	r3, [pc, #136]	@ (80060ac <vPortFree+0xb0>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4013      	ands	r3, r2
 8006026:	2b00      	cmp	r3, #0
 8006028:	d10b      	bne.n	8006042 <vPortFree+0x46>
	__asm volatile
 800602a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800602e:	f383 8811 	msr	BASEPRI, r3
 8006032:	f3bf 8f6f 	isb	sy
 8006036:	f3bf 8f4f 	dsb	sy
 800603a:	60fb      	str	r3, [r7, #12]
}
 800603c:	bf00      	nop
 800603e:	bf00      	nop
 8006040:	e7fd      	b.n	800603e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00b      	beq.n	8006062 <vPortFree+0x66>
	__asm volatile
 800604a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800604e:	f383 8811 	msr	BASEPRI, r3
 8006052:	f3bf 8f6f 	isb	sy
 8006056:	f3bf 8f4f 	dsb	sy
 800605a:	60bb      	str	r3, [r7, #8]
}
 800605c:	bf00      	nop
 800605e:	bf00      	nop
 8006060:	e7fd      	b.n	800605e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	685a      	ldr	r2, [r3, #4]
 8006066:	4b11      	ldr	r3, [pc, #68]	@ (80060ac <vPortFree+0xb0>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4013      	ands	r3, r2
 800606c:	2b00      	cmp	r3, #0
 800606e:	d019      	beq.n	80060a4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d115      	bne.n	80060a4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	685a      	ldr	r2, [r3, #4]
 800607c:	4b0b      	ldr	r3, [pc, #44]	@ (80060ac <vPortFree+0xb0>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	43db      	mvns	r3, r3
 8006082:	401a      	ands	r2, r3
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006088:	f7fe fcb2 	bl	80049f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	685a      	ldr	r2, [r3, #4]
 8006090:	4b07      	ldr	r3, [pc, #28]	@ (80060b0 <vPortFree+0xb4>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4413      	add	r3, r2
 8006096:	4a06      	ldr	r2, [pc, #24]	@ (80060b0 <vPortFree+0xb4>)
 8006098:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800609a:	6938      	ldr	r0, [r7, #16]
 800609c:	f000 f86c 	bl	8006178 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80060a0:	f7fe fcb4 	bl	8004a0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80060a4:	bf00      	nop
 80060a6:	3718      	adds	r7, #24
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}
 80060ac:	20012f84 	.word	0x20012f84
 80060b0:	20012f7c 	.word	0x20012f7c

080060b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80060b4:	b480      	push	{r7}
 80060b6:	b085      	sub	sp, #20
 80060b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80060ba:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 80060be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80060c0:	4b27      	ldr	r3, [pc, #156]	@ (8006160 <prvHeapInit+0xac>)
 80060c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f003 0307 	and.w	r3, r3, #7
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d00c      	beq.n	80060e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	3307      	adds	r3, #7
 80060d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f023 0307 	bic.w	r3, r3, #7
 80060da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80060dc:	68ba      	ldr	r2, [r7, #8]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	4a1f      	ldr	r2, [pc, #124]	@ (8006160 <prvHeapInit+0xac>)
 80060e4:	4413      	add	r3, r2
 80060e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80060ec:	4a1d      	ldr	r2, [pc, #116]	@ (8006164 <prvHeapInit+0xb0>)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80060f2:	4b1c      	ldr	r3, [pc, #112]	@ (8006164 <prvHeapInit+0xb0>)
 80060f4:	2200      	movs	r2, #0
 80060f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	68ba      	ldr	r2, [r7, #8]
 80060fc:	4413      	add	r3, r2
 80060fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006100:	2208      	movs	r2, #8
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	1a9b      	subs	r3, r3, r2
 8006106:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f023 0307 	bic.w	r3, r3, #7
 800610e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	4a15      	ldr	r2, [pc, #84]	@ (8006168 <prvHeapInit+0xb4>)
 8006114:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006116:	4b14      	ldr	r3, [pc, #80]	@ (8006168 <prvHeapInit+0xb4>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2200      	movs	r2, #0
 800611c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800611e:	4b12      	ldr	r3, [pc, #72]	@ (8006168 <prvHeapInit+0xb4>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	2200      	movs	r2, #0
 8006124:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	1ad2      	subs	r2, r2, r3
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006134:	4b0c      	ldr	r3, [pc, #48]	@ (8006168 <prvHeapInit+0xb4>)
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	4a0a      	ldr	r2, [pc, #40]	@ (800616c <prvHeapInit+0xb8>)
 8006142:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	4a09      	ldr	r2, [pc, #36]	@ (8006170 <prvHeapInit+0xbc>)
 800614a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800614c:	4b09      	ldr	r3, [pc, #36]	@ (8006174 <prvHeapInit+0xc0>)
 800614e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006152:	601a      	str	r2, [r3, #0]
}
 8006154:	bf00      	nop
 8006156:	3714      	adds	r7, #20
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr
 8006160:	20000370 	.word	0x20000370
 8006164:	20012f70 	.word	0x20012f70
 8006168:	20012f78 	.word	0x20012f78
 800616c:	20012f80 	.word	0x20012f80
 8006170:	20012f7c 	.word	0x20012f7c
 8006174:	20012f84 	.word	0x20012f84

08006178 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006178:	b480      	push	{r7}
 800617a:	b085      	sub	sp, #20
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006180:	4b28      	ldr	r3, [pc, #160]	@ (8006224 <prvInsertBlockIntoFreeList+0xac>)
 8006182:	60fb      	str	r3, [r7, #12]
 8006184:	e002      	b.n	800618c <prvInsertBlockIntoFreeList+0x14>
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	60fb      	str	r3, [r7, #12]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	429a      	cmp	r2, r3
 8006194:	d8f7      	bhi.n	8006186 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	68ba      	ldr	r2, [r7, #8]
 80061a0:	4413      	add	r3, r2
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d108      	bne.n	80061ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	685a      	ldr	r2, [r3, #4]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	441a      	add	r2, r3
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	68ba      	ldr	r2, [r7, #8]
 80061c4:	441a      	add	r2, r3
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d118      	bne.n	8006200 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	4b15      	ldr	r3, [pc, #84]	@ (8006228 <prvInsertBlockIntoFreeList+0xb0>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d00d      	beq.n	80061f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	685a      	ldr	r2, [r3, #4]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	441a      	add	r2, r3
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	601a      	str	r2, [r3, #0]
 80061f4:	e008      	b.n	8006208 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80061f6:	4b0c      	ldr	r3, [pc, #48]	@ (8006228 <prvInsertBlockIntoFreeList+0xb0>)
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	601a      	str	r2, [r3, #0]
 80061fe:	e003      	b.n	8006208 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	429a      	cmp	r2, r3
 800620e:	d002      	beq.n	8006216 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006216:	bf00      	nop
 8006218:	3714      	adds	r7, #20
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop
 8006224:	20012f70 	.word	0x20012f70
 8006228:	20012f78 	.word	0x20012f78

0800622c <siprintf>:
 800622c:	b40e      	push	{r1, r2, r3}
 800622e:	b500      	push	{lr}
 8006230:	b09c      	sub	sp, #112	@ 0x70
 8006232:	ab1d      	add	r3, sp, #116	@ 0x74
 8006234:	9002      	str	r0, [sp, #8]
 8006236:	9006      	str	r0, [sp, #24]
 8006238:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800623c:	4809      	ldr	r0, [pc, #36]	@ (8006264 <siprintf+0x38>)
 800623e:	9107      	str	r1, [sp, #28]
 8006240:	9104      	str	r1, [sp, #16]
 8006242:	4909      	ldr	r1, [pc, #36]	@ (8006268 <siprintf+0x3c>)
 8006244:	f853 2b04 	ldr.w	r2, [r3], #4
 8006248:	9105      	str	r1, [sp, #20]
 800624a:	6800      	ldr	r0, [r0, #0]
 800624c:	9301      	str	r3, [sp, #4]
 800624e:	a902      	add	r1, sp, #8
 8006250:	f000 f9a2 	bl	8006598 <_svfiprintf_r>
 8006254:	9b02      	ldr	r3, [sp, #8]
 8006256:	2200      	movs	r2, #0
 8006258:	701a      	strb	r2, [r3, #0]
 800625a:	b01c      	add	sp, #112	@ 0x70
 800625c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006260:	b003      	add	sp, #12
 8006262:	4770      	bx	lr
 8006264:	20000014 	.word	0x20000014
 8006268:	ffff0208 	.word	0xffff0208

0800626c <memset>:
 800626c:	4402      	add	r2, r0
 800626e:	4603      	mov	r3, r0
 8006270:	4293      	cmp	r3, r2
 8006272:	d100      	bne.n	8006276 <memset+0xa>
 8006274:	4770      	bx	lr
 8006276:	f803 1b01 	strb.w	r1, [r3], #1
 800627a:	e7f9      	b.n	8006270 <memset+0x4>

0800627c <__errno>:
 800627c:	4b01      	ldr	r3, [pc, #4]	@ (8006284 <__errno+0x8>)
 800627e:	6818      	ldr	r0, [r3, #0]
 8006280:	4770      	bx	lr
 8006282:	bf00      	nop
 8006284:	20000014 	.word	0x20000014

08006288 <__libc_init_array>:
 8006288:	b570      	push	{r4, r5, r6, lr}
 800628a:	4d0d      	ldr	r5, [pc, #52]	@ (80062c0 <__libc_init_array+0x38>)
 800628c:	4c0d      	ldr	r4, [pc, #52]	@ (80062c4 <__libc_init_array+0x3c>)
 800628e:	1b64      	subs	r4, r4, r5
 8006290:	10a4      	asrs	r4, r4, #2
 8006292:	2600      	movs	r6, #0
 8006294:	42a6      	cmp	r6, r4
 8006296:	d109      	bne.n	80062ac <__libc_init_array+0x24>
 8006298:	4d0b      	ldr	r5, [pc, #44]	@ (80062c8 <__libc_init_array+0x40>)
 800629a:	4c0c      	ldr	r4, [pc, #48]	@ (80062cc <__libc_init_array+0x44>)
 800629c:	f000 fc66 	bl	8006b6c <_init>
 80062a0:	1b64      	subs	r4, r4, r5
 80062a2:	10a4      	asrs	r4, r4, #2
 80062a4:	2600      	movs	r6, #0
 80062a6:	42a6      	cmp	r6, r4
 80062a8:	d105      	bne.n	80062b6 <__libc_init_array+0x2e>
 80062aa:	bd70      	pop	{r4, r5, r6, pc}
 80062ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80062b0:	4798      	blx	r3
 80062b2:	3601      	adds	r6, #1
 80062b4:	e7ee      	b.n	8006294 <__libc_init_array+0xc>
 80062b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80062ba:	4798      	blx	r3
 80062bc:	3601      	adds	r6, #1
 80062be:	e7f2      	b.n	80062a6 <__libc_init_array+0x1e>
 80062c0:	08006cc8 	.word	0x08006cc8
 80062c4:	08006cc8 	.word	0x08006cc8
 80062c8:	08006cc8 	.word	0x08006cc8
 80062cc:	08006ccc 	.word	0x08006ccc

080062d0 <__retarget_lock_acquire_recursive>:
 80062d0:	4770      	bx	lr

080062d2 <__retarget_lock_release_recursive>:
 80062d2:	4770      	bx	lr

080062d4 <memcpy>:
 80062d4:	440a      	add	r2, r1
 80062d6:	4291      	cmp	r1, r2
 80062d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80062dc:	d100      	bne.n	80062e0 <memcpy+0xc>
 80062de:	4770      	bx	lr
 80062e0:	b510      	push	{r4, lr}
 80062e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062ea:	4291      	cmp	r1, r2
 80062ec:	d1f9      	bne.n	80062e2 <memcpy+0xe>
 80062ee:	bd10      	pop	{r4, pc}

080062f0 <_free_r>:
 80062f0:	b538      	push	{r3, r4, r5, lr}
 80062f2:	4605      	mov	r5, r0
 80062f4:	2900      	cmp	r1, #0
 80062f6:	d041      	beq.n	800637c <_free_r+0x8c>
 80062f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062fc:	1f0c      	subs	r4, r1, #4
 80062fe:	2b00      	cmp	r3, #0
 8006300:	bfb8      	it	lt
 8006302:	18e4      	addlt	r4, r4, r3
 8006304:	f000 f8e0 	bl	80064c8 <__malloc_lock>
 8006308:	4a1d      	ldr	r2, [pc, #116]	@ (8006380 <_free_r+0x90>)
 800630a:	6813      	ldr	r3, [r2, #0]
 800630c:	b933      	cbnz	r3, 800631c <_free_r+0x2c>
 800630e:	6063      	str	r3, [r4, #4]
 8006310:	6014      	str	r4, [r2, #0]
 8006312:	4628      	mov	r0, r5
 8006314:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006318:	f000 b8dc 	b.w	80064d4 <__malloc_unlock>
 800631c:	42a3      	cmp	r3, r4
 800631e:	d908      	bls.n	8006332 <_free_r+0x42>
 8006320:	6820      	ldr	r0, [r4, #0]
 8006322:	1821      	adds	r1, r4, r0
 8006324:	428b      	cmp	r3, r1
 8006326:	bf01      	itttt	eq
 8006328:	6819      	ldreq	r1, [r3, #0]
 800632a:	685b      	ldreq	r3, [r3, #4]
 800632c:	1809      	addeq	r1, r1, r0
 800632e:	6021      	streq	r1, [r4, #0]
 8006330:	e7ed      	b.n	800630e <_free_r+0x1e>
 8006332:	461a      	mov	r2, r3
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	b10b      	cbz	r3, 800633c <_free_r+0x4c>
 8006338:	42a3      	cmp	r3, r4
 800633a:	d9fa      	bls.n	8006332 <_free_r+0x42>
 800633c:	6811      	ldr	r1, [r2, #0]
 800633e:	1850      	adds	r0, r2, r1
 8006340:	42a0      	cmp	r0, r4
 8006342:	d10b      	bne.n	800635c <_free_r+0x6c>
 8006344:	6820      	ldr	r0, [r4, #0]
 8006346:	4401      	add	r1, r0
 8006348:	1850      	adds	r0, r2, r1
 800634a:	4283      	cmp	r3, r0
 800634c:	6011      	str	r1, [r2, #0]
 800634e:	d1e0      	bne.n	8006312 <_free_r+0x22>
 8006350:	6818      	ldr	r0, [r3, #0]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	6053      	str	r3, [r2, #4]
 8006356:	4408      	add	r0, r1
 8006358:	6010      	str	r0, [r2, #0]
 800635a:	e7da      	b.n	8006312 <_free_r+0x22>
 800635c:	d902      	bls.n	8006364 <_free_r+0x74>
 800635e:	230c      	movs	r3, #12
 8006360:	602b      	str	r3, [r5, #0]
 8006362:	e7d6      	b.n	8006312 <_free_r+0x22>
 8006364:	6820      	ldr	r0, [r4, #0]
 8006366:	1821      	adds	r1, r4, r0
 8006368:	428b      	cmp	r3, r1
 800636a:	bf04      	itt	eq
 800636c:	6819      	ldreq	r1, [r3, #0]
 800636e:	685b      	ldreq	r3, [r3, #4]
 8006370:	6063      	str	r3, [r4, #4]
 8006372:	bf04      	itt	eq
 8006374:	1809      	addeq	r1, r1, r0
 8006376:	6021      	streq	r1, [r4, #0]
 8006378:	6054      	str	r4, [r2, #4]
 800637a:	e7ca      	b.n	8006312 <_free_r+0x22>
 800637c:	bd38      	pop	{r3, r4, r5, pc}
 800637e:	bf00      	nop
 8006380:	200130cc 	.word	0x200130cc

08006384 <sbrk_aligned>:
 8006384:	b570      	push	{r4, r5, r6, lr}
 8006386:	4e0f      	ldr	r6, [pc, #60]	@ (80063c4 <sbrk_aligned+0x40>)
 8006388:	460c      	mov	r4, r1
 800638a:	6831      	ldr	r1, [r6, #0]
 800638c:	4605      	mov	r5, r0
 800638e:	b911      	cbnz	r1, 8006396 <sbrk_aligned+0x12>
 8006390:	f000 fba6 	bl	8006ae0 <_sbrk_r>
 8006394:	6030      	str	r0, [r6, #0]
 8006396:	4621      	mov	r1, r4
 8006398:	4628      	mov	r0, r5
 800639a:	f000 fba1 	bl	8006ae0 <_sbrk_r>
 800639e:	1c43      	adds	r3, r0, #1
 80063a0:	d103      	bne.n	80063aa <sbrk_aligned+0x26>
 80063a2:	f04f 34ff 	mov.w	r4, #4294967295
 80063a6:	4620      	mov	r0, r4
 80063a8:	bd70      	pop	{r4, r5, r6, pc}
 80063aa:	1cc4      	adds	r4, r0, #3
 80063ac:	f024 0403 	bic.w	r4, r4, #3
 80063b0:	42a0      	cmp	r0, r4
 80063b2:	d0f8      	beq.n	80063a6 <sbrk_aligned+0x22>
 80063b4:	1a21      	subs	r1, r4, r0
 80063b6:	4628      	mov	r0, r5
 80063b8:	f000 fb92 	bl	8006ae0 <_sbrk_r>
 80063bc:	3001      	adds	r0, #1
 80063be:	d1f2      	bne.n	80063a6 <sbrk_aligned+0x22>
 80063c0:	e7ef      	b.n	80063a2 <sbrk_aligned+0x1e>
 80063c2:	bf00      	nop
 80063c4:	200130c8 	.word	0x200130c8

080063c8 <_malloc_r>:
 80063c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063cc:	1ccd      	adds	r5, r1, #3
 80063ce:	f025 0503 	bic.w	r5, r5, #3
 80063d2:	3508      	adds	r5, #8
 80063d4:	2d0c      	cmp	r5, #12
 80063d6:	bf38      	it	cc
 80063d8:	250c      	movcc	r5, #12
 80063da:	2d00      	cmp	r5, #0
 80063dc:	4606      	mov	r6, r0
 80063de:	db01      	blt.n	80063e4 <_malloc_r+0x1c>
 80063e0:	42a9      	cmp	r1, r5
 80063e2:	d904      	bls.n	80063ee <_malloc_r+0x26>
 80063e4:	230c      	movs	r3, #12
 80063e6:	6033      	str	r3, [r6, #0]
 80063e8:	2000      	movs	r0, #0
 80063ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80064c4 <_malloc_r+0xfc>
 80063f2:	f000 f869 	bl	80064c8 <__malloc_lock>
 80063f6:	f8d8 3000 	ldr.w	r3, [r8]
 80063fa:	461c      	mov	r4, r3
 80063fc:	bb44      	cbnz	r4, 8006450 <_malloc_r+0x88>
 80063fe:	4629      	mov	r1, r5
 8006400:	4630      	mov	r0, r6
 8006402:	f7ff ffbf 	bl	8006384 <sbrk_aligned>
 8006406:	1c43      	adds	r3, r0, #1
 8006408:	4604      	mov	r4, r0
 800640a:	d158      	bne.n	80064be <_malloc_r+0xf6>
 800640c:	f8d8 4000 	ldr.w	r4, [r8]
 8006410:	4627      	mov	r7, r4
 8006412:	2f00      	cmp	r7, #0
 8006414:	d143      	bne.n	800649e <_malloc_r+0xd6>
 8006416:	2c00      	cmp	r4, #0
 8006418:	d04b      	beq.n	80064b2 <_malloc_r+0xea>
 800641a:	6823      	ldr	r3, [r4, #0]
 800641c:	4639      	mov	r1, r7
 800641e:	4630      	mov	r0, r6
 8006420:	eb04 0903 	add.w	r9, r4, r3
 8006424:	f000 fb5c 	bl	8006ae0 <_sbrk_r>
 8006428:	4581      	cmp	r9, r0
 800642a:	d142      	bne.n	80064b2 <_malloc_r+0xea>
 800642c:	6821      	ldr	r1, [r4, #0]
 800642e:	1a6d      	subs	r5, r5, r1
 8006430:	4629      	mov	r1, r5
 8006432:	4630      	mov	r0, r6
 8006434:	f7ff ffa6 	bl	8006384 <sbrk_aligned>
 8006438:	3001      	adds	r0, #1
 800643a:	d03a      	beq.n	80064b2 <_malloc_r+0xea>
 800643c:	6823      	ldr	r3, [r4, #0]
 800643e:	442b      	add	r3, r5
 8006440:	6023      	str	r3, [r4, #0]
 8006442:	f8d8 3000 	ldr.w	r3, [r8]
 8006446:	685a      	ldr	r2, [r3, #4]
 8006448:	bb62      	cbnz	r2, 80064a4 <_malloc_r+0xdc>
 800644a:	f8c8 7000 	str.w	r7, [r8]
 800644e:	e00f      	b.n	8006470 <_malloc_r+0xa8>
 8006450:	6822      	ldr	r2, [r4, #0]
 8006452:	1b52      	subs	r2, r2, r5
 8006454:	d420      	bmi.n	8006498 <_malloc_r+0xd0>
 8006456:	2a0b      	cmp	r2, #11
 8006458:	d917      	bls.n	800648a <_malloc_r+0xc2>
 800645a:	1961      	adds	r1, r4, r5
 800645c:	42a3      	cmp	r3, r4
 800645e:	6025      	str	r5, [r4, #0]
 8006460:	bf18      	it	ne
 8006462:	6059      	strne	r1, [r3, #4]
 8006464:	6863      	ldr	r3, [r4, #4]
 8006466:	bf08      	it	eq
 8006468:	f8c8 1000 	streq.w	r1, [r8]
 800646c:	5162      	str	r2, [r4, r5]
 800646e:	604b      	str	r3, [r1, #4]
 8006470:	4630      	mov	r0, r6
 8006472:	f000 f82f 	bl	80064d4 <__malloc_unlock>
 8006476:	f104 000b 	add.w	r0, r4, #11
 800647a:	1d23      	adds	r3, r4, #4
 800647c:	f020 0007 	bic.w	r0, r0, #7
 8006480:	1ac2      	subs	r2, r0, r3
 8006482:	bf1c      	itt	ne
 8006484:	1a1b      	subne	r3, r3, r0
 8006486:	50a3      	strne	r3, [r4, r2]
 8006488:	e7af      	b.n	80063ea <_malloc_r+0x22>
 800648a:	6862      	ldr	r2, [r4, #4]
 800648c:	42a3      	cmp	r3, r4
 800648e:	bf0c      	ite	eq
 8006490:	f8c8 2000 	streq.w	r2, [r8]
 8006494:	605a      	strne	r2, [r3, #4]
 8006496:	e7eb      	b.n	8006470 <_malloc_r+0xa8>
 8006498:	4623      	mov	r3, r4
 800649a:	6864      	ldr	r4, [r4, #4]
 800649c:	e7ae      	b.n	80063fc <_malloc_r+0x34>
 800649e:	463c      	mov	r4, r7
 80064a0:	687f      	ldr	r7, [r7, #4]
 80064a2:	e7b6      	b.n	8006412 <_malloc_r+0x4a>
 80064a4:	461a      	mov	r2, r3
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	42a3      	cmp	r3, r4
 80064aa:	d1fb      	bne.n	80064a4 <_malloc_r+0xdc>
 80064ac:	2300      	movs	r3, #0
 80064ae:	6053      	str	r3, [r2, #4]
 80064b0:	e7de      	b.n	8006470 <_malloc_r+0xa8>
 80064b2:	230c      	movs	r3, #12
 80064b4:	6033      	str	r3, [r6, #0]
 80064b6:	4630      	mov	r0, r6
 80064b8:	f000 f80c 	bl	80064d4 <__malloc_unlock>
 80064bc:	e794      	b.n	80063e8 <_malloc_r+0x20>
 80064be:	6005      	str	r5, [r0, #0]
 80064c0:	e7d6      	b.n	8006470 <_malloc_r+0xa8>
 80064c2:	bf00      	nop
 80064c4:	200130cc 	.word	0x200130cc

080064c8 <__malloc_lock>:
 80064c8:	4801      	ldr	r0, [pc, #4]	@ (80064d0 <__malloc_lock+0x8>)
 80064ca:	f7ff bf01 	b.w	80062d0 <__retarget_lock_acquire_recursive>
 80064ce:	bf00      	nop
 80064d0:	200130c4 	.word	0x200130c4

080064d4 <__malloc_unlock>:
 80064d4:	4801      	ldr	r0, [pc, #4]	@ (80064dc <__malloc_unlock+0x8>)
 80064d6:	f7ff befc 	b.w	80062d2 <__retarget_lock_release_recursive>
 80064da:	bf00      	nop
 80064dc:	200130c4 	.word	0x200130c4

080064e0 <__ssputs_r>:
 80064e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064e4:	688e      	ldr	r6, [r1, #8]
 80064e6:	461f      	mov	r7, r3
 80064e8:	42be      	cmp	r6, r7
 80064ea:	680b      	ldr	r3, [r1, #0]
 80064ec:	4682      	mov	sl, r0
 80064ee:	460c      	mov	r4, r1
 80064f0:	4690      	mov	r8, r2
 80064f2:	d82d      	bhi.n	8006550 <__ssputs_r+0x70>
 80064f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80064f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80064fc:	d026      	beq.n	800654c <__ssputs_r+0x6c>
 80064fe:	6965      	ldr	r5, [r4, #20]
 8006500:	6909      	ldr	r1, [r1, #16]
 8006502:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006506:	eba3 0901 	sub.w	r9, r3, r1
 800650a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800650e:	1c7b      	adds	r3, r7, #1
 8006510:	444b      	add	r3, r9
 8006512:	106d      	asrs	r5, r5, #1
 8006514:	429d      	cmp	r5, r3
 8006516:	bf38      	it	cc
 8006518:	461d      	movcc	r5, r3
 800651a:	0553      	lsls	r3, r2, #21
 800651c:	d527      	bpl.n	800656e <__ssputs_r+0x8e>
 800651e:	4629      	mov	r1, r5
 8006520:	f7ff ff52 	bl	80063c8 <_malloc_r>
 8006524:	4606      	mov	r6, r0
 8006526:	b360      	cbz	r0, 8006582 <__ssputs_r+0xa2>
 8006528:	6921      	ldr	r1, [r4, #16]
 800652a:	464a      	mov	r2, r9
 800652c:	f7ff fed2 	bl	80062d4 <memcpy>
 8006530:	89a3      	ldrh	r3, [r4, #12]
 8006532:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006536:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800653a:	81a3      	strh	r3, [r4, #12]
 800653c:	6126      	str	r6, [r4, #16]
 800653e:	6165      	str	r5, [r4, #20]
 8006540:	444e      	add	r6, r9
 8006542:	eba5 0509 	sub.w	r5, r5, r9
 8006546:	6026      	str	r6, [r4, #0]
 8006548:	60a5      	str	r5, [r4, #8]
 800654a:	463e      	mov	r6, r7
 800654c:	42be      	cmp	r6, r7
 800654e:	d900      	bls.n	8006552 <__ssputs_r+0x72>
 8006550:	463e      	mov	r6, r7
 8006552:	6820      	ldr	r0, [r4, #0]
 8006554:	4632      	mov	r2, r6
 8006556:	4641      	mov	r1, r8
 8006558:	f000 faa8 	bl	8006aac <memmove>
 800655c:	68a3      	ldr	r3, [r4, #8]
 800655e:	1b9b      	subs	r3, r3, r6
 8006560:	60a3      	str	r3, [r4, #8]
 8006562:	6823      	ldr	r3, [r4, #0]
 8006564:	4433      	add	r3, r6
 8006566:	6023      	str	r3, [r4, #0]
 8006568:	2000      	movs	r0, #0
 800656a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800656e:	462a      	mov	r2, r5
 8006570:	f000 fac6 	bl	8006b00 <_realloc_r>
 8006574:	4606      	mov	r6, r0
 8006576:	2800      	cmp	r0, #0
 8006578:	d1e0      	bne.n	800653c <__ssputs_r+0x5c>
 800657a:	6921      	ldr	r1, [r4, #16]
 800657c:	4650      	mov	r0, sl
 800657e:	f7ff feb7 	bl	80062f0 <_free_r>
 8006582:	230c      	movs	r3, #12
 8006584:	f8ca 3000 	str.w	r3, [sl]
 8006588:	89a3      	ldrh	r3, [r4, #12]
 800658a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800658e:	81a3      	strh	r3, [r4, #12]
 8006590:	f04f 30ff 	mov.w	r0, #4294967295
 8006594:	e7e9      	b.n	800656a <__ssputs_r+0x8a>
	...

08006598 <_svfiprintf_r>:
 8006598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800659c:	4698      	mov	r8, r3
 800659e:	898b      	ldrh	r3, [r1, #12]
 80065a0:	061b      	lsls	r3, r3, #24
 80065a2:	b09d      	sub	sp, #116	@ 0x74
 80065a4:	4607      	mov	r7, r0
 80065a6:	460d      	mov	r5, r1
 80065a8:	4614      	mov	r4, r2
 80065aa:	d510      	bpl.n	80065ce <_svfiprintf_r+0x36>
 80065ac:	690b      	ldr	r3, [r1, #16]
 80065ae:	b973      	cbnz	r3, 80065ce <_svfiprintf_r+0x36>
 80065b0:	2140      	movs	r1, #64	@ 0x40
 80065b2:	f7ff ff09 	bl	80063c8 <_malloc_r>
 80065b6:	6028      	str	r0, [r5, #0]
 80065b8:	6128      	str	r0, [r5, #16]
 80065ba:	b930      	cbnz	r0, 80065ca <_svfiprintf_r+0x32>
 80065bc:	230c      	movs	r3, #12
 80065be:	603b      	str	r3, [r7, #0]
 80065c0:	f04f 30ff 	mov.w	r0, #4294967295
 80065c4:	b01d      	add	sp, #116	@ 0x74
 80065c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065ca:	2340      	movs	r3, #64	@ 0x40
 80065cc:	616b      	str	r3, [r5, #20]
 80065ce:	2300      	movs	r3, #0
 80065d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80065d2:	2320      	movs	r3, #32
 80065d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80065d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80065dc:	2330      	movs	r3, #48	@ 0x30
 80065de:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800677c <_svfiprintf_r+0x1e4>
 80065e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80065e6:	f04f 0901 	mov.w	r9, #1
 80065ea:	4623      	mov	r3, r4
 80065ec:	469a      	mov	sl, r3
 80065ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065f2:	b10a      	cbz	r2, 80065f8 <_svfiprintf_r+0x60>
 80065f4:	2a25      	cmp	r2, #37	@ 0x25
 80065f6:	d1f9      	bne.n	80065ec <_svfiprintf_r+0x54>
 80065f8:	ebba 0b04 	subs.w	fp, sl, r4
 80065fc:	d00b      	beq.n	8006616 <_svfiprintf_r+0x7e>
 80065fe:	465b      	mov	r3, fp
 8006600:	4622      	mov	r2, r4
 8006602:	4629      	mov	r1, r5
 8006604:	4638      	mov	r0, r7
 8006606:	f7ff ff6b 	bl	80064e0 <__ssputs_r>
 800660a:	3001      	adds	r0, #1
 800660c:	f000 80a7 	beq.w	800675e <_svfiprintf_r+0x1c6>
 8006610:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006612:	445a      	add	r2, fp
 8006614:	9209      	str	r2, [sp, #36]	@ 0x24
 8006616:	f89a 3000 	ldrb.w	r3, [sl]
 800661a:	2b00      	cmp	r3, #0
 800661c:	f000 809f 	beq.w	800675e <_svfiprintf_r+0x1c6>
 8006620:	2300      	movs	r3, #0
 8006622:	f04f 32ff 	mov.w	r2, #4294967295
 8006626:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800662a:	f10a 0a01 	add.w	sl, sl, #1
 800662e:	9304      	str	r3, [sp, #16]
 8006630:	9307      	str	r3, [sp, #28]
 8006632:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006636:	931a      	str	r3, [sp, #104]	@ 0x68
 8006638:	4654      	mov	r4, sl
 800663a:	2205      	movs	r2, #5
 800663c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006640:	484e      	ldr	r0, [pc, #312]	@ (800677c <_svfiprintf_r+0x1e4>)
 8006642:	f7f9 fdcd 	bl	80001e0 <memchr>
 8006646:	9a04      	ldr	r2, [sp, #16]
 8006648:	b9d8      	cbnz	r0, 8006682 <_svfiprintf_r+0xea>
 800664a:	06d0      	lsls	r0, r2, #27
 800664c:	bf44      	itt	mi
 800664e:	2320      	movmi	r3, #32
 8006650:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006654:	0711      	lsls	r1, r2, #28
 8006656:	bf44      	itt	mi
 8006658:	232b      	movmi	r3, #43	@ 0x2b
 800665a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800665e:	f89a 3000 	ldrb.w	r3, [sl]
 8006662:	2b2a      	cmp	r3, #42	@ 0x2a
 8006664:	d015      	beq.n	8006692 <_svfiprintf_r+0xfa>
 8006666:	9a07      	ldr	r2, [sp, #28]
 8006668:	4654      	mov	r4, sl
 800666a:	2000      	movs	r0, #0
 800666c:	f04f 0c0a 	mov.w	ip, #10
 8006670:	4621      	mov	r1, r4
 8006672:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006676:	3b30      	subs	r3, #48	@ 0x30
 8006678:	2b09      	cmp	r3, #9
 800667a:	d94b      	bls.n	8006714 <_svfiprintf_r+0x17c>
 800667c:	b1b0      	cbz	r0, 80066ac <_svfiprintf_r+0x114>
 800667e:	9207      	str	r2, [sp, #28]
 8006680:	e014      	b.n	80066ac <_svfiprintf_r+0x114>
 8006682:	eba0 0308 	sub.w	r3, r0, r8
 8006686:	fa09 f303 	lsl.w	r3, r9, r3
 800668a:	4313      	orrs	r3, r2
 800668c:	9304      	str	r3, [sp, #16]
 800668e:	46a2      	mov	sl, r4
 8006690:	e7d2      	b.n	8006638 <_svfiprintf_r+0xa0>
 8006692:	9b03      	ldr	r3, [sp, #12]
 8006694:	1d19      	adds	r1, r3, #4
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	9103      	str	r1, [sp, #12]
 800669a:	2b00      	cmp	r3, #0
 800669c:	bfbb      	ittet	lt
 800669e:	425b      	neglt	r3, r3
 80066a0:	f042 0202 	orrlt.w	r2, r2, #2
 80066a4:	9307      	strge	r3, [sp, #28]
 80066a6:	9307      	strlt	r3, [sp, #28]
 80066a8:	bfb8      	it	lt
 80066aa:	9204      	strlt	r2, [sp, #16]
 80066ac:	7823      	ldrb	r3, [r4, #0]
 80066ae:	2b2e      	cmp	r3, #46	@ 0x2e
 80066b0:	d10a      	bne.n	80066c8 <_svfiprintf_r+0x130>
 80066b2:	7863      	ldrb	r3, [r4, #1]
 80066b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80066b6:	d132      	bne.n	800671e <_svfiprintf_r+0x186>
 80066b8:	9b03      	ldr	r3, [sp, #12]
 80066ba:	1d1a      	adds	r2, r3, #4
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	9203      	str	r2, [sp, #12]
 80066c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80066c4:	3402      	adds	r4, #2
 80066c6:	9305      	str	r3, [sp, #20]
 80066c8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800678c <_svfiprintf_r+0x1f4>
 80066cc:	7821      	ldrb	r1, [r4, #0]
 80066ce:	2203      	movs	r2, #3
 80066d0:	4650      	mov	r0, sl
 80066d2:	f7f9 fd85 	bl	80001e0 <memchr>
 80066d6:	b138      	cbz	r0, 80066e8 <_svfiprintf_r+0x150>
 80066d8:	9b04      	ldr	r3, [sp, #16]
 80066da:	eba0 000a 	sub.w	r0, r0, sl
 80066de:	2240      	movs	r2, #64	@ 0x40
 80066e0:	4082      	lsls	r2, r0
 80066e2:	4313      	orrs	r3, r2
 80066e4:	3401      	adds	r4, #1
 80066e6:	9304      	str	r3, [sp, #16]
 80066e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066ec:	4824      	ldr	r0, [pc, #144]	@ (8006780 <_svfiprintf_r+0x1e8>)
 80066ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80066f2:	2206      	movs	r2, #6
 80066f4:	f7f9 fd74 	bl	80001e0 <memchr>
 80066f8:	2800      	cmp	r0, #0
 80066fa:	d036      	beq.n	800676a <_svfiprintf_r+0x1d2>
 80066fc:	4b21      	ldr	r3, [pc, #132]	@ (8006784 <_svfiprintf_r+0x1ec>)
 80066fe:	bb1b      	cbnz	r3, 8006748 <_svfiprintf_r+0x1b0>
 8006700:	9b03      	ldr	r3, [sp, #12]
 8006702:	3307      	adds	r3, #7
 8006704:	f023 0307 	bic.w	r3, r3, #7
 8006708:	3308      	adds	r3, #8
 800670a:	9303      	str	r3, [sp, #12]
 800670c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800670e:	4433      	add	r3, r6
 8006710:	9309      	str	r3, [sp, #36]	@ 0x24
 8006712:	e76a      	b.n	80065ea <_svfiprintf_r+0x52>
 8006714:	fb0c 3202 	mla	r2, ip, r2, r3
 8006718:	460c      	mov	r4, r1
 800671a:	2001      	movs	r0, #1
 800671c:	e7a8      	b.n	8006670 <_svfiprintf_r+0xd8>
 800671e:	2300      	movs	r3, #0
 8006720:	3401      	adds	r4, #1
 8006722:	9305      	str	r3, [sp, #20]
 8006724:	4619      	mov	r1, r3
 8006726:	f04f 0c0a 	mov.w	ip, #10
 800672a:	4620      	mov	r0, r4
 800672c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006730:	3a30      	subs	r2, #48	@ 0x30
 8006732:	2a09      	cmp	r2, #9
 8006734:	d903      	bls.n	800673e <_svfiprintf_r+0x1a6>
 8006736:	2b00      	cmp	r3, #0
 8006738:	d0c6      	beq.n	80066c8 <_svfiprintf_r+0x130>
 800673a:	9105      	str	r1, [sp, #20]
 800673c:	e7c4      	b.n	80066c8 <_svfiprintf_r+0x130>
 800673e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006742:	4604      	mov	r4, r0
 8006744:	2301      	movs	r3, #1
 8006746:	e7f0      	b.n	800672a <_svfiprintf_r+0x192>
 8006748:	ab03      	add	r3, sp, #12
 800674a:	9300      	str	r3, [sp, #0]
 800674c:	462a      	mov	r2, r5
 800674e:	4b0e      	ldr	r3, [pc, #56]	@ (8006788 <_svfiprintf_r+0x1f0>)
 8006750:	a904      	add	r1, sp, #16
 8006752:	4638      	mov	r0, r7
 8006754:	f3af 8000 	nop.w
 8006758:	1c42      	adds	r2, r0, #1
 800675a:	4606      	mov	r6, r0
 800675c:	d1d6      	bne.n	800670c <_svfiprintf_r+0x174>
 800675e:	89ab      	ldrh	r3, [r5, #12]
 8006760:	065b      	lsls	r3, r3, #25
 8006762:	f53f af2d 	bmi.w	80065c0 <_svfiprintf_r+0x28>
 8006766:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006768:	e72c      	b.n	80065c4 <_svfiprintf_r+0x2c>
 800676a:	ab03      	add	r3, sp, #12
 800676c:	9300      	str	r3, [sp, #0]
 800676e:	462a      	mov	r2, r5
 8006770:	4b05      	ldr	r3, [pc, #20]	@ (8006788 <_svfiprintf_r+0x1f0>)
 8006772:	a904      	add	r1, sp, #16
 8006774:	4638      	mov	r0, r7
 8006776:	f000 f879 	bl	800686c <_printf_i>
 800677a:	e7ed      	b.n	8006758 <_svfiprintf_r+0x1c0>
 800677c:	08006c8c 	.word	0x08006c8c
 8006780:	08006c96 	.word	0x08006c96
 8006784:	00000000 	.word	0x00000000
 8006788:	080064e1 	.word	0x080064e1
 800678c:	08006c92 	.word	0x08006c92

08006790 <_printf_common>:
 8006790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006794:	4616      	mov	r6, r2
 8006796:	4698      	mov	r8, r3
 8006798:	688a      	ldr	r2, [r1, #8]
 800679a:	690b      	ldr	r3, [r1, #16]
 800679c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80067a0:	4293      	cmp	r3, r2
 80067a2:	bfb8      	it	lt
 80067a4:	4613      	movlt	r3, r2
 80067a6:	6033      	str	r3, [r6, #0]
 80067a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80067ac:	4607      	mov	r7, r0
 80067ae:	460c      	mov	r4, r1
 80067b0:	b10a      	cbz	r2, 80067b6 <_printf_common+0x26>
 80067b2:	3301      	adds	r3, #1
 80067b4:	6033      	str	r3, [r6, #0]
 80067b6:	6823      	ldr	r3, [r4, #0]
 80067b8:	0699      	lsls	r1, r3, #26
 80067ba:	bf42      	ittt	mi
 80067bc:	6833      	ldrmi	r3, [r6, #0]
 80067be:	3302      	addmi	r3, #2
 80067c0:	6033      	strmi	r3, [r6, #0]
 80067c2:	6825      	ldr	r5, [r4, #0]
 80067c4:	f015 0506 	ands.w	r5, r5, #6
 80067c8:	d106      	bne.n	80067d8 <_printf_common+0x48>
 80067ca:	f104 0a19 	add.w	sl, r4, #25
 80067ce:	68e3      	ldr	r3, [r4, #12]
 80067d0:	6832      	ldr	r2, [r6, #0]
 80067d2:	1a9b      	subs	r3, r3, r2
 80067d4:	42ab      	cmp	r3, r5
 80067d6:	dc26      	bgt.n	8006826 <_printf_common+0x96>
 80067d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80067dc:	6822      	ldr	r2, [r4, #0]
 80067de:	3b00      	subs	r3, #0
 80067e0:	bf18      	it	ne
 80067e2:	2301      	movne	r3, #1
 80067e4:	0692      	lsls	r2, r2, #26
 80067e6:	d42b      	bmi.n	8006840 <_printf_common+0xb0>
 80067e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80067ec:	4641      	mov	r1, r8
 80067ee:	4638      	mov	r0, r7
 80067f0:	47c8      	blx	r9
 80067f2:	3001      	adds	r0, #1
 80067f4:	d01e      	beq.n	8006834 <_printf_common+0xa4>
 80067f6:	6823      	ldr	r3, [r4, #0]
 80067f8:	6922      	ldr	r2, [r4, #16]
 80067fa:	f003 0306 	and.w	r3, r3, #6
 80067fe:	2b04      	cmp	r3, #4
 8006800:	bf02      	ittt	eq
 8006802:	68e5      	ldreq	r5, [r4, #12]
 8006804:	6833      	ldreq	r3, [r6, #0]
 8006806:	1aed      	subeq	r5, r5, r3
 8006808:	68a3      	ldr	r3, [r4, #8]
 800680a:	bf0c      	ite	eq
 800680c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006810:	2500      	movne	r5, #0
 8006812:	4293      	cmp	r3, r2
 8006814:	bfc4      	itt	gt
 8006816:	1a9b      	subgt	r3, r3, r2
 8006818:	18ed      	addgt	r5, r5, r3
 800681a:	2600      	movs	r6, #0
 800681c:	341a      	adds	r4, #26
 800681e:	42b5      	cmp	r5, r6
 8006820:	d11a      	bne.n	8006858 <_printf_common+0xc8>
 8006822:	2000      	movs	r0, #0
 8006824:	e008      	b.n	8006838 <_printf_common+0xa8>
 8006826:	2301      	movs	r3, #1
 8006828:	4652      	mov	r2, sl
 800682a:	4641      	mov	r1, r8
 800682c:	4638      	mov	r0, r7
 800682e:	47c8      	blx	r9
 8006830:	3001      	adds	r0, #1
 8006832:	d103      	bne.n	800683c <_printf_common+0xac>
 8006834:	f04f 30ff 	mov.w	r0, #4294967295
 8006838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800683c:	3501      	adds	r5, #1
 800683e:	e7c6      	b.n	80067ce <_printf_common+0x3e>
 8006840:	18e1      	adds	r1, r4, r3
 8006842:	1c5a      	adds	r2, r3, #1
 8006844:	2030      	movs	r0, #48	@ 0x30
 8006846:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800684a:	4422      	add	r2, r4
 800684c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006850:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006854:	3302      	adds	r3, #2
 8006856:	e7c7      	b.n	80067e8 <_printf_common+0x58>
 8006858:	2301      	movs	r3, #1
 800685a:	4622      	mov	r2, r4
 800685c:	4641      	mov	r1, r8
 800685e:	4638      	mov	r0, r7
 8006860:	47c8      	blx	r9
 8006862:	3001      	adds	r0, #1
 8006864:	d0e6      	beq.n	8006834 <_printf_common+0xa4>
 8006866:	3601      	adds	r6, #1
 8006868:	e7d9      	b.n	800681e <_printf_common+0x8e>
	...

0800686c <_printf_i>:
 800686c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006870:	7e0f      	ldrb	r7, [r1, #24]
 8006872:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006874:	2f78      	cmp	r7, #120	@ 0x78
 8006876:	4691      	mov	r9, r2
 8006878:	4680      	mov	r8, r0
 800687a:	460c      	mov	r4, r1
 800687c:	469a      	mov	sl, r3
 800687e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006882:	d807      	bhi.n	8006894 <_printf_i+0x28>
 8006884:	2f62      	cmp	r7, #98	@ 0x62
 8006886:	d80a      	bhi.n	800689e <_printf_i+0x32>
 8006888:	2f00      	cmp	r7, #0
 800688a:	f000 80d2 	beq.w	8006a32 <_printf_i+0x1c6>
 800688e:	2f58      	cmp	r7, #88	@ 0x58
 8006890:	f000 80b9 	beq.w	8006a06 <_printf_i+0x19a>
 8006894:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006898:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800689c:	e03a      	b.n	8006914 <_printf_i+0xa8>
 800689e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80068a2:	2b15      	cmp	r3, #21
 80068a4:	d8f6      	bhi.n	8006894 <_printf_i+0x28>
 80068a6:	a101      	add	r1, pc, #4	@ (adr r1, 80068ac <_printf_i+0x40>)
 80068a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80068ac:	08006905 	.word	0x08006905
 80068b0:	08006919 	.word	0x08006919
 80068b4:	08006895 	.word	0x08006895
 80068b8:	08006895 	.word	0x08006895
 80068bc:	08006895 	.word	0x08006895
 80068c0:	08006895 	.word	0x08006895
 80068c4:	08006919 	.word	0x08006919
 80068c8:	08006895 	.word	0x08006895
 80068cc:	08006895 	.word	0x08006895
 80068d0:	08006895 	.word	0x08006895
 80068d4:	08006895 	.word	0x08006895
 80068d8:	08006a19 	.word	0x08006a19
 80068dc:	08006943 	.word	0x08006943
 80068e0:	080069d3 	.word	0x080069d3
 80068e4:	08006895 	.word	0x08006895
 80068e8:	08006895 	.word	0x08006895
 80068ec:	08006a3b 	.word	0x08006a3b
 80068f0:	08006895 	.word	0x08006895
 80068f4:	08006943 	.word	0x08006943
 80068f8:	08006895 	.word	0x08006895
 80068fc:	08006895 	.word	0x08006895
 8006900:	080069db 	.word	0x080069db
 8006904:	6833      	ldr	r3, [r6, #0]
 8006906:	1d1a      	adds	r2, r3, #4
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	6032      	str	r2, [r6, #0]
 800690c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006910:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006914:	2301      	movs	r3, #1
 8006916:	e09d      	b.n	8006a54 <_printf_i+0x1e8>
 8006918:	6833      	ldr	r3, [r6, #0]
 800691a:	6820      	ldr	r0, [r4, #0]
 800691c:	1d19      	adds	r1, r3, #4
 800691e:	6031      	str	r1, [r6, #0]
 8006920:	0606      	lsls	r6, r0, #24
 8006922:	d501      	bpl.n	8006928 <_printf_i+0xbc>
 8006924:	681d      	ldr	r5, [r3, #0]
 8006926:	e003      	b.n	8006930 <_printf_i+0xc4>
 8006928:	0645      	lsls	r5, r0, #25
 800692a:	d5fb      	bpl.n	8006924 <_printf_i+0xb8>
 800692c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006930:	2d00      	cmp	r5, #0
 8006932:	da03      	bge.n	800693c <_printf_i+0xd0>
 8006934:	232d      	movs	r3, #45	@ 0x2d
 8006936:	426d      	negs	r5, r5
 8006938:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800693c:	4859      	ldr	r0, [pc, #356]	@ (8006aa4 <_printf_i+0x238>)
 800693e:	230a      	movs	r3, #10
 8006940:	e011      	b.n	8006966 <_printf_i+0xfa>
 8006942:	6821      	ldr	r1, [r4, #0]
 8006944:	6833      	ldr	r3, [r6, #0]
 8006946:	0608      	lsls	r0, r1, #24
 8006948:	f853 5b04 	ldr.w	r5, [r3], #4
 800694c:	d402      	bmi.n	8006954 <_printf_i+0xe8>
 800694e:	0649      	lsls	r1, r1, #25
 8006950:	bf48      	it	mi
 8006952:	b2ad      	uxthmi	r5, r5
 8006954:	2f6f      	cmp	r7, #111	@ 0x6f
 8006956:	4853      	ldr	r0, [pc, #332]	@ (8006aa4 <_printf_i+0x238>)
 8006958:	6033      	str	r3, [r6, #0]
 800695a:	bf14      	ite	ne
 800695c:	230a      	movne	r3, #10
 800695e:	2308      	moveq	r3, #8
 8006960:	2100      	movs	r1, #0
 8006962:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006966:	6866      	ldr	r6, [r4, #4]
 8006968:	60a6      	str	r6, [r4, #8]
 800696a:	2e00      	cmp	r6, #0
 800696c:	bfa2      	ittt	ge
 800696e:	6821      	ldrge	r1, [r4, #0]
 8006970:	f021 0104 	bicge.w	r1, r1, #4
 8006974:	6021      	strge	r1, [r4, #0]
 8006976:	b90d      	cbnz	r5, 800697c <_printf_i+0x110>
 8006978:	2e00      	cmp	r6, #0
 800697a:	d04b      	beq.n	8006a14 <_printf_i+0x1a8>
 800697c:	4616      	mov	r6, r2
 800697e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006982:	fb03 5711 	mls	r7, r3, r1, r5
 8006986:	5dc7      	ldrb	r7, [r0, r7]
 8006988:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800698c:	462f      	mov	r7, r5
 800698e:	42bb      	cmp	r3, r7
 8006990:	460d      	mov	r5, r1
 8006992:	d9f4      	bls.n	800697e <_printf_i+0x112>
 8006994:	2b08      	cmp	r3, #8
 8006996:	d10b      	bne.n	80069b0 <_printf_i+0x144>
 8006998:	6823      	ldr	r3, [r4, #0]
 800699a:	07df      	lsls	r7, r3, #31
 800699c:	d508      	bpl.n	80069b0 <_printf_i+0x144>
 800699e:	6923      	ldr	r3, [r4, #16]
 80069a0:	6861      	ldr	r1, [r4, #4]
 80069a2:	4299      	cmp	r1, r3
 80069a4:	bfde      	ittt	le
 80069a6:	2330      	movle	r3, #48	@ 0x30
 80069a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80069ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 80069b0:	1b92      	subs	r2, r2, r6
 80069b2:	6122      	str	r2, [r4, #16]
 80069b4:	f8cd a000 	str.w	sl, [sp]
 80069b8:	464b      	mov	r3, r9
 80069ba:	aa03      	add	r2, sp, #12
 80069bc:	4621      	mov	r1, r4
 80069be:	4640      	mov	r0, r8
 80069c0:	f7ff fee6 	bl	8006790 <_printf_common>
 80069c4:	3001      	adds	r0, #1
 80069c6:	d14a      	bne.n	8006a5e <_printf_i+0x1f2>
 80069c8:	f04f 30ff 	mov.w	r0, #4294967295
 80069cc:	b004      	add	sp, #16
 80069ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069d2:	6823      	ldr	r3, [r4, #0]
 80069d4:	f043 0320 	orr.w	r3, r3, #32
 80069d8:	6023      	str	r3, [r4, #0]
 80069da:	4833      	ldr	r0, [pc, #204]	@ (8006aa8 <_printf_i+0x23c>)
 80069dc:	2778      	movs	r7, #120	@ 0x78
 80069de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80069e2:	6823      	ldr	r3, [r4, #0]
 80069e4:	6831      	ldr	r1, [r6, #0]
 80069e6:	061f      	lsls	r7, r3, #24
 80069e8:	f851 5b04 	ldr.w	r5, [r1], #4
 80069ec:	d402      	bmi.n	80069f4 <_printf_i+0x188>
 80069ee:	065f      	lsls	r7, r3, #25
 80069f0:	bf48      	it	mi
 80069f2:	b2ad      	uxthmi	r5, r5
 80069f4:	6031      	str	r1, [r6, #0]
 80069f6:	07d9      	lsls	r1, r3, #31
 80069f8:	bf44      	itt	mi
 80069fa:	f043 0320 	orrmi.w	r3, r3, #32
 80069fe:	6023      	strmi	r3, [r4, #0]
 8006a00:	b11d      	cbz	r5, 8006a0a <_printf_i+0x19e>
 8006a02:	2310      	movs	r3, #16
 8006a04:	e7ac      	b.n	8006960 <_printf_i+0xf4>
 8006a06:	4827      	ldr	r0, [pc, #156]	@ (8006aa4 <_printf_i+0x238>)
 8006a08:	e7e9      	b.n	80069de <_printf_i+0x172>
 8006a0a:	6823      	ldr	r3, [r4, #0]
 8006a0c:	f023 0320 	bic.w	r3, r3, #32
 8006a10:	6023      	str	r3, [r4, #0]
 8006a12:	e7f6      	b.n	8006a02 <_printf_i+0x196>
 8006a14:	4616      	mov	r6, r2
 8006a16:	e7bd      	b.n	8006994 <_printf_i+0x128>
 8006a18:	6833      	ldr	r3, [r6, #0]
 8006a1a:	6825      	ldr	r5, [r4, #0]
 8006a1c:	6961      	ldr	r1, [r4, #20]
 8006a1e:	1d18      	adds	r0, r3, #4
 8006a20:	6030      	str	r0, [r6, #0]
 8006a22:	062e      	lsls	r6, r5, #24
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	d501      	bpl.n	8006a2c <_printf_i+0x1c0>
 8006a28:	6019      	str	r1, [r3, #0]
 8006a2a:	e002      	b.n	8006a32 <_printf_i+0x1c6>
 8006a2c:	0668      	lsls	r0, r5, #25
 8006a2e:	d5fb      	bpl.n	8006a28 <_printf_i+0x1bc>
 8006a30:	8019      	strh	r1, [r3, #0]
 8006a32:	2300      	movs	r3, #0
 8006a34:	6123      	str	r3, [r4, #16]
 8006a36:	4616      	mov	r6, r2
 8006a38:	e7bc      	b.n	80069b4 <_printf_i+0x148>
 8006a3a:	6833      	ldr	r3, [r6, #0]
 8006a3c:	1d1a      	adds	r2, r3, #4
 8006a3e:	6032      	str	r2, [r6, #0]
 8006a40:	681e      	ldr	r6, [r3, #0]
 8006a42:	6862      	ldr	r2, [r4, #4]
 8006a44:	2100      	movs	r1, #0
 8006a46:	4630      	mov	r0, r6
 8006a48:	f7f9 fbca 	bl	80001e0 <memchr>
 8006a4c:	b108      	cbz	r0, 8006a52 <_printf_i+0x1e6>
 8006a4e:	1b80      	subs	r0, r0, r6
 8006a50:	6060      	str	r0, [r4, #4]
 8006a52:	6863      	ldr	r3, [r4, #4]
 8006a54:	6123      	str	r3, [r4, #16]
 8006a56:	2300      	movs	r3, #0
 8006a58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a5c:	e7aa      	b.n	80069b4 <_printf_i+0x148>
 8006a5e:	6923      	ldr	r3, [r4, #16]
 8006a60:	4632      	mov	r2, r6
 8006a62:	4649      	mov	r1, r9
 8006a64:	4640      	mov	r0, r8
 8006a66:	47d0      	blx	sl
 8006a68:	3001      	adds	r0, #1
 8006a6a:	d0ad      	beq.n	80069c8 <_printf_i+0x15c>
 8006a6c:	6823      	ldr	r3, [r4, #0]
 8006a6e:	079b      	lsls	r3, r3, #30
 8006a70:	d413      	bmi.n	8006a9a <_printf_i+0x22e>
 8006a72:	68e0      	ldr	r0, [r4, #12]
 8006a74:	9b03      	ldr	r3, [sp, #12]
 8006a76:	4298      	cmp	r0, r3
 8006a78:	bfb8      	it	lt
 8006a7a:	4618      	movlt	r0, r3
 8006a7c:	e7a6      	b.n	80069cc <_printf_i+0x160>
 8006a7e:	2301      	movs	r3, #1
 8006a80:	4632      	mov	r2, r6
 8006a82:	4649      	mov	r1, r9
 8006a84:	4640      	mov	r0, r8
 8006a86:	47d0      	blx	sl
 8006a88:	3001      	adds	r0, #1
 8006a8a:	d09d      	beq.n	80069c8 <_printf_i+0x15c>
 8006a8c:	3501      	adds	r5, #1
 8006a8e:	68e3      	ldr	r3, [r4, #12]
 8006a90:	9903      	ldr	r1, [sp, #12]
 8006a92:	1a5b      	subs	r3, r3, r1
 8006a94:	42ab      	cmp	r3, r5
 8006a96:	dcf2      	bgt.n	8006a7e <_printf_i+0x212>
 8006a98:	e7eb      	b.n	8006a72 <_printf_i+0x206>
 8006a9a:	2500      	movs	r5, #0
 8006a9c:	f104 0619 	add.w	r6, r4, #25
 8006aa0:	e7f5      	b.n	8006a8e <_printf_i+0x222>
 8006aa2:	bf00      	nop
 8006aa4:	08006c9d 	.word	0x08006c9d
 8006aa8:	08006cae 	.word	0x08006cae

08006aac <memmove>:
 8006aac:	4288      	cmp	r0, r1
 8006aae:	b510      	push	{r4, lr}
 8006ab0:	eb01 0402 	add.w	r4, r1, r2
 8006ab4:	d902      	bls.n	8006abc <memmove+0x10>
 8006ab6:	4284      	cmp	r4, r0
 8006ab8:	4623      	mov	r3, r4
 8006aba:	d807      	bhi.n	8006acc <memmove+0x20>
 8006abc:	1e43      	subs	r3, r0, #1
 8006abe:	42a1      	cmp	r1, r4
 8006ac0:	d008      	beq.n	8006ad4 <memmove+0x28>
 8006ac2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ac6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006aca:	e7f8      	b.n	8006abe <memmove+0x12>
 8006acc:	4402      	add	r2, r0
 8006ace:	4601      	mov	r1, r0
 8006ad0:	428a      	cmp	r2, r1
 8006ad2:	d100      	bne.n	8006ad6 <memmove+0x2a>
 8006ad4:	bd10      	pop	{r4, pc}
 8006ad6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006ada:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006ade:	e7f7      	b.n	8006ad0 <memmove+0x24>

08006ae0 <_sbrk_r>:
 8006ae0:	b538      	push	{r3, r4, r5, lr}
 8006ae2:	4d06      	ldr	r5, [pc, #24]	@ (8006afc <_sbrk_r+0x1c>)
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	4604      	mov	r4, r0
 8006ae8:	4608      	mov	r0, r1
 8006aea:	602b      	str	r3, [r5, #0]
 8006aec:	f7fa fb8a 	bl	8001204 <_sbrk>
 8006af0:	1c43      	adds	r3, r0, #1
 8006af2:	d102      	bne.n	8006afa <_sbrk_r+0x1a>
 8006af4:	682b      	ldr	r3, [r5, #0]
 8006af6:	b103      	cbz	r3, 8006afa <_sbrk_r+0x1a>
 8006af8:	6023      	str	r3, [r4, #0]
 8006afa:	bd38      	pop	{r3, r4, r5, pc}
 8006afc:	200130c0 	.word	0x200130c0

08006b00 <_realloc_r>:
 8006b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b04:	4680      	mov	r8, r0
 8006b06:	4615      	mov	r5, r2
 8006b08:	460c      	mov	r4, r1
 8006b0a:	b921      	cbnz	r1, 8006b16 <_realloc_r+0x16>
 8006b0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b10:	4611      	mov	r1, r2
 8006b12:	f7ff bc59 	b.w	80063c8 <_malloc_r>
 8006b16:	b92a      	cbnz	r2, 8006b24 <_realloc_r+0x24>
 8006b18:	f7ff fbea 	bl	80062f0 <_free_r>
 8006b1c:	2400      	movs	r4, #0
 8006b1e:	4620      	mov	r0, r4
 8006b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b24:	f000 f81a 	bl	8006b5c <_malloc_usable_size_r>
 8006b28:	4285      	cmp	r5, r0
 8006b2a:	4606      	mov	r6, r0
 8006b2c:	d802      	bhi.n	8006b34 <_realloc_r+0x34>
 8006b2e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006b32:	d8f4      	bhi.n	8006b1e <_realloc_r+0x1e>
 8006b34:	4629      	mov	r1, r5
 8006b36:	4640      	mov	r0, r8
 8006b38:	f7ff fc46 	bl	80063c8 <_malloc_r>
 8006b3c:	4607      	mov	r7, r0
 8006b3e:	2800      	cmp	r0, #0
 8006b40:	d0ec      	beq.n	8006b1c <_realloc_r+0x1c>
 8006b42:	42b5      	cmp	r5, r6
 8006b44:	462a      	mov	r2, r5
 8006b46:	4621      	mov	r1, r4
 8006b48:	bf28      	it	cs
 8006b4a:	4632      	movcs	r2, r6
 8006b4c:	f7ff fbc2 	bl	80062d4 <memcpy>
 8006b50:	4621      	mov	r1, r4
 8006b52:	4640      	mov	r0, r8
 8006b54:	f7ff fbcc 	bl	80062f0 <_free_r>
 8006b58:	463c      	mov	r4, r7
 8006b5a:	e7e0      	b.n	8006b1e <_realloc_r+0x1e>

08006b5c <_malloc_usable_size_r>:
 8006b5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b60:	1f18      	subs	r0, r3, #4
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	bfbc      	itt	lt
 8006b66:	580b      	ldrlt	r3, [r1, r0]
 8006b68:	18c0      	addlt	r0, r0, r3
 8006b6a:	4770      	bx	lr

08006b6c <_init>:
 8006b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b6e:	bf00      	nop
 8006b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b72:	bc08      	pop	{r3}
 8006b74:	469e      	mov	lr, r3
 8006b76:	4770      	bx	lr

08006b78 <_fini>:
 8006b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b7a:	bf00      	nop
 8006b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b7e:	bc08      	pop	{r3}
 8006b80:	469e      	mov	lr, r3
 8006b82:	4770      	bx	lr
